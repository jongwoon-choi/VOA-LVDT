
VCA-LVDT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004f48  08004f48  00005f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fcc  08004fcc  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004fcc  08004fcc  00005fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd4  08004fd4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd4  08004fd4  00005fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fd8  08004fd8  00005fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004fdc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  20000010  08004fec  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d4c  08004fec  00006d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035cdb  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000662f  00000000  00000000  0003bd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00017608  00000000  00000000  0004234a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f48  00000000  00000000  00059958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002122  00000000  00000000  0005b8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024af8  00000000  00000000  0005d9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033bfb  00000000  00000000  000824ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb347  00000000  00000000  000b60b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a13fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056a0  00000000  00000000  001a1440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001a6ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004f30 	.word	0x08004f30

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08004f30 	.word	0x08004f30

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800054c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800054e:	2400      	movs	r4, #0
{
 8000550:	b08c      	sub	sp, #48	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000552:	4621      	mov	r1, r4
 8000554:	2220      	movs	r2, #32
 8000556:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8000558:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800055c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	f004 fcad 	bl	8004ebc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000562:	481d      	ldr	r0, [pc, #116]	@ (80005d8 <MX_ADC1_Init+0x8c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000564:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000568:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 800056c:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000570:	2304      	movs	r3, #4
 8000572:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000574:	2301      	movs	r3, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000576:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800057a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800057e:	e9c0 440b 	strd	r4, r4, [r0, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000582:	8384      	strh	r4, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 8000584:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000586:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058a:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800058e:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000590:	f880 4040 	strb.w	r4, [r0, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	f000 fca4 	bl	8000ee0 <HAL_ADC_Init>
 8000598:	b108      	cbz	r0, 800059e <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 800059a:	f000 fa5d 	bl	8000a58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800059e:	480e      	ldr	r0, [pc, #56]	@ (80005d8 <MX_ADC1_Init+0x8c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a2:	a901      	add	r1, sp, #4
 80005a4:	f000 ff66 	bl	8001474 <HAL_ADCEx_MultiModeConfigChannel>
 80005a8:	b108      	cbz	r0, 80005ae <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80005aa:	f000 fa55 	bl	8000a58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ae:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <MX_ADC1_Init+0x90>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_ADC1_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b2:	2306      	movs	r3, #6
 80005b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005b8:	2300      	movs	r3, #0
 80005ba:	227f      	movs	r2, #127	@ 0x7f
 80005bc:	e9cd 3206 	strd	r3, r2, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c0:	a904      	add	r1, sp, #16
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005c2:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80005c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c8:	f000 fd7a 	bl	80010c0 <HAL_ADC_ConfigChannel>
 80005cc:	b108      	cbz	r0, 80005d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005ce:	f000 fa43 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d2:	b00c      	add	sp, #48	@ 0x30
 80005d4:	bd10      	pop	{r4, pc}
 80005d6:	bf00      	nop
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	04300002 	.word	0x04300002

080005e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e0:	b510      	push	{r4, lr}
 80005e2:	b098      	sub	sp, #96	@ 0x60
 80005e4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	2214      	movs	r2, #20
 80005e8:	2100      	movs	r1, #0
 80005ea:	a802      	add	r0, sp, #8
 80005ec:	f004 fc66 	bl	8004ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	2244      	movs	r2, #68	@ 0x44
 80005f2:	2100      	movs	r1, #0
 80005f4:	a807      	add	r0, sp, #28
 80005f6:	f004 fc61 	bl	8004ebc <memset>
  if(adcHandle->Instance==ADC1)
 80005fa:	6823      	ldr	r3, [r4, #0]
 80005fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000600:	d129      	bne.n	8000656 <HAL_ADC_MspInit+0x76>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000606:	9307      	str	r3, [sp, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000608:	a807      	add	r0, sp, #28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800060a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800060e:	9316      	str	r3, [sp, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000610:	f001 fe0e 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 8000614:	b108      	cbz	r0, 800061a <HAL_ADC_MspInit+0x3a>
    {
      Error_Handler();
 8000616:	f000 fa1f 	bl	8000a58 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <HAL_ADC_MspInit+0x7c>)
 800061c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800061e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000622:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000624:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000626:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000630:	f042 0201 	orr.w	r2, r2, #1
 8000634:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	9b01      	ldr	r3, [sp, #4]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000640:	2201      	movs	r2, #1
 8000642:	2303      	movs	r3, #3
 8000644:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f001 f8a5 	bl	80017a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000656:	b018      	add	sp, #96	@ 0x60
 8000658:	bd10      	pop	{r4, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f002 ffa0 	bl	80035a8 <osDelay>
  for(;;)
 8000668:	e7fb      	b.n	8000662 <StartDefaultTask+0x2>
	...

0800066c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800066c:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800066e:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <MX_FREERTOS_Init+0x14>)
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_FREERTOS_Init+0x18>)
 8000672:	2100      	movs	r1, #0
 8000674:	f002 ff54 	bl	8003520 <osThreadNew>
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <MX_FREERTOS_Init+0x1c>)
 800067a:	6018      	str	r0, [r3, #0]
}
 800067c:	bd08      	pop	{r3, pc}
 800067e:	bf00      	nop
 8000680:	08004f68 	.word	0x08004f68
 8000684:	08000661 	.word	0x08000661
 8000688:	20000098 	.word	0x20000098

0800068c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_DMA_Init+0x40>)
{
 800068e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000692:	f042 0204 	orr.w	r2, r2, #4
 8000696:	649a      	str	r2, [r3, #72]	@ 0x48
 8000698:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800069a:	f002 0204 	and.w	r2, r2, #4
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80006a4:	f042 0201 	orr.w	r2, r2, #1
 80006a8:	649a      	str	r2, [r3, #72]	@ 0x48
 80006aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2105      	movs	r1, #5
 80006b6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80006ba:	f000 ff55 	bl	8001568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006be:	200b      	movs	r0, #11

}
 80006c0:	b003      	add	sp, #12
 80006c2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006c6:	f000 bf81 	b.w	80015cc <HAL_NVIC_EnableIRQ>
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA4   ------> COMP_DAC11_group
*/
void MX_GPIO_Init(void)
{
 80006d0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	2214      	movs	r2, #20
{
 80006d4:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	eb0d 0002 	add.w	r0, sp, r2
 80006da:	2100      	movs	r1, #0
 80006dc:	f004 fbee 	bl	8004ebc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e0:	4b30      	ldr	r3, [pc, #192]	@ (80007a4 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80006e2:	4e31      	ldr	r6, [pc, #196]	@ (80007a8 <MX_GPIO_Init+0xd8>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006e6:	f042 0220 	orr.w	r2, r2, #32
 80006ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006ee:	f002 0220 	and.w	r2, r2, #32
 80006f2:	9201      	str	r2, [sp, #4]
 80006f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80006fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000700:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000704:	9202      	str	r2, [sp, #8]
 8000706:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800070a:	f042 0201 	orr.w	r2, r2, #1
 800070e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000710:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000712:	f002 0201 	and.w	r2, r2, #1
 8000716:	9203      	str	r2, [sp, #12]
 8000718:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800071c:	f042 0202 	orr.w	r2, r2, #2
 8000720:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800072a:	4630      	mov	r0, r6
 800072c:	2200      	movs	r2, #0
 800072e:	f240 1151 	movw	r1, #337	@ 0x151
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000734:	f001 f8fe 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800073e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000742:	f001 f8f7 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000748:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800074c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000750:	a905      	add	r1, sp, #20
 8000752:	4816      	ldr	r0, [pc, #88]	@ (80007ac <MX_GPIO_Init+0xdc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000756:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800075a:	f001 f821 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075e:	2303      	movs	r3, #3
 8000760:	2110      	movs	r1, #16
 8000762:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076a:	a905      	add	r1, sp, #20

  /*Configure GPIO pins : PB0 PB4 PB6 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f001 f816 	bl	80017a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	f240 1351 	movw	r3, #337	@ 0x151
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	a905      	add	r1, sp, #20
 800077a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f001 f80c 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000788:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	a905      	add	r1, sp, #20
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f001 f801 	bl	80017a0 <HAL_GPIO_Init>

}
 800079e:	b00a      	add	sp, #40	@ 0x28
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000400 	.word	0x48000400
 80007ac:	48001800 	.word	0x48001800

080007b0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b2:	4812      	ldr	r0, [pc, #72]	@ (80007fc <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x00503D58;
 80007b4:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_I2C1_Init+0x54>)
 80007b8:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	2300      	movs	r3, #0
 80007be:	2201      	movs	r2, #1
 80007c0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80007c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007cc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ce:	f001 f8b6 	bl	800193e <HAL_I2C_Init>
 80007d2:	b108      	cbz	r0, 80007d8 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 80007d4:	f000 f940 	bl	8000a58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <MX_I2C1_Init+0x4c>)
 80007da:	2100      	movs	r1, #0
 80007dc:	f001 f904 	bl	80019e8 <HAL_I2CEx_ConfigAnalogFilter>
 80007e0:	b108      	cbz	r0, 80007e6 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80007e2:	f000 f939 	bl	8000a58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_I2C1_Init+0x4c>)
 80007e8:	2100      	movs	r1, #0
 80007ea:	f001 f923 	bl	8001a34 <HAL_I2CEx_ConfigDigitalFilter>
 80007ee:	b118      	cbz	r0, 80007f8 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80007f4:	f000 b930 	b.w	8000a58 <Error_Handler>
}
 80007f8:	bd08      	pop	{r3, pc}
 80007fa:	bf00      	nop
 80007fc:	200000f0 	.word	0x200000f0
 8000800:	40005400 	.word	0x40005400
 8000804:	00503d58 	.word	0x00503d58

08000808 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000808:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800080a:	4812      	ldr	r0, [pc, #72]	@ (8000854 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x00503D58;
 800080c:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <MX_I2C3_Init+0x50>)
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_I2C3_Init+0x54>)
 8000810:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000814:	2300      	movs	r3, #0
 8000816:	2201      	movs	r2, #1
 8000818:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
 800081c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000820:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000826:	f001 f88a 	bl	800193e <HAL_I2C_Init>
 800082a:	b108      	cbz	r0, 8000830 <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 800082c:	f000 f914 	bl	8000a58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000830:	4808      	ldr	r0, [pc, #32]	@ (8000854 <MX_I2C3_Init+0x4c>)
 8000832:	2100      	movs	r1, #0
 8000834:	f001 f8d8 	bl	80019e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000838:	b108      	cbz	r0, 800083e <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 800083a:	f000 f90d 	bl	8000a58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_I2C3_Init+0x4c>)
 8000840:	2100      	movs	r1, #0
 8000842:	f001 f8f7 	bl	8001a34 <HAL_I2CEx_ConfigDigitalFilter>
 8000846:	b118      	cbz	r0, 8000850 <MX_I2C3_Init+0x48>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800084c:	f000 b904 	b.w	8000a58 <Error_Handler>
}
 8000850:	bd08      	pop	{r3, pc}
 8000852:	bf00      	nop
 8000854:	2000009c 	.word	0x2000009c
 8000858:	40007800 	.word	0x40007800
 800085c:	00503d58 	.word	0x00503d58

08000860 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	b09d      	sub	sp, #116	@ 0x74
 8000864:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	2214      	movs	r2, #20
 8000868:	2100      	movs	r1, #0
 800086a:	a806      	add	r0, sp, #24
 800086c:	f004 fb26 	bl	8004ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000870:	2244      	movs	r2, #68	@ 0x44
 8000872:	2100      	movs	r1, #0
 8000874:	a80b      	add	r0, sp, #44	@ 0x2c
 8000876:	f004 fb21 	bl	8004ebc <memset>
  if(i2cHandle->Instance==I2C1)
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	4a42      	ldr	r2, [pc, #264]	@ (8000988 <HAL_I2C_MspInit+0x128>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d13e      	bne.n	8000900 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000882:	2340      	movs	r3, #64	@ 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000886:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000888:	f001 fcd2 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	b108      	cbz	r0, 8000892 <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 800088e:	f000 f8e3 	bl	8000a58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4c3e      	ldr	r4, [pc, #248]	@ (800098c <HAL_I2C_MspInit+0x12c>)
 8000894:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800089c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80008ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80008b0:	f003 0302 	and.w	r3, r3, #2
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b8:	2712      	movs	r7, #18
 80008ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c0:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	a906      	add	r1, sp, #24
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c8:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	e9cd 5508 	strd	r5, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d0:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f000 ff65 	bl	80017a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008d6:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	482d      	ldr	r0, [pc, #180]	@ (8000990 <HAL_I2C_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008da:	960a      	str	r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008de:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	e9cd 5508 	strd	r5, r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f000 ff5b 	bl	80017a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80008ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80008f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80008f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008f8:	9302      	str	r3, [sp, #8]
 80008fa:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008fc:	b01d      	add	sp, #116	@ 0x74
 80008fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(i2cHandle->Instance==I2C3)
 8000900:	4a24      	ldr	r2, [pc, #144]	@ (8000994 <HAL_I2C_MspInit+0x134>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d1fa      	bne.n	80008fc <HAL_I2C_MspInit+0x9c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000906:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090a:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800090c:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090e:	f001 fc8f 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	b108      	cbz	r0, 8000918 <HAL_I2C_MspInit+0xb8>
      Error_Handler();
 8000914:	f000 f8a0 	bl	8000a58 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4c1c      	ldr	r4, [pc, #112]	@ (800098c <HAL_I2C_MspInit+0x12c>)
 800091a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000922:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	9303      	str	r3, [sp, #12]
 800092a:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800092e:	f043 0302 	orr.w	r3, r3, #2
 8000932:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000934:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	9304      	str	r3, [sp, #16]
 800093c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093e:	2612      	movs	r6, #18
 8000940:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000944:	e9cd 3606 	strd	r3, r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 800094a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	a906      	add	r1, sp, #24
 800094e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8000952:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	e9cd 5508 	strd	r5, r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f000 ff22 	bl	80017a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800095c:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800095e:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	480b      	ldr	r0, [pc, #44]	@ (8000990 <HAL_I2C_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000964:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000968:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	e9cd 5508 	strd	r5, r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f000 ff17 	bl	80017a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000972:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000974:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000978:	65a3      	str	r3, [r4, #88]	@ 0x58
 800097a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800097c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000980:	9305      	str	r3, [sp, #20]
 8000982:	9b05      	ldr	r3, [sp, #20]
}
 8000984:	e7ba      	b.n	80008fc <HAL_I2C_MspInit+0x9c>
 8000986:	bf00      	nop
 8000988:	40005400 	.word	0x40005400
 800098c:	40021000 	.word	0x40021000
 8000990:	48000400 	.word	0x48000400
 8000994:	40007800 	.word	0x40007800

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b500      	push	{lr}
 800099a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099c:	2238      	movs	r2, #56	@ 0x38
 800099e:	2100      	movs	r1, #0
 80009a0:	a806      	add	r0, sp, #24
 80009a2:	f004 fa8b 	bl	8004ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a6:	2100      	movs	r1, #0
 80009a8:	2214      	movs	r2, #20
 80009aa:	a801      	add	r0, sp, #4
 80009ac:	f004 fa86 	bl	8004ebc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009b4:	f001 f864 	bl	8001a80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b8:	2302      	movs	r3, #2
 80009ba:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80009c0:	2340      	movs	r3, #64	@ 0x40
 80009c2:	e9cd 0309 	strd	r0, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c6:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ca:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f001 f8b8 	bl	8001b40 <HAL_RCC_OscConfig>
 80009d0:	4601      	mov	r1, r0
 80009d2:	b108      	cbz	r0, 80009d8 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d8:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009dc:	220f      	movs	r2, #15
 80009de:	2301      	movs	r3, #1
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e4:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e8:	f001 faec 	bl	8001fc4 <HAL_RCC_ClockConfig>
 80009ec:	b108      	cbz	r0, 80009f2 <SystemClock_Config+0x5a>
 80009ee:	b672      	cpsid	i
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <SystemClock_Config+0x58>
}
 80009f2:	b015      	add	sp, #84	@ 0x54
 80009f4:	f85d fb04 	ldr.w	pc, [sp], #4

080009f8 <main>:
{
 80009f8:	b508      	push	{r3, lr}
  HAL_Init();
 80009fa:	f000 fa38 	bl	8000e6e <HAL_Init>
  SystemClock_Config();
 80009fe:	f7ff ffcb 	bl	8000998 <SystemClock_Config>
  MX_GPIO_Init();
 8000a02:	f7ff fe65 	bl	80006d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a06:	f7ff fe41 	bl	800068c <MX_DMA_Init>
  MX_I2C1_Init();
 8000a0a:	f7ff fed1 	bl	80007b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a0e:	f000 f825 	bl	8000a5c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a12:	f000 f913 	bl	8000c3c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a16:	f000 f943 	bl	8000ca0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a1a:	f7ff fd97 	bl	800054c <MX_ADC1_Init>
  MX_I2C3_Init();
 8000a1e:	f7ff fef3 	bl	8000808 <MX_I2C3_Init>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)uart_rx_buf, 5);
 8000a22:	4906      	ldr	r1, [pc, #24]	@ (8000a3c <main+0x44>)
 8000a24:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <main+0x48>)
 8000a26:	2205      	movs	r2, #5
 8000a28:	f002 fca2 	bl	8003370 <HAL_UART_Receive_IT>
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000a2c:	f002 fd4c 	bl	80034c8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a30:	f7ff fe1c 	bl	800066c <MX_FREERTOS_Init>
  osKernelStart();
 8000a34:	f002 fd5a 	bl	80034ec <osKernelStart>
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <main+0x40>
 8000a3a:	bf00      	nop
 8000a3c:	200001f4 	.word	0x200001f4
 8000a40:	20000368 	.word	0x20000368

08000a44 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM8)
 8000a44:	6802      	ldr	r2, [r0, #0]
 8000a46:	4b03      	ldr	r3, [pc, #12]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d101      	bne.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000a4c:	f000 ba1e 	b.w	8000e8c <HAL_IncTick>
}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40013400 	.word	0x40013400

08000a58 <Error_Handler>:
 8000a58:	b672      	cpsid	i
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <Error_Handler+0x2>

08000a5c <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a5c:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4a11      	ldr	r2, [pc, #68]	@ (8000aa4 <MX_SPI1_Init+0x48>)
{
 8000a60:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a62:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000a66:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000a70:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a78:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8000a7c:	2207      	movs	r2, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a82:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a86:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a90:	f001 fd0a 	bl	80024a8 <HAL_SPI_Init>
 8000a94:	b118      	cbz	r0, 8000a9e <MX_SPI1_Init+0x42>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000a9a:	f7ff bfdd 	b.w	8000a58 <Error_Handler>
}
 8000a9e:	bd08      	pop	{r3, pc}
 8000aa0:	20000144 	.word	0x20000144
 8000aa4:	40013000 	.word	0x40013000

08000aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aa8:	b530      	push	{r4, r5, lr}
 8000aaa:	4604      	mov	r4, r0
 8000aac:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	2214      	movs	r2, #20
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	a803      	add	r0, sp, #12
 8000ab4:	f004 fa02 	bl	8004ebc <memset>
  if(spiHandle->Instance==SPI1)
 8000ab8:	6822      	ldr	r2, [r4, #0]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <HAL_SPI_MspInit+0x84>)
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d132      	bne.n	8000b26 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac0:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2502      	movs	r5, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ac8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000acc:	661a      	str	r2, [r3, #96]	@ 0x60
 8000ace:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ad0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000ad4:	9200      	str	r2, [sp, #0]
 8000ad6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ada:	f042 0201 	orr.w	r2, r2, #1
 8000ade:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ae0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ae2:	f002 0201 	and.w	r2, r2, #1
 8000ae6:	9201      	str	r2, [sp, #4]
 8000ae8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000aec:	f042 0202 	orr.w	r2, r2, #2
 8000af0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000afc:	2405      	movs	r4, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	23c0      	movs	r3, #192	@ 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	a903      	add	r1, sp, #12
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f000 fe48 	bl	80017a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b10:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b18:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f000 fe3d 	bl	80017a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b26:	b009      	add	sp, #36	@ 0x24
 8000b28:	bd30      	pop	{r4, r5, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40013000 	.word	0x40013000
 8000b30:	48000400 	.word	0x48000400

08000b34 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <HAL_MspInit+0x40>)
{
 8000b36:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b3a:	f042 0201 	orr.w	r2, r2, #1
 8000b3e:	661a      	str	r2, [r3, #96]	@ 0x60
 8000b40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b42:	f002 0201 	and.w	r2, r2, #1
 8000b46:	9200      	str	r2, [sp, #0]
 8000b48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b4c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b50:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b64:	f000 fd00 	bl	8001568 <HAL_NVIC_SetPriority>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	b003      	add	sp, #12
 8000b6a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b6e:	f000 bfdf 	b.w	8001b30 <HAL_PWREx_DisableUCPDDeadBattery>
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b570      	push	{r4, r5, r6, lr}
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <HAL_InitTick+0x78>)

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8000b7c:	4d1d      	ldr	r5, [pc, #116]	@ (8000bf4 <HAL_InitTick+0x7c>)
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000b7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
{
 8000b84:	b088      	sub	sp, #32
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000b86:	661a      	str	r2, [r3, #96]	@ 0x60
 8000b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000b90:	9302      	str	r3, [sp, #8]
{
 8000b92:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b94:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000b96:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b98:	f001 fb2c 	bl	80021f4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b9c:	f001 fb18 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
  htim8.Instance = TIM8;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <HAL_InitTick+0x80>)
 8000ba2:	602b      	str	r3, [r5, #0]
   * Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8000ba4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000ba8:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <HAL_InitTick+0x84>)
 8000bac:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bb0:	3801      	subs	r0, #1
  htim8.Init.Prescaler = uwPrescalerValue;
  htim8.Init.ClockDivision = 0;
 8000bb2:	2300      	movs	r3, #0
  htim8.Init.Prescaler = uwPrescalerValue;
 8000bb4:	6068      	str	r0, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim8);
 8000bb6:	4628      	mov	r0, r5
  htim8.Init.ClockDivision = 0;
 8000bb8:	612b      	str	r3, [r5, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	60ab      	str	r3, [r5, #8]
  status = HAL_TIM_Base_Init(&htim8);
 8000bbc:	f001 fe42 	bl	8002844 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	b980      	cbnz	r0, 8000be6 <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	f001 fcdf 	bl	8002588 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000bca:	4604      	mov	r4, r0
 8000bcc:	b958      	cbnz	r0, 8000be6 <HAL_InitTick+0x6e>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000bce:	202c      	movs	r0, #44	@ 0x2c
 8000bd0:	f000 fcfc 	bl	80015cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd4:	2e0f      	cmp	r6, #15
 8000bd6:	d809      	bhi.n	8000bec <HAL_InitTick+0x74>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 8000bd8:	4622      	mov	r2, r4
 8000bda:	4631      	mov	r1, r6
 8000bdc:	202c      	movs	r0, #44	@ 0x2c
 8000bde:	f000 fcc3 	bl	8001568 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <HAL_InitTick+0x88>)
 8000be4:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8000be6:	4620      	mov	r0, r4
 8000be8:	b008      	add	sp, #32
 8000bea:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8000bec:	2401      	movs	r4, #1
 8000bee:	e7fa      	b.n	8000be6 <HAL_InitTick+0x6e>
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	200001a8 	.word	0x200001a8
 8000bf8:	40013400 	.word	0x40013400
 8000bfc:	000f4240 	.word	0x000f4240
 8000c00:	20000008 	.word	0x20000008

08000c04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler>

08000c06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler>

08000c08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler>

08000c0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler>

08000c0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler>

08000c0e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	4770      	bx	lr

08000c10 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c10:	4801      	ldr	r0, [pc, #4]	@ (8000c18 <DMA1_Channel1_IRQHandler+0x8>)
 8000c12:	f000 bd7b 	b.w	800170c <HAL_DMA_IRQHandler>
 8000c16:	bf00      	nop
 8000c18:	20000274 	.word	0x20000274

08000c1c <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c1c:	4801      	ldr	r0, [pc, #4]	@ (8000c24 <TIM8_UP_IRQHandler+0x8>)
 8000c1e:	f001 bced 	b.w	80025fc <HAL_TIM_IRQHandler>
 8000c22:	bf00      	nop
 8000c24:	200001a8 	.word	0x200001a8

08000c28 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c28:	4a03      	ldr	r2, [pc, #12]	@ (8000c38 <SystemInit+0x10>)
 8000c2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000c2e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c32:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c3c:	4816      	ldr	r0, [pc, #88]	@ (8000c98 <MX_USART1_UART_Init+0x5c>)
  huart1.Init.BaudRate = 115200;
 8000c3e:	4a17      	ldr	r2, [pc, #92]	@ (8000c9c <MX_USART1_UART_Init+0x60>)
{
 8000c40:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 8000c42:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000c46:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5a:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5e:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c60:	f002 facb 	bl	80031fa <HAL_UART_Init>
 8000c64:	b108      	cbz	r0, 8000c6a <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8000c66:	f7ff fef7 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6a:	480b      	ldr	r0, [pc, #44]	@ (8000c98 <MX_USART1_UART_Init+0x5c>)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f002 fbde 	bl	800342e <HAL_UARTEx_SetTxFifoThreshold>
 8000c72:	b108      	cbz	r0, 8000c78 <MX_USART1_UART_Init+0x3c>
  {
    Error_Handler();
 8000c74:	f7ff fef0 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c78:	4807      	ldr	r0, [pc, #28]	@ (8000c98 <MX_USART1_UART_Init+0x5c>)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f002 fbf7 	bl	800346e <HAL_UARTEx_SetRxFifoThreshold>
 8000c80:	b108      	cbz	r0, 8000c86 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000c82:	f7ff fee9 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c86:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <MX_USART1_UART_Init+0x5c>)
 8000c88:	f002 fbb6 	bl	80033f8 <HAL_UARTEx_DisableFifoMode>
 8000c8c:	b118      	cbz	r0, 8000c96 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000c92:	f7ff bee1 	b.w	8000a58 <Error_Handler>
}
 8000c96:	bd08      	pop	{r3, pc}
 8000c98:	20000368 	.word	0x20000368
 8000c9c:	40013800 	.word	0x40013800

08000ca0 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca0:	4816      	ldr	r0, [pc, #88]	@ (8000cfc <MX_USART2_UART_Init+0x5c>)
  huart2.Init.BaudRate = 921600;
 8000ca2:	4a17      	ldr	r2, [pc, #92]	@ (8000d00 <MX_USART2_UART_Init+0x60>)
{
 8000ca4:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 921600;
 8000ca6:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000caa:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cbe:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc2:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc4:	f002 fa99 	bl	80031fa <HAL_UART_Init>
 8000cc8:	b108      	cbz	r0, 8000cce <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8000cca:	f7ff fec5 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cce:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <MX_USART2_UART_Init+0x5c>)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	f002 fbac 	bl	800342e <HAL_UARTEx_SetTxFifoThreshold>
 8000cd6:	b108      	cbz	r0, 8000cdc <MX_USART2_UART_Init+0x3c>
  {
    Error_Handler();
 8000cd8:	f7ff febe 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <MX_USART2_UART_Init+0x5c>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f002 fbc5 	bl	800346e <HAL_UARTEx_SetRxFifoThreshold>
 8000ce4:	b108      	cbz	r0, 8000cea <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000ce6:	f7ff feb7 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cea:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_USART2_UART_Init+0x5c>)
 8000cec:	f002 fb84 	bl	80033f8 <HAL_UARTEx_DisableFifoMode>
 8000cf0:	b118      	cbz	r0, 8000cfa <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000cf6:	f7ff beaf 	b.w	8000a58 <Error_Handler>
}
 8000cfa:	bd08      	pop	{r3, pc}
 8000cfc:	200002d4 	.word	0x200002d4
 8000d00:	40004400 	.word	0x40004400

08000d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	b09a      	sub	sp, #104	@ 0x68
 8000d08:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	2214      	movs	r2, #20
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	a804      	add	r0, sp, #16
 8000d10:	f004 f8d4 	bl	8004ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	2244      	movs	r2, #68	@ 0x44
 8000d16:	2100      	movs	r1, #0
 8000d18:	a809      	add	r0, sp, #36	@ 0x24
 8000d1a:	f004 f8cf 	bl	8004ebc <memset>
  if(uartHandle->Instance==USART1)
 8000d1e:	6833      	ldr	r3, [r6, #0]
 8000d20:	4a39      	ldr	r2, [pc, #228]	@ (8000e08 <HAL_UART_MspInit+0x104>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12b      	bne.n	8000d7e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d26:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d28:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d2a:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	f001 fa80 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	b108      	cbz	r0, 8000d36 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8000d32:	f7ff fe91 	bl	8000a58 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d36:	4b35      	ldr	r3, [pc, #212]	@ (8000e0c <HAL_UART_MspInit+0x108>)
 8000d38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000d3e:	661a      	str	r2, [r3, #96]	@ 0x60
 8000d40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d42:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000d46:	9200      	str	r2, [sp, #0]
 8000d48:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d4c:	f042 0201 	orr.w	r2, r2, #1
 8000d50:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	9301      	str	r3, [sp, #4]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	e9cd 3306 	strd	r3, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d6e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d74:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f000 fd13 	bl	80017a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d7a:	b01a      	add	sp, #104	@ 0x68
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 8000d7e:	4a24      	ldr	r2, [pc, #144]	@ (8000e10 <HAL_UART_MspInit+0x10c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d1fa      	bne.n	8000d7a <HAL_UART_MspInit+0x76>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d84:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d86:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d88:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8a:	f001 fa51 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	b108      	cbz	r0, 8000d94 <HAL_UART_MspInit+0x90>
      Error_Handler();
 8000d90:	f7ff fe62 	bl	8000a58 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d94:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <HAL_UART_MspInit+0x108>)
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000d96:	4c1f      	ldr	r4, [pc, #124]	@ (8000e14 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d9a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000d9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8000da0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000da2:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8000da6:	9202      	str	r2, [sp, #8]
 8000da8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dac:	f042 0201 	orr.w	r2, r2, #1
 8000db0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	9303      	str	r3, [sp, #12]
 8000dba:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc8:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dce:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	e9cd 5506 	strd	r5, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f000 fce4 	bl	80017a0 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000dd8:	490f      	ldr	r1, [pc, #60]	@ (8000e18 <HAL_UART_MspInit+0x114>)
 8000dda:	231b      	movs	r3, #27
 8000ddc:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000de0:	2310      	movs	r3, #16
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de2:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000de6:	2380      	movs	r3, #128	@ 0x80
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de8:	e9c4 3504 	strd	r3, r5, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000dec:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000df2:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000df6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000df8:	f000 fc1a 	bl	8001630 <HAL_DMA_Init>
 8000dfc:	b108      	cbz	r0, 8000e02 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000dfe:	f7ff fe2b 	bl	8000a58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000e02:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8000e04:	62a6      	str	r6, [r4, #40]	@ 0x28
}
 8000e06:	e7b8      	b.n	8000d7a <HAL_UART_MspInit+0x76>
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40004400 	.word	0x40004400
 8000e14:	20000274 	.word	0x20000274
 8000e18:	40020008 	.word	0x40020008

08000e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e1c:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e20:	f7ff ff02 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f004 f83f 	bl	8004ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4e:	f7ff fdd3 	bl	80009f8 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   r0, =_estack
 8000e54:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e60:	08004fdc 	.word	0x08004fdc
  ldr r2, =_sbss
 8000e64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e68:	20001d4c 	.word	0x20001d4c

08000e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_2_IRQHandler>

08000e6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6e:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 fb67 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	200f      	movs	r0, #15
 8000e78:	f7ff fe7e 	bl	8000b78 <HAL_InitTick>
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	b918      	cbnz	r0, 8000e88 <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e80:	f7ff fe58 	bl	8000b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;

}
 8000e84:	4620      	mov	r0, r4
 8000e86:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000e88:	2401      	movs	r4, #1
 8000e8a:	e7fb      	b.n	8000e84 <HAL_Init+0x16>

08000e8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e8c:	4a03      	ldr	r2, [pc, #12]	@ (8000e9c <HAL_IncTick+0x10>)
 8000e8e:	4904      	ldr	r1, [pc, #16]	@ (8000ea0 <HAL_IncTick+0x14>)
 8000e90:	6813      	ldr	r3, [r2, #0]
 8000e92:	6809      	ldr	r1, [r1, #0]
 8000e94:	440b      	add	r3, r1
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200003fc 	.word	0x200003fc
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ea4:	4b01      	ldr	r3, [pc, #4]	@ (8000eac <HAL_GetTick+0x8>)
 8000ea6:	6818      	ldr	r0, [r3, #0]
}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200003fc 	.word	0x200003fc

08000eb0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000eb0:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000eb2:	0dcc      	lsrs	r4, r1, #23
 8000eb4:	f004 0404 	and.w	r4, r4, #4
 8000eb8:	3014      	adds	r0, #20
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000eba:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000ebe:	5903      	ldr	r3, [r0, r4]
 8000ec0:	2507      	movs	r5, #7
 8000ec2:	408d      	lsls	r5, r1
 8000ec4:	ea23 0305 	bic.w	r3, r3, r5
 8000ec8:	408a      	lsls	r2, r1
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ece:	bd30      	pop	{r4, r5, pc}

08000ed0 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ed0:	6880      	ldr	r0, [r0, #8]
}
 8000ed2:	f000 0001 	and.w	r0, r0, #1
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ed8:	6880      	ldr	r0, [r0, #8]
}
 8000eda:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000ede:	4770      	bx	lr

08000ee0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	f000 80db 	beq.w	80010a4 <HAL_ADC_Init+0x1c4>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eee:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8000ef0:	b925      	cbnz	r5, 8000efc <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ef2:	f7ff fb75 	bl	80005e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef6:	6625      	str	r5, [r4, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ef8:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000efc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	0095      	lsls	r5, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f02:	bf41      	itttt	mi
 8000f04:	689a      	ldrmi	r2, [r3, #8]
 8000f06:	f022 4220 	bicmi.w	r2, r2, #2684354560	@ 0xa0000000
 8000f0a:	f022 023f 	bicmi.w	r2, r2, #63	@ 0x3f
 8000f0e:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	00d0      	lsls	r0, r2, #3
 8000f14:	f140 809e 	bpl.w	8001054 <HAL_ADC_Init+0x174>
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	00d1      	lsls	r1, r2, #3
 8000f1c:	f100 80b1 	bmi.w	8001082 <HAL_ADC_Init+0x1a2>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f20:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000f22:	f042 0210 	orr.w	r2, r2, #16
 8000f26:	65e2      	str	r2, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f28:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8000f2a:	f042 0201 	orr.w	r2, r2, #1
 8000f2e:	6622      	str	r2, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000f30:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffd0 	bl	8000ed8 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f38:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000f3a:	f002 0210 	and.w	r2, r2, #16
 8000f3e:	4302      	orrs	r2, r0
 8000f40:	f040 80ac 	bne.w	800109c <HAL_ADC_Init+0x1bc>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f44:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000f46:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8000f4a:	f042 0202 	orr.w	r2, r2, #2
 8000f4e:	65e2      	str	r2, [r4, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ffbd 	bl	8000ed0 <LL_ADC_IsEnabled>
 8000f56:	b980      	cbnz	r0, 8000f7a <HAL_ADC_Init+0x9a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8000f5c:	f7ff ffb8 	bl	8000ed0 <LL_ADC_IsEnabled>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4851      	ldr	r0, [pc, #324]	@ (80010a8 <HAL_ADC_Init+0x1c8>)
 8000f64:	f7ff ffb4 	bl	8000ed0 <LL_ADC_IsEnabled>
 8000f68:	4302      	orrs	r2, r0
 8000f6a:	d106      	bne.n	8000f7a <HAL_ADC_Init+0x9a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f6c:	484f      	ldr	r0, [pc, #316]	@ (80010ac <HAL_ADC_Init+0x1cc>)
 8000f6e:	6865      	ldr	r5, [r4, #4]
 8000f70:	6882      	ldr	r2, [r0, #8]
 8000f72:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8000f76:	432a      	orrs	r2, r5
 8000f78:	6082      	str	r2, [r0, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8000f7a:	68e5      	ldr	r5, [r4, #12]
 8000f7c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f7e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8000f82:	432a      	orrs	r2, r5
 8000f84:	68a5      	ldr	r5, [r4, #8]
 8000f86:	432a      	orrs	r2, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f88:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f8a:	2801      	cmp	r0, #1
                 hadc->Init.DataAlign                                                   |
 8000f8c:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f90:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f94:	bf02      	ittt	eq
 8000f96:	6aa0      	ldreq	r0, [r4, #40]	@ 0x28
 8000f98:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8000f9c:	ea42 4240 	orreq.w	r2, r2, r0, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fa0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000fa2:	b120      	cbz	r0, 8000fae <HAL_ADC_Init+0xce>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8000fa4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fa6:	f400 7078 	and.w	r0, r0, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8000faa:	4328      	orrs	r0, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fac:	4302      	orrs	r2, r0
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000fae:	68dd      	ldr	r5, [r3, #12]
 8000fb0:	483f      	ldr	r0, [pc, #252]	@ (80010b0 <HAL_ADC_Init+0x1d0>)
 8000fb2:	4028      	ands	r0, r5
 8000fb4:	4310      	orrs	r0, r2
 8000fb6:	60d8      	str	r0, [r3, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8000fbc:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8000fc0:	4302      	orrs	r2, r0
 8000fc2:	611a      	str	r2, [r3, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	0712      	lsls	r2, r2, #28
 8000fc8:	d42c      	bmi.n	8001024 <HAL_ADC_Init+0x144>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fca:	68d8      	ldr	r0, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fcc:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fd0:	7f25      	ldrb	r5, [r4, #28]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000fd2:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fd4:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000fd8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fdc:	f020 0002 	bic.w	r0, r0, #2
 8000fe0:	4302      	orrs	r2, r0

      if (hadc->Init.GainCompensation != 0UL)
 8000fe2:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000fe4:	60da      	str	r2, [r3, #12]
      if (hadc->Init.GainCompensation != 0UL)
 8000fe6:	4833      	ldr	r0, [pc, #204]	@ (80010b4 <HAL_ADC_Init+0x1d4>)
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fe8:	691a      	ldr	r2, [r3, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8000fea:	2d00      	cmp	r5, #0
 8000fec:	d04b      	beq.n	8001086 <HAL_ADC_Init+0x1a6>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ff2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000ff4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000ff8:	4002      	ands	r2, r0
 8000ffa:	432a      	orrs	r2, r5
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000ffc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001000:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 8001004:	2a01      	cmp	r2, #1
 8001006:	d145      	bne.n	8001094 <HAL_ADC_Init+0x1b4>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001008:	e9d4 2511 	ldrd	r2, r5, [r4, #68]	@ 0x44
 800100c:	6918      	ldr	r0, [r3, #16]
 800100e:	432a      	orrs	r2, r5
 8001010:	f36f 008a 	bfc	r0, #2, #9
 8001014:	4302      	orrs	r2, r0
 8001016:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8001018:	4302      	orrs	r2, r0
 800101a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800101c:	4302      	orrs	r2, r0
 800101e:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001022:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001024:	6962      	ldr	r2, [r4, #20]
 8001026:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001028:	bf05      	ittet	eq
 800102a:	6b18      	ldreq	r0, [r3, #48]	@ 0x30
 800102c:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800102e:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001030:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001034:	bf06      	itte	eq
 8001036:	f020 000f 	biceq.w	r0, r0, #15
 800103a:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800103c:	f022 020f 	bicne.w	r2, r2, #15
 8001040:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001042:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001044:	f023 0303 	bic.w	r3, r3, #3
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800104e:	4608      	mov	r0, r1
 8001050:	b003      	add	sp, #12
 8001052:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001054:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001056:	4918      	ldr	r1, [pc, #96]	@ (80010b8 <HAL_ADC_Init+0x1d8>)
 8001058:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 800105c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001060:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <HAL_ADC_Init+0x1dc>)
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	fbb2 f2f1 	udiv	r2, r2, r1
 800106e:	3201      	adds	r2, #1
 8001070:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 8001072:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	2a00      	cmp	r2, #0
 8001078:	f43f af4e 	beq.w	8000f18 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 800107c:	9a01      	ldr	r2, [sp, #4]
 800107e:	3a01      	subs	r2, #1
 8001080:	e7f7      	b.n	8001072 <HAL_ADC_Init+0x192>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001082:	2100      	movs	r1, #0
 8001084:	e755      	b.n	8000f32 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001086:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800108a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800108c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001090:	4002      	ands	r2, r0
 8001092:	e7b3      	b.n	8000ffc <HAL_ADC_Init+0x11c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	e7c2      	b.n	8001022 <HAL_ADC_Init+0x142>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80010a4:	2101      	movs	r1, #1
 80010a6:	e7d2      	b.n	800104e <HAL_ADC_Init+0x16e>
 80010a8:	50000100 	.word	0x50000100
 80010ac:	50000300 	.word	0x50000300
 80010b0:	fff04007 	.word	0xfff04007
 80010b4:	ffffc000 	.word	0xffffc000
 80010b8:	00030d40 	.word	0x00030d40
 80010bc:	20000000 	.word	0x20000000

080010c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80010c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010c6:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 80010ca:	2b01      	cmp	r3, #1
{
 80010cc:	4605      	mov	r5, r0
 80010ce:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 80010d0:	f000 81ad 	beq.w	800142e <HAL_ADC_ConfigChannel+0x36e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010d4:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 80010d6:	2301      	movs	r3, #1
 80010d8:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010dc:	4620      	mov	r0, r4
 80010de:	f7ff fefb 	bl	8000ed8 <LL_ADC_REG_IsConversionOngoing>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	f040 819d 	bne.w	8001422 <HAL_ADC_ConfigChannel+0x362>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80010e8:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(*preg,
 80010ea:	6833      	ldr	r3, [r6, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010ec:	0991      	lsrs	r1, r2, #6
 80010ee:	f001 010c 	and.w	r1, r1, #12
 80010f2:	f104 0730 	add.w	r7, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 80010f6:	f002 021f 	and.w	r2, r2, #31
 80010fa:	5878      	ldr	r0, [r7, r1]
 80010fc:	f04f 0c1f 	mov.w	ip, #31
 8001100:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001104:	4093      	lsls	r3, r2
 8001106:	fa0c f202 	lsl.w	r2, ip, r2
 800110a:	ea20 0202 	bic.w	r2, r0, r2
 800110e:	4313      	orrs	r3, r2
 8001110:	507b      	str	r3, [r7, r1]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fee0 	bl	8000ed8 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001118:	68a2      	ldr	r2, [r4, #8]
 800111a:	f002 0208 	and.w	r2, r2, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800111e:	4302      	orrs	r2, r0
 8001120:	d13b      	bne.n	800119a <HAL_ADC_ConfigChannel+0xda>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001122:	68b3      	ldr	r3, [r6, #8]
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001124:	6831      	ldr	r1, [r6, #0]
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800112a:	d174      	bne.n	8001216 <HAL_ADC_ConfigChannel+0x156>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800112c:	4620      	mov	r0, r4
 800112e:	f7ff febf 	bl	8000eb0 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001132:	6963      	ldr	r3, [r4, #20]
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001138:	6163      	str	r3, [r4, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800113a:	6937      	ldr	r7, [r6, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800113c:	6971      	ldr	r1, [r6, #20]
 800113e:	68e0      	ldr	r0, [r4, #12]
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001140:	6832      	ldr	r2, [r6, #0]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001142:	2f04      	cmp	r7, #4
 8001144:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8001148:	d06d      	beq.n	8001226 <HAL_ADC_ConfigChannel+0x166>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800114a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800114e:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8001150:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 8001154:	4081      	lsls	r1, r0
 8001156:	48b7      	ldr	r0, [pc, #732]	@ (8001434 <HAL_ADC_ConfigChannel+0x374>)
 8001158:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800115c:	ea0c 0000 	and.w	r0, ip, r0
 8001160:	4310      	orrs	r0, r2
 8001162:	ea41 0200 	orr.w	r2, r1, r0
 8001166:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800116a:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800116e:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(*preg,
 8001170:	69b0      	ldr	r0, [r6, #24]
 8001172:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001176:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800117a:	4302      	orrs	r2, r0
 800117c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001180:	7f31      	ldrb	r1, [r6, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001182:	6930      	ldr	r0, [r6, #16]
 8001184:	1e4f      	subs	r7, r1, #1
  MODIFY_REG(*preg,
 8001186:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800118a:	4279      	negs	r1, r7
 800118c:	4179      	adcs	r1, r7
 800118e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8001192:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001196:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800119a:	4620      	mov	r0, r4
 800119c:	f7ff fe98 	bl	8000ed0 <LL_ADC_IsEnabled>
 80011a0:	bb70      	cbnz	r0, 8001200 <HAL_ADC_ConfigChannel+0x140>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80011a2:	68f7      	ldr	r7, [r6, #12]
 80011a4:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80011a6:	4aa4      	ldr	r2, [pc, #656]	@ (8001438 <HAL_ADC_ConfigChannel+0x378>)
 80011a8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80011ac:	f007 0c18 	and.w	ip, r7, #24
 80011b0:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80011b4:	fa22 f20c 	lsr.w	r2, r2, ip
 80011b8:	401a      	ands	r2, r3
 80011ba:	ea21 0100 	bic.w	r1, r1, r0
 80011be:	430a      	orrs	r2, r1
 80011c0:	f8c4 20b0 	str.w	r2, [r4, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80011c4:	4a9d      	ldr	r2, [pc, #628]	@ (800143c <HAL_ADC_ConfigChannel+0x37c>)
 80011c6:	4297      	cmp	r7, r2
 80011c8:	d11a      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80011ca:	2800      	cmp	r0, #0
 80011cc:	f040 808a 	bne.w	80012e4 <HAL_ADC_ConfigChannel+0x224>
 80011d0:	0e9a      	lsrs	r2, r3, #26
 80011d2:	3201      	adds	r2, #1
 80011d4:	f002 011f 	and.w	r1, r2, #31
 80011d8:	2001      	movs	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011da:	2909      	cmp	r1, #9
 80011dc:	ea4f 6282 	mov.w	r2, r2, lsl #26
 80011e0:	fa01 f300 	lsl.w	r3, r1, r0
 80011e4:	f200 80a4 	bhi.w	8001330 <HAL_ADC_ConfigChannel+0x270>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80011e8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80011ec:	4088      	lsls	r0, r1
 80011ee:	4302      	orrs	r2, r0
 80011f0:	440b      	add	r3, r1
 80011f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011f4:	ea43 0102 	orr.w	r1, r3, r2
 80011f8:	4620      	mov	r0, r4
 80011fa:	68b2      	ldr	r2, [r6, #8]
 80011fc:	f7ff fe58 	bl	8000eb0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001200:	6833      	ldr	r3, [r6, #0]
 8001202:	4a8f      	ldr	r2, [pc, #572]	@ (8001440 <HAL_ADC_ConfigChannel+0x380>)
 8001204:	4213      	tst	r3, r2
 8001206:	f040 80bf 	bne.w	8001388 <HAL_ADC_ConfigChannel+0x2c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800120a:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800120c:	2300      	movs	r3, #0
 800120e:	f885 3058 	strb.w	r3, [r5, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8001212:	b003      	add	sp, #12
 8001214:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001216:	461a      	mov	r2, r3
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fe49 	bl	8000eb0 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800121e:	6963      	ldr	r3, [r4, #20]
 8001220:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001224:	e788      	b.n	8001138 <HAL_ADC_ConfigChannel+0x78>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001226:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001228:	6e21      	ldr	r1, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800122a:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800122e:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001232:	2800      	cmp	r0, #0
 8001234:	d139      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x1ea>
 8001236:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800123a:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 800123c:	bf02      	ittt	eq
 800123e:	6e22      	ldreq	r2, [r4, #96]	@ 0x60
 8001240:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8001244:	6622      	streq	r2, [r4, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001246:	6e62      	ldr	r2, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001248:	6832      	ldr	r2, [r6, #0]
 800124a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800124c:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001250:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001254:	2800      	cmp	r0, #0
 8001256:	d12f      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x1f8>
 8001258:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800125c:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 800125e:	bf02      	ittt	eq
 8001260:	6e62      	ldreq	r2, [r4, #100]	@ 0x64
 8001262:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8001266:	6662      	streq	r2, [r4, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001268:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800126a:	6832      	ldr	r2, [r6, #0]
 800126c:	6899      	ldr	r1, [r3, #8]
 800126e:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001272:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001276:	bb30      	cbnz	r0, 80012c6 <HAL_ADC_ConfigChannel+0x206>
 8001278:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800127c:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 800127e:	bf02      	ittt	eq
 8001280:	689a      	ldreq	r2, [r3, #8]
 8001282:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8001286:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001288:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800128a:	6832      	ldr	r2, [r6, #0]
 800128c:	68d9      	ldr	r1, [r3, #12]
 800128e:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001292:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001296:	b9e8      	cbnz	r0, 80012d4 <HAL_ADC_ConfigChannel+0x214>
 8001298:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800129c:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 800129e:	bf02      	ittt	eq
 80012a0:	68da      	ldreq	r2, [r3, #12]
 80012a2:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80012a6:	60da      	streq	r2, [r3, #12]
}
 80012a8:	e777      	b.n	800119a <HAL_ADC_ConfigChannel+0xda>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d0c9      	beq.n	8001246 <HAL_ADC_ConfigChannel+0x186>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80012b2:	fab2 f282 	clz	r2, r2
 80012b6:	e7c0      	b.n	800123a <HAL_ADC_ConfigChannel+0x17a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80012bc:	2a00      	cmp	r2, #0
 80012be:	d0d3      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 80012c0:	fab2 f282 	clz	r2, r2
 80012c4:	e7ca      	b.n	800125c <HAL_ADC_ConfigChannel+0x19c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	d0dc      	beq.n	8001288 <HAL_ADC_ConfigChannel+0x1c8>
  return __builtin_clz(value);
 80012ce:	fab2 f282 	clz	r2, r2
 80012d2:	e7d3      	b.n	800127c <HAL_ADC_ConfigChannel+0x1bc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80012d8:	2a00      	cmp	r2, #0
 80012da:	f43f af5e 	beq.w	800119a <HAL_ADC_ConfigChannel+0xda>
  return __builtin_clz(value);
 80012de:	fab2 f282 	clz	r2, r2
 80012e2:	e7db      	b.n	800129c <HAL_ADC_ConfigChannel+0x1dc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80012e8:	b132      	cbz	r2, 80012f8 <HAL_ADC_ConfigChannel+0x238>
  return __builtin_clz(value);
 80012ea:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012ee:	3201      	adds	r2, #1
 80012f0:	f002 021f 	and.w	r2, r2, #31
 80012f4:	2a09      	cmp	r2, #9
 80012f6:	d825      	bhi.n	8001344 <HAL_ADC_ConfigChannel+0x284>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f8:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 80012fc:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001300:	3101      	adds	r1, #1
 8001302:	0689      	lsls	r1, r1, #26
 8001304:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	fa93 f0a3 	rbit	r0, r3
  return __builtin_clz(value);
 800130c:	fab0 f080 	clz	r0, r0
 8001310:	3001      	adds	r0, #1
 8001312:	f000 001f 	and.w	r0, r0, #31
 8001316:	2201      	movs	r2, #1
 8001318:	4082      	lsls	r2, r0
 800131a:	430a      	orrs	r2, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001320:	fab3 f383 	clz	r3, r3
 8001324:	3301      	adds	r3, #1
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800132e:	e760      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x132>
 8001330:	4088      	lsls	r0, r1
 8001332:	4419      	add	r1, r3
 8001334:	391e      	subs	r1, #30
 8001336:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800133a:	0509      	lsls	r1, r1, #20
 800133c:	4302      	orrs	r2, r0
 800133e:	f041 7300 	orr.w	r3, r1, #33554432	@ 0x2000000
 8001342:	e757      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x134>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8001348:	fab1 f181 	clz	r1, r1
 800134c:	3101      	adds	r1, #1
 800134e:	0689      	lsls	r1, r1, #26
 8001350:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	fa93 f0a3 	rbit	r0, r3
  return __builtin_clz(value);
 8001358:	fab0 f080 	clz	r0, r0
 800135c:	3001      	adds	r0, #1
 800135e:	f000 001f 	and.w	r0, r0, #31
 8001362:	2201      	movs	r2, #1
 8001364:	4082      	lsls	r2, r0
 8001366:	430a      	orrs	r2, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 800136c:	fab1 f181 	clz	r1, r1
 8001370:	3101      	adds	r1, #1
 8001372:	f001 011f 	and.w	r1, r1, #31
 8001376:	2303      	movs	r3, #3
 8001378:	f06f 001d 	mvn.w	r0, #29
 800137c:	fb13 0301 	smlabb	r3, r3, r1, r0
 8001380:	051b      	lsls	r3, r3, #20
 8001382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001386:	e735      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x134>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001388:	4a2e      	ldr	r2, [pc, #184]	@ (8001444 <HAL_ADC_ConfigChannel+0x384>)
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800138a:	4e2f      	ldr	r6, [pc, #188]	@ (8001448 <HAL_ADC_ConfigChannel+0x388>)
 800138c:	6891      	ldr	r1, [r2, #8]
 800138e:	42b3      	cmp	r3, r6
 8001390:	f001 70e0 	and.w	r0, r1, #29360128	@ 0x1c00000
 8001394:	d002      	beq.n	800139c <HAL_ADC_ConfigChannel+0x2dc>
 8001396:	4e2d      	ldr	r6, [pc, #180]	@ (800144c <HAL_ADC_ConfigChannel+0x38c>)
 8001398:	42b3      	cmp	r3, r6
 800139a:	d11e      	bne.n	80013da <HAL_ADC_ConfigChannel+0x31a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800139c:	020e      	lsls	r6, r1, #8
 800139e:	f53f af34 	bmi.w	800120a <HAL_ADC_ConfigChannel+0x14a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80013a2:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 80013a6:	f47f af30 	bne.w	800120a <HAL_ADC_ConfigChannel+0x14a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013aa:	4a26      	ldr	r2, [pc, #152]	@ (8001444 <HAL_ADC_ConfigChannel+0x384>)
 80013ac:	6893      	ldr	r3, [r2, #8]
 80013ae:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80013b2:	4303      	orrs	r3, r0
 80013b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013b8:	6093      	str	r3, [r2, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013ba:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <HAL_ADC_ConfigChannel+0x390>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <HAL_ADC_ConfigChannel+0x394>)
 80013c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80013c4:	230c      	movs	r3, #12
 80013c6:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 80013ca:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80013cc:	9b01      	ldr	r3, [sp, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f43f af1b 	beq.w	800120a <HAL_ADC_ConfigChannel+0x14a>
            wait_loop_index--;
 80013d4:	9b01      	ldr	r3, [sp, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	e7f7      	b.n	80013ca <HAL_ADC_ConfigChannel+0x30a>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80013da:	4e1f      	ldr	r6, [pc, #124]	@ (8001458 <HAL_ADC_ConfigChannel+0x398>)
 80013dc:	42b3      	cmp	r3, r6
 80013de:	d10e      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x33e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80013e0:	01c9      	lsls	r1, r1, #7
 80013e2:	f53f af12 	bmi.w	800120a <HAL_ADC_ConfigChannel+0x14a>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <HAL_ADC_ConfigChannel+0x39c>)
 80013e8:	429c      	cmp	r4, r3
 80013ea:	f43f af0e 	beq.w	800120a <HAL_ADC_ConfigChannel+0x14a>
 80013ee:	6893      	ldr	r3, [r2, #8]
 80013f0:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80013f4:	4303      	orrs	r3, r0
 80013f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013fa:	6093      	str	r3, [r2, #8]
}
 80013fc:	e705      	b.n	800120a <HAL_ADC_ConfigChannel+0x14a>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80013fe:	4e18      	ldr	r6, [pc, #96]	@ (8001460 <HAL_ADC_ConfigChannel+0x3a0>)
 8001400:	42b3      	cmp	r3, r6
 8001402:	f47f af02 	bne.w	800120a <HAL_ADC_ConfigChannel+0x14a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001406:	024b      	lsls	r3, r1, #9
 8001408:	f53f aeff 	bmi.w	800120a <HAL_ADC_ConfigChannel+0x14a>
        if (ADC_VREFINT_INSTANCE(hadc))
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_ADC_ConfigChannel+0x39c>)
 800140e:	429c      	cmp	r4, r3
 8001410:	f43f aefb 	beq.w	800120a <HAL_ADC_ConfigChannel+0x14a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001414:	6893      	ldr	r3, [r2, #8]
 8001416:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800141a:	4303      	orrs	r3, r0
 800141c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001420:	e7eb      	b.n	80013fa <HAL_ADC_ConfigChannel+0x33a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001422:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001424:	f042 0220 	orr.w	r2, r2, #32
 8001428:	65ea      	str	r2, [r5, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
 800142a:	4618      	mov	r0, r3
 800142c:	e6ee      	b.n	800120c <HAL_ADC_ConfigChannel+0x14c>
  __HAL_LOCK(hadc);
 800142e:	2002      	movs	r0, #2
 8001430:	e6ef      	b.n	8001212 <HAL_ADC_ConfigChannel+0x152>
 8001432:	bf00      	nop
 8001434:	03fff000 	.word	0x03fff000
 8001438:	0007ffff 	.word	0x0007ffff
 800143c:	407f0000 	.word	0x407f0000
 8001440:	80080000 	.word	0x80080000
 8001444:	50000300 	.word	0x50000300
 8001448:	c3210000 	.word	0xc3210000
 800144c:	90c00010 	.word	0x90c00010
 8001450:	20000000 	.word	0x20000000
 8001454:	00030d40 	.word	0x00030d40
 8001458:	c7520000 	.word	0xc7520000
 800145c:	50000100 	.word	0x50000100
 8001460:	cb840000 	.word	0xcb840000

08001464 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001464:	6880      	ldr	r0, [r0, #8]
}
 8001466:	f000 0001 	and.w	r0, r0, #1
 800146a:	4770      	bx	lr

0800146c <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800146c:	6880      	ldr	r0, [r0, #8]
}
 800146e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001472:	4770      	bx	lr

08001474 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001474:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001476:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 800147a:	2a01      	cmp	r2, #1
{
 800147c:	b09c      	sub	sp, #112	@ 0x70
 800147e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001480:	d059      	beq.n	8001536 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8001482:	2201      	movs	r2, #1
 8001484:	f880 2058 	strb.w	r2, [r0, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001488:	681d      	ldr	r5, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800148a:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800148c:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001490:	9018      	str	r0, [sp, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001492:	9019      	str	r0, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001494:	d10e      	bne.n	80014b4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001496:	4829      	ldr	r0, [pc, #164]	@ (800153c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8001498:	f7ff ffe8 	bl	800146c <LL_ADC_REG_IsConversionOngoing>
 800149c:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800149e:	4628      	mov	r0, r5
 80014a0:	f7ff ffe4 	bl	800146c <LL_ADC_REG_IsConversionOngoing>
 80014a4:	4320      	orrs	r0, r4
 80014a6:	d00e      	beq.n	80014c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a8:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80014aa:	f041 0120 	orr.w	r1, r1, #32
 80014ae:	65d9      	str	r1, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80014b0:	4610      	mov	r0, r2
 80014b2:	e028      	b.n	8001506 <HAL_ADCEx_MultiModeConfigChannel+0x92>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b4:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
    __HAL_UNLOCK(hadc);
 80014b6:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ba:	f041 0120 	orr.w	r1, r1, #32
 80014be:	65d9      	str	r1, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80014c0:	4610      	mov	r0, r2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80014c2:	b01c      	add	sp, #112	@ 0x70
 80014c4:	bd70      	pop	{r4, r5, r6, pc}
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80014c6:	680c      	ldr	r4, [r1, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80014ca:	b304      	cbz	r4, 800150e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80014cc:	6890      	ldr	r0, [r2, #8]
 80014ce:	684e      	ldr	r6, [r1, #4]
 80014d0:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80014d4:	4330      	orrs	r0, r6
 80014d6:	f893 6038 	ldrb.w	r6, [r3, #56]	@ 0x38
 80014da:	ea40 3046 	orr.w	r0, r0, r6, lsl #13
 80014de:	6090      	str	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014e0:	4628      	mov	r0, r5
 80014e2:	f7ff ffbf 	bl	8001464 <LL_ADC_IsEnabled>
 80014e6:	4605      	mov	r5, r0
 80014e8:	4814      	ldr	r0, [pc, #80]	@ (800153c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80014ea:	f7ff ffbb 	bl	8001464 <LL_ADC_IsEnabled>
 80014ee:	4305      	orrs	r5, r0
 80014f0:	d108      	bne.n	8001504 <HAL_ADCEx_MultiModeConfigChannel+0x90>
        MODIFY_REG(tmpADC_Common->CCR,
 80014f2:	6889      	ldr	r1, [r1, #8]
 80014f4:	6890      	ldr	r0, [r2, #8]
 80014f6:	430c      	orrs	r4, r1
 80014f8:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 80014fc:	f021 010f 	bic.w	r1, r1, #15
 8001500:	430c      	orrs	r4, r1
 8001502:	6094      	str	r4, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  return tmp_hal_status;
 800150c:	e7d9      	b.n	80014c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800150e:	6891      	ldr	r1, [r2, #8]
 8001510:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8001514:	6091      	str	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001516:	4628      	mov	r0, r5
 8001518:	f7ff ffa4 	bl	8001464 <LL_ADC_IsEnabled>
 800151c:	4601      	mov	r1, r0
 800151e:	4807      	ldr	r0, [pc, #28]	@ (800153c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8001520:	f7ff ffa0 	bl	8001464 <LL_ADC_IsEnabled>
 8001524:	4301      	orrs	r1, r0
 8001526:	d1ed      	bne.n	8001504 <HAL_ADCEx_MultiModeConfigChannel+0x90>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001528:	6891      	ldr	r1, [r2, #8]
 800152a:	f421 6171 	bic.w	r1, r1, #3856	@ 0xf10
 800152e:	f021 010f 	bic.w	r1, r1, #15
 8001532:	6091      	str	r1, [r2, #8]
 8001534:	e7e6      	b.n	8001504 <HAL_ADCEx_MultiModeConfigChannel+0x90>
  __HAL_LOCK(hadc);
 8001536:	2002      	movs	r0, #2
 8001538:	e7c3      	b.n	80014c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800153a:	bf00      	nop
 800153c:	50000100 	.word	0x50000100
 8001540:	50000300 	.word	0x50000300

08001544 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4907      	ldr	r1, [pc, #28]	@ (8001564 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001546:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001548:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800154c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001554:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001560:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156a:	b530      	push	{r4, r5, lr}
 800156c:	68dc      	ldr	r4, [r3, #12]
 800156e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001572:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	2b04      	cmp	r3, #4
 800157a:	bf28      	it	cs
 800157c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001584:	bf8c      	ite	hi
 8001586:	3c03      	subhi	r4, #3
 8001588:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158a:	fa05 f303 	lsl.w	r3, r5, r3
 800158e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001592:	40a5      	lsls	r5, r4
 8001594:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800159a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	bfac      	ite	ge
 80015a2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	4a08      	ldrlt	r2, [pc, #32]	@ (80015c8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	bfb8      	it	lt
 80015ae:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	bfaa      	itet	ge
 80015b6:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015c0:	bd30      	pop	{r4, r5, pc}
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00
 80015c8:	e000ed14 	.word	0xe000ed14

080015cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015cc:	2800      	cmp	r0, #0
 80015ce:	db07      	blt.n	80015e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <HAL_NVIC_EnableIRQ+0x18>)
 80015d2:	0941      	lsrs	r1, r0, #5
 80015d4:	2301      	movs	r3, #1
 80015d6:	f000 001f 	and.w	r0, r0, #31
 80015da:	4083      	lsls	r3, r0
 80015dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015e8:	b510      	push	{r4, lr}
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80015ea:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80015ec:	490c      	ldr	r1, [pc, #48]	@ (8001620 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 80015ee:	4c0d      	ldr	r4, [pc, #52]	@ (8001624 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80015f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80015f2:	42a3      	cmp	r3, r4
 80015f4:	bf98      	it	ls
 80015f6:	460a      	movls	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80015f8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80015fa:	f021 0103 	bic.w	r1, r1, #3
 80015fe:	440a      	add	r2, r1
 8001600:	6482      	str	r2, [r0, #72]	@ 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001602:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001604:	4a09      	ldr	r2, [pc, #36]	@ (800162c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001606:	64c2      	str	r2, [r0, #76]	@ 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001608:	3b08      	subs	r3, #8
 800160a:	2214      	movs	r2, #20
 800160c:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001610:	2201      	movs	r2, #1
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	6503      	str	r3, [r0, #80]	@ 0x50
}
 800161c:	bd10      	pop	{r4, pc}
 800161e:	bf00      	nop
 8001620:	40020800 	.word	0x40020800
 8001624:	40020407 	.word	0x40020407
 8001628:	40020820 	.word	0x40020820
 800162c:	40020880 	.word	0x40020880

08001630 <HAL_DMA_Init>:
{
 8001630:	b538      	push	{r3, r4, r5, lr}
  if (hdma == NULL)
 8001632:	2800      	cmp	r0, #0
 8001634:	d057      	beq.n	80016e6 <HAL_DMA_Init+0xb6>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001636:	6802      	ldr	r2, [r0, #0]
 8001638:	4b2c      	ldr	r3, [pc, #176]	@ (80016ec <HAL_DMA_Init+0xbc>)
 800163a:	429a      	cmp	r2, r3
 800163c:	f04f 0114 	mov.w	r1, #20
 8001640:	d845      	bhi.n	80016ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001642:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <HAL_DMA_Init+0xc0>)
 8001644:	4413      	add	r3, r2
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	492a      	ldr	r1, [pc, #168]	@ (80016f4 <HAL_DMA_Init+0xc4>)
 800164c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800164e:	e9c0 1310 	strd	r1, r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001652:	2302      	movs	r3, #2
 8001654:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8001658:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165c:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800165e:	6811      	ldr	r1, [r2, #0]
  tmp |=  hdma->Init.Direction        |
 8001660:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	432b      	orrs	r3, r5
 8001664:	6945      	ldr	r5, [r0, #20]
 8001666:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001668:	6985      	ldr	r5, [r0, #24]
 800166a:	432b      	orrs	r3, r5
 800166c:	69c5      	ldr	r5, [r0, #28]
 800166e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001670:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001672:	f36f 110e 	bfc	r1, #4, #11
          hdma->Init.Mode                | hdma->Init.Priority;
 8001676:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8001678:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 800167a:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800167c:	f7ff ffb4 	bl	80015e8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001680:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001684:	bf04      	itt	eq
 8001686:	2300      	moveq	r3, #0
 8001688:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800168a:	6843      	ldr	r3, [r0, #4]
 800168c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800168e:	b2da      	uxtb	r2, r3
 8001690:	600a      	str	r2, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001692:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	@ 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001696:	3b01      	subs	r3, #1
 8001698:	2b03      	cmp	r3, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800169a:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800169c:	d81e      	bhi.n	80016dc <HAL_DMA_Init+0xac>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <HAL_DMA_Init+0xc8>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016a0:	4916      	ldr	r1, [pc, #88]	@ (80016fc <HAL_DMA_Init+0xcc>)
 80016a2:	6581      	str	r1, [r0, #88]	@ 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80016a8:	2101      	movs	r1, #1
 80016aa:	3a01      	subs	r2, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016b0:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016b2:	6543      	str	r3, [r0, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80016b4:	65c2      	str	r2, [r0, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016b6:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_DMA_Init+0xd0>)
 80016ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016bc:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80016be:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c0:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80016c2:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80016c6:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
  return HAL_OK;
 80016ca:	4618      	mov	r0, r3
}
 80016cc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_DMA_Init+0xd4>)
 80016d0:	4413      	add	r3, r2
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	490c      	ldr	r1, [pc, #48]	@ (8001708 <HAL_DMA_Init+0xd8>)
 80016d8:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 80016da:	e7b8      	b.n	800164e <HAL_DMA_Init+0x1e>
    hdma->DMAmuxRequestGen = 0U;
 80016dc:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80016de:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016e2:	65c3      	str	r3, [r0, #92]	@ 0x5c
 80016e4:	e7ea      	b.n	80016bc <HAL_DMA_Init+0x8c>
    return HAL_ERROR;
 80016e6:	2001      	movs	r0, #1
 80016e8:	e7f0      	b.n	80016cc <HAL_DMA_Init+0x9c>
 80016ea:	bf00      	nop
 80016ec:	40020407 	.word	0x40020407
 80016f0:	bffdfff8 	.word	0xbffdfff8
 80016f4:	40020000 	.word	0x40020000
 80016f8:	1000823f 	.word	0x1000823f
 80016fc:	40020940 	.word	0x40020940
 8001700:	40020900 	.word	0x40020900
 8001704:	bffdfbf8 	.word	0xbffdfbf8
 8001708:	40020400 	.word	0x40020400

0800170c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800170c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800170e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001710:	6803      	ldr	r3, [r0, #0]
{
 8001712:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001714:	f002 021f 	and.w	r2, r2, #31
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001718:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800171a:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800171c:	2404      	movs	r4, #4
 800171e:	4094      	lsls	r4, r2
 8001720:	4234      	tst	r4, r6
 8001722:	d00e      	beq.n	8001742 <HAL_DMA_IRQHandler+0x36>
 8001724:	f015 0f04 	tst.w	r5, #4
 8001728:	d00b      	beq.n	8001742 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800172e:	bf5e      	ittt	pl
 8001730:	681a      	ldrpl	r2, [r3, #0]
 8001732:	f022 0204 	bicpl.w	r2, r2, #4
 8001736:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001738:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800173a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800173c:	b373      	cbz	r3, 800179c <HAL_DMA_IRQHandler+0x90>
}
 800173e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001740:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001742:	2402      	movs	r4, #2
 8001744:	4094      	lsls	r4, r2
 8001746:	4234      	tst	r4, r6
 8001748:	d012      	beq.n	8001770 <HAL_DMA_IRQHandler+0x64>
           && (0U != (source_it & DMA_IT_TC)))
 800174a:	f015 0f02 	tst.w	r5, #2
 800174e:	d00f      	beq.n	8001770 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	0695      	lsls	r5, r2, #26
 8001754:	d406      	bmi.n	8001764 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	f022 020a 	bic.w	r2, r2, #10
 800175c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800175e:	2301      	movs	r3, #1
 8001760:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8001764:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001766:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001768:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 800176c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800176e:	e7e5      	b.n	800173c <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001770:	2408      	movs	r4, #8
 8001772:	4094      	lsls	r4, r2
 8001774:	4234      	tst	r4, r6
 8001776:	d011      	beq.n	800179c <HAL_DMA_IRQHandler+0x90>
           && (0U != (source_it & DMA_IT_TE)))
 8001778:	072c      	lsls	r4, r5, #28
 800177a:	d50f      	bpl.n	800179c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800177c:	681c      	ldr	r4, [r3, #0]
 800177e:	f024 040e 	bic.w	r4, r4, #14
 8001782:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001784:	2301      	movs	r3, #1
 8001786:	fa03 f202 	lsl.w	r2, r3, r2
 800178a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800178c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800178e:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8001792:	2300      	movs	r3, #0
 8001794:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8001798:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800179a:	e7cf      	b.n	800173c <HAL_DMA_IRQHandler+0x30>
}
 800179c:	bc70      	pop	{r4, r5, r6}
 800179e:	4770      	bx	lr

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a4:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8001930 <HAL_GPIO_Init+0x190>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017a8:	4c5f      	ldr	r4, [pc, #380]	@ (8001928 <HAL_GPIO_Init+0x188>)
  uint32_t position = 0x00U;
 80017aa:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ac:	680a      	ldr	r2, [r1, #0]
 80017ae:	fa32 f503 	lsrs.w	r5, r2, r3
 80017b2:	d102      	bne.n	80017ba <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80017b4:	b003      	add	sp, #12
 80017b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017ba:	2501      	movs	r5, #1
 80017bc:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80017c0:	ea18 0202 	ands.w	r2, r8, r2
 80017c4:	f000 80a4 	beq.w	8001910 <HAL_GPIO_Init+0x170>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ca:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017cc:	f006 0503 	and.w	r5, r6, #3
 80017d0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017d4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017d8:	1e6f      	subs	r7, r5, #1
 80017da:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017dc:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e0:	d834      	bhi.n	800184c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80017e2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017e4:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e8:	68cf      	ldr	r7, [r1, #12]
 80017ea:	fa07 f70e 	lsl.w	r7, r7, lr
 80017ee:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80017f2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80017f4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fa:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80017fe:	409f      	lsls	r7, r3
 8001800:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001804:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001806:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001808:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800180c:	688f      	ldr	r7, [r1, #8]
 800180e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001812:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001816:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001818:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	d119      	bne.n	8001850 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 800181c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001820:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001824:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001828:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800182c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001830:	f04f 0b0f 	mov.w	fp, #15
 8001834:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001838:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800183c:	690f      	ldr	r7, [r1, #16]
 800183e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001842:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8001846:	f8c8 7020 	str.w	r7, [r8, #32]
 800184a:	e001      	b.n	8001850 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184c:	2d03      	cmp	r5, #3
 800184e:	d1da      	bne.n	8001806 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8001850:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001852:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001856:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185a:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800185c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001860:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001862:	d055      	beq.n	8001910 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001864:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 8001868:	f045 0501 	orr.w	r5, r5, #1
 800186c:	f8c9 5060 	str.w	r5, [r9, #96]	@ 0x60
 8001870:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 8001874:	f023 0703 	bic.w	r7, r3, #3
 8001878:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800187c:	f005 0501 	and.w	r5, r5, #1
 8001880:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8001884:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001886:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800188c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800188e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001892:	f04f 0e0f 	mov.w	lr, #15
 8001896:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800189a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800189e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018a2:	d037      	beq.n	8001914 <HAL_GPIO_Init+0x174>
 80018a4:	4d21      	ldr	r5, [pc, #132]	@ (800192c <HAL_GPIO_Init+0x18c>)
 80018a6:	42a8      	cmp	r0, r5
 80018a8:	d036      	beq.n	8001918 <HAL_GPIO_Init+0x178>
 80018aa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80018ae:	42a8      	cmp	r0, r5
 80018b0:	d034      	beq.n	800191c <HAL_GPIO_Init+0x17c>
 80018b2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80018b6:	42a8      	cmp	r0, r5
 80018b8:	d032      	beq.n	8001920 <HAL_GPIO_Init+0x180>
 80018ba:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80018be:	42a8      	cmp	r0, r5
 80018c0:	d030      	beq.n	8001924 <HAL_GPIO_Init+0x184>
 80018c2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80018c6:	42a8      	cmp	r0, r5
 80018c8:	bf14      	ite	ne
 80018ca:	2506      	movne	r5, #6
 80018cc:	2505      	moveq	r5, #5
 80018ce:	fa05 f50c 	lsl.w	r5, r5, ip
 80018d2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 80018d8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80018da:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018dc:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80018e0:	bf0c      	ite	eq
 80018e2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80018e4:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 80018e6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80018e8:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ea:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80018ee:	bf0c      	ite	eq
 80018f0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80018f2:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 80018f4:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 80018f6:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 80018fc:	bf0c      	ite	eq
 80018fe:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001900:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8001902:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8001904:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001906:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8001908:	bf54      	ite	pl
 800190a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800190c:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 800190e:	6025      	str	r5, [r4, #0]
    position++;
 8001910:	3301      	adds	r3, #1
 8001912:	e74b      	b.n	80017ac <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001914:	2500      	movs	r5, #0
 8001916:	e7da      	b.n	80018ce <HAL_GPIO_Init+0x12e>
 8001918:	2501      	movs	r5, #1
 800191a:	e7d8      	b.n	80018ce <HAL_GPIO_Init+0x12e>
 800191c:	2502      	movs	r5, #2
 800191e:	e7d6      	b.n	80018ce <HAL_GPIO_Init+0x12e>
 8001920:	2503      	movs	r5, #3
 8001922:	e7d4      	b.n	80018ce <HAL_GPIO_Init+0x12e>
 8001924:	2504      	movs	r5, #4
 8001926:	e7d2      	b.n	80018ce <HAL_GPIO_Init+0x12e>
 8001928:	40010400 	.word	0x40010400
 800192c:	48000400 	.word	0x48000400
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001934:	b10a      	cbz	r2, 800193a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001936:	6181      	str	r1, [r0, #24]
 8001938:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800193a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800193c:	4770      	bx	lr

0800193e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800193e:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001940:	4604      	mov	r4, r0
 8001942:	2800      	cmp	r0, #0
 8001944:	d04e      	beq.n	80019e4 <HAL_I2C_Init+0xa6>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001946:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800194a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800194e:	b91b      	cbnz	r3, 8001958 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001950:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001954:	f7fe ff84 	bl	8000860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001958:	2324      	movs	r3, #36	@ 0x24
 800195a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001968:	6862      	ldr	r2, [r4, #4]
 800196a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800196e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001976:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001978:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800197c:	2901      	cmp	r1, #1
 800197e:	d106      	bne.n	800198e <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001980:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001984:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198c:	e007      	b.n	800199e <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800198e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001992:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001994:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001996:	d1f6      	bne.n	8001986 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800199e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80019a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80019b8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ba:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d2:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d6:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019d8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019dc:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019de:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42

  return HAL_OK;
}
 80019e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
 80019e6:	e7fc      	b.n	80019e2 <HAL_I2C_Init+0xa4>

080019e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019e8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ea:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80019ee:	2a20      	cmp	r2, #32
{
 80019f0:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f2:	b2d4      	uxtb	r4, r2
 80019f4:	d11c      	bne.n	8001a30 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f6:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80019fa:	2a01      	cmp	r2, #1
 80019fc:	d018      	beq.n	8001a30 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019fe:	2224      	movs	r2, #36	@ 0x24
 8001a00:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a04:	6802      	ldr	r2, [r0, #0]
 8001a06:	6810      	ldr	r0, [r2, #0]
 8001a08:	f020 0001 	bic.w	r0, r0, #1
 8001a0c:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a0e:	6810      	ldr	r0, [r2, #0]
 8001a10:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8001a14:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a16:	6810      	ldr	r0, [r2, #0]
 8001a18:	4301      	orrs	r1, r0
 8001a1a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a1c:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1e:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 8001a20:	f041 0101 	orr.w	r1, r1, #1
 8001a24:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8001a2a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001a2e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8001a30:	2002      	movs	r0, #2
 8001a32:	e7fc      	b.n	8001a2e <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001a34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a34:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a36:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001a3a:	2a20      	cmp	r2, #32
{
 8001a3c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3e:	b2d4      	uxtb	r4, r2
 8001a40:	d11b      	bne.n	8001a7a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a42:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001a46:	2a01      	cmp	r2, #1
 8001a48:	d017      	beq.n	8001a7a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4a:	2224      	movs	r2, #36	@ 0x24
 8001a4c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a50:	6802      	ldr	r2, [r0, #0]
 8001a52:	6810      	ldr	r0, [r2, #0]
 8001a54:	f020 0001 	bic.w	r0, r0, #1
 8001a58:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a5a:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a5c:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a60:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a64:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a66:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a68:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 8001a6a:	f041 0101 	orr.w	r1, r1, #1
 8001a6e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8001a74:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001a78:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	e7fc      	b.n	8001a78 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08001a80 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a80:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a82:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a84:	bb18      	cbnz	r0, 8001ace <HAL_PWREx_ControlVoltageScaling+0x4e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a86:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 8001a8a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001a92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a9a:	d140      	bne.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8001aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	2132      	movs	r1, #50	@ 0x32
 8001aae:	434a      	muls	r2, r1
 8001ab0:	491e      	ldr	r1, [pc, #120]	@ (8001b2c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001ab2:	fbb2 f2f1 	udiv	r2, r2, r1
 8001ab6:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab8:	6959      	ldr	r1, [r3, #20]
 8001aba:	0549      	lsls	r1, r1, #21
 8001abc:	d500      	bpl.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001abe:	b922      	cbnz	r2, 8001aca <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	0558      	lsls	r0, r3, #21
 8001ac4:	d52b      	bpl.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x9e>
      {
        return HAL_TIMEOUT;
 8001ac6:	2003      	movs	r0, #3
 8001ac8:	4770      	bx	lr
        wait_loop_index--;
 8001aca:	3a01      	subs	r2, #1
 8001acc:	e7f4      	b.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x38>
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ace:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001ad2:	d11f      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x94>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ad4:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 8001ad8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001adc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001ae0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ae8:	d119      	bne.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8001af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001af4:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af6:	4a0c      	ldr	r2, [pc, #48]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	2132      	movs	r1, #50	@ 0x32
 8001afc:	434a      	muls	r2, r1
 8001afe:	490b      	ldr	r1, [pc, #44]	@ (8001b2c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001b00:	fbb2 f2f1 	udiv	r2, r2, r1
 8001b04:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b06:	6959      	ldr	r1, [r3, #20]
 8001b08:	0549      	lsls	r1, r1, #21
 8001b0a:	d5d9      	bpl.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x40>
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d0d7      	beq.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
 8001b10:	3a01      	subs	r2, #1
 8001b12:	e7f8      	b.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x86>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b14:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8001b18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b1c:	601a      	str	r2, [r3, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b1e:	2000      	movs	r0, #0
}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40007000 	.word	0x40007000
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	000f4240 	.word	0x000f4240

08001b30 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b30:	4a02      	ldr	r2, [pc, #8]	@ (8001b3c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8001b32:	6893      	ldr	r3, [r2, #8]
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b38:	6093      	str	r3, [r2, #8]
}
 8001b3a:	4770      	bx	lr
 8001b3c:	40007000 	.word	0x40007000

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	4604      	mov	r4, r0
 8001b46:	b918      	cbnz	r0, 8001b50 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
    }
  }
  }

  return HAL_OK;
}
 8001b4a:	b002      	add	sp, #8
 8001b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b50:	6803      	ldr	r3, [r0, #0]
 8001b52:	07d9      	lsls	r1, r3, #31
 8001b54:	d414      	bmi.n	8001b80 <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	079a      	lsls	r2, r3, #30
 8001b5a:	d458      	bmi.n	8001c0e <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	0719      	lsls	r1, r3, #28
 8001b60:	f100 80a1 	bmi.w	8001ca6 <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	075a      	lsls	r2, r3, #29
 8001b68:	f100 80c8 	bmi.w	8001cfc <HAL_RCC_OscConfig+0x1bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	069a      	lsls	r2, r3, #26
 8001b70:	f100 812f 	bmi.w	8001dd2 <HAL_RCC_OscConfig+0x292>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b74:	69e3      	ldr	r3, [r4, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 815c 	bne.w	8001e34 <HAL_RCC_OscConfig+0x2f4>
  return HAL_OK;
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e7e4      	b.n	8001b4a <HAL_RCC_OscConfig+0xa>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b80:	4d9f      	ldr	r5, [pc, #636]	@ (8001e00 <HAL_RCC_OscConfig+0x2c0>)
 8001b82:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b84:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b86:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d10a      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x64>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8e:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d108      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x68>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b96:	682b      	ldr	r3, [r5, #0]
 8001b98:	039b      	lsls	r3, r3, #14
 8001b9a:	d5dc      	bpl.n	8001b56 <HAL_RCC_OscConfig+0x16>
 8001b9c:	6863      	ldr	r3, [r4, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1d9      	bne.n	8001b56 <HAL_RCC_OscConfig+0x16>
 8001ba2:	e7d1      	b.n	8001b48 <HAL_RCC_OscConfig+0x8>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	e7f5      	b.n	8001b94 <HAL_RCC_OscConfig+0x54>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba8:	6863      	ldr	r3, [r4, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bae:	d110      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x92>
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f974 	bl	8000ea4 <HAL_GetTick>
 8001bbc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bbe:	682b      	ldr	r3, [r5, #0]
 8001bc0:	039f      	lsls	r7, r3, #14
 8001bc2:	d4c8      	bmi.n	8001b56 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f96e 	bl	8000ea4 <HAL_GetTick>
 8001bc8:	1b80      	subs	r0, r0, r6
 8001bca:	2864      	cmp	r0, #100	@ 0x64
 8001bcc:	d9f7      	bls.n	8001bbe <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001bce:	2003      	movs	r0, #3
 8001bd0:	e7bb      	b.n	8001b4a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd6:	d104      	bne.n	8001be2 <HAL_RCC_OscConfig+0xa2>
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bde:	602b      	str	r3, [r5, #0]
 8001be0:	e7e6      	b.n	8001bb0 <HAL_RCC_OscConfig+0x70>
 8001be2:	682a      	ldr	r2, [r5, #0]
 8001be4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001be8:	602a      	str	r2, [r5, #0]
 8001bea:	682a      	ldr	r2, [r5, #0]
 8001bec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bf0:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x78>
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f955 	bl	8000ea4 <HAL_GetTick>
 8001bfa:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	0399      	lsls	r1, r3, #14
 8001c00:	d5a9      	bpl.n	8001b56 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c02:	f7ff f94f 	bl	8000ea4 <HAL_GetTick>
 8001c06:	1b80      	subs	r0, r0, r6
 8001c08:	2864      	cmp	r0, #100	@ 0x64
 8001c0a:	d9f7      	bls.n	8001bfc <HAL_RCC_OscConfig+0xbc>
 8001c0c:	e7df      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4d7c      	ldr	r5, [pc, #496]	@ (8001e00 <HAL_RCC_OscConfig+0x2c0>)
 8001c10:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c12:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c14:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d117      	bne.n	8001c4c <HAL_RCC_OscConfig+0x10c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c1c:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d115      	bne.n	8001c50 <HAL_RCC_OscConfig+0x110>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	055a      	lsls	r2, r3, #21
 8001c28:	d502      	bpl.n	8001c30 <HAL_RCC_OscConfig+0xf0>
 8001c2a:	68e3      	ldr	r3, [r4, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d08b      	beq.n	8001b48 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	686b      	ldr	r3, [r5, #4]
 8001c32:	6922      	ldr	r2, [r4, #16]
 8001c34:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001c38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c3c:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c3e:	4b71      	ldr	r3, [pc, #452]	@ (8001e04 <HAL_RCC_OscConfig+0x2c4>)
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	f7fe ff99 	bl	8000b78 <HAL_InitTick>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d088      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1c>
 8001c4a:	e77d      	b.n	8001b48 <HAL_RCC_OscConfig+0x8>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	e7e8      	b.n	8001c22 <HAL_RCC_OscConfig+0xe2>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c50:	68e3      	ldr	r3, [r4, #12]
 8001c52:	b1bb      	cbz	r3, 8001c84 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_ENABLE();
 8001c54:	682b      	ldr	r3, [r5, #0]
 8001c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f922 	bl	8000ea4 <HAL_GetTick>
 8001c60:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c62:	682b      	ldr	r3, [r5, #0]
 8001c64:	055b      	lsls	r3, r3, #21
 8001c66:	d507      	bpl.n	8001c78 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	686b      	ldr	r3, [r5, #4]
 8001c6a:	6922      	ldr	r2, [r4, #16]
 8001c6c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001c70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c74:	606b      	str	r3, [r5, #4]
 8001c76:	e771      	b.n	8001b5c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff f914 	bl	8000ea4 <HAL_GetTick>
 8001c7c:	1b80      	subs	r0, r0, r6
 8001c7e:	2802      	cmp	r0, #2
 8001c80:	d9ef      	bls.n	8001c62 <HAL_RCC_OscConfig+0x122>
 8001c82:	e7a4      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001c84:	682b      	ldr	r3, [r5, #0]
 8001c86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f90a 	bl	8000ea4 <HAL_GetTick>
 8001c90:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c92:	682b      	ldr	r3, [r5, #0]
 8001c94:	055f      	lsls	r7, r3, #21
 8001c96:	f57f af61 	bpl.w	8001b5c <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f903 	bl	8000ea4 <HAL_GetTick>
 8001c9e:	1b80      	subs	r0, r0, r6
 8001ca0:	2802      	cmp	r0, #2
 8001ca2:	d9f6      	bls.n	8001c92 <HAL_RCC_OscConfig+0x152>
 8001ca4:	e793      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca6:	6963      	ldr	r3, [r4, #20]
 8001ca8:	4d55      	ldr	r5, [pc, #340]	@ (8001e00 <HAL_RCC_OscConfig+0x2c0>)
 8001caa:	b19b      	cbz	r3, 8001cd4 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_LSI_ENABLE();
 8001cac:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f8f4 	bl	8000ea4 <HAL_GetTick>
 8001cbc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cbe:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001cc2:	079b      	lsls	r3, r3, #30
 8001cc4:	f53f af4e 	bmi.w	8001b64 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f8ec 	bl	8000ea4 <HAL_GetTick>
 8001ccc:	1b80      	subs	r0, r0, r6
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9f5      	bls.n	8001cbe <HAL_RCC_OscConfig+0x17e>
 8001cd2:	e77c      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001cd4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f8e0 	bl	8000ea4 <HAL_GetTick>
 8001ce4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001cea:	079f      	lsls	r7, r3, #30
 8001cec:	f57f af3a 	bpl.w	8001b64 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff f8d8 	bl	8000ea4 <HAL_GetTick>
 8001cf4:	1b80      	subs	r0, r0, r6
 8001cf6:	2802      	cmp	r0, #2
 8001cf8:	d9f5      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1a6>
 8001cfa:	e768      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cfc:	4d40      	ldr	r5, [pc, #256]	@ (8001e00 <HAL_RCC_OscConfig+0x2c0>)
 8001cfe:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001d00:	00d8      	lsls	r0, r3, #3
 8001d02:	d427      	bmi.n	8001d54 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001d0c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d16:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d18:	4e3b      	ldr	r6, [pc, #236]	@ (8001e08 <HAL_RCC_OscConfig+0x2c8>)
 8001d1a:	6833      	ldr	r3, [r6, #0]
 8001d1c:	05d9      	lsls	r1, r3, #23
 8001d1e:	d51b      	bpl.n	8001d58 <HAL_RCC_OscConfig+0x218>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d20:	68a3      	ldr	r3, [r4, #8]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d129      	bne.n	8001d7a <HAL_RCC_OscConfig+0x23a>
 8001d26:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8001d32:	f7ff f8b7 	bl	8000ea4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001d3a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8001d40:	079b      	lsls	r3, r3, #30
 8001d42:	d540      	bpl.n	8001dc6 <HAL_RCC_OscConfig+0x286>
    if (pwrclkchanged == SET)
 8001d44:	2f00      	cmp	r7, #0
 8001d46:	f43f af11 	beq.w	8001b6c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001d52:	e70b      	b.n	8001b6c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001d54:	2700      	movs	r7, #0
 8001d56:	e7df      	b.n	8001d18 <HAL_RCC_OscConfig+0x1d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d58:	6833      	ldr	r3, [r6, #0]
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d60:	f7ff f8a0 	bl	8000ea4 <HAL_GetTick>
 8001d64:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d66:	6833      	ldr	r3, [r6, #0]
 8001d68:	05da      	lsls	r2, r3, #23
 8001d6a:	d4d9      	bmi.n	8001d20 <HAL_RCC_OscConfig+0x1e0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6c:	f7ff f89a 	bl	8000ea4 <HAL_GetTick>
 8001d70:	eba0 0008 	sub.w	r0, r0, r8
 8001d74:	2802      	cmp	r0, #2
 8001d76:	d9f6      	bls.n	8001d66 <HAL_RCC_OscConfig+0x226>
 8001d78:	e729      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x24c>
 8001d7e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
 8001d8a:	e7cc      	b.n	8001d26 <HAL_RCC_OscConfig+0x1e6>
 8001d8c:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
 8001d98:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
 8001d9c:	f022 0204 	bic.w	r2, r2, #4
 8001da0:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1c4      	bne.n	8001d32 <HAL_RCC_OscConfig+0x1f2>
      tickstart = HAL_GetTick();
 8001da8:	f7ff f87c 	bl	8000ea4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001db0:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8001db6:	0799      	lsls	r1, r3, #30
 8001db8:	d5c4      	bpl.n	8001d44 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff f873 	bl	8000ea4 <HAL_GetTick>
 8001dbe:	1b80      	subs	r0, r0, r6
 8001dc0:	4540      	cmp	r0, r8
 8001dc2:	d9f6      	bls.n	8001db2 <HAL_RCC_OscConfig+0x272>
 8001dc4:	e703      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7ff f86d 	bl	8000ea4 <HAL_GetTick>
 8001dca:	1b80      	subs	r0, r0, r6
 8001dcc:	4540      	cmp	r0, r8
 8001dce:	d9b5      	bls.n	8001d3c <HAL_RCC_OscConfig+0x1fc>
 8001dd0:	e6fd      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dd2:	69a3      	ldr	r3, [r4, #24]
 8001dd4:	4d0a      	ldr	r5, [pc, #40]	@ (8001e00 <HAL_RCC_OscConfig+0x2c0>)
 8001dd6:	b1cb      	cbz	r3, 8001e0c <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_HSI48_ENABLE();
 8001dd8:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8001de4:	f7ff f85e 	bl	8000ea4 <HAL_GetTick>
 8001de8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dea:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001dee:	079b      	lsls	r3, r3, #30
 8001df0:	f53f aec0 	bmi.w	8001b74 <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df4:	f7ff f856 	bl	8000ea4 <HAL_GetTick>
 8001df8:	1b80      	subs	r0, r0, r6
 8001dfa:	2802      	cmp	r0, #2
 8001dfc:	d9f5      	bls.n	8001dea <HAL_RCC_OscConfig+0x2aa>
 8001dfe:	e6e6      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	20000008 	.word	0x20000008
 8001e08:	40007000 	.word	0x40007000
      __HAL_RCC_HSI48_DISABLE();
 8001e0c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8001e18:	f7ff f844 	bl	8000ea4 <HAL_GetTick>
 8001e1c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e1e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8001e22:	079f      	lsls	r7, r3, #30
 8001e24:	f57f aea6 	bpl.w	8001b74 <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e28:	f7ff f83c 	bl	8000ea4 <HAL_GetTick>
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	2802      	cmp	r0, #2
 8001e30:	d9f5      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2de>
 8001e32:	e6cc      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e34:	4d45      	ldr	r5, [pc, #276]	@ (8001f4c <HAL_RCC_OscConfig+0x40c>)
 8001e36:	68aa      	ldr	r2, [r5, #8]
 8001e38:	f002 020c 	and.w	r2, r2, #12
 8001e3c:	2a0c      	cmp	r2, #12
 8001e3e:	d051      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x3a4>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e40:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e48:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e4a:	d13a      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x382>
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f82a 	bl	8000ea4 <HAL_GetTick>
 8001e50:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e52:	682b      	ldr	r3, [r5, #0]
 8001e54:	0199      	lsls	r1, r3, #6
 8001e56:	d42e      	bmi.n	8001eb6 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e58:	68ea      	ldr	r2, [r5, #12]
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f50 <HAL_RCC_OscConfig+0x410>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	6a22      	ldr	r2, [r4, #32]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001e64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e68:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001e6a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8001e6e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001e70:	3a01      	subs	r2, #1
 8001e72:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001e76:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001e78:	0852      	lsrs	r2, r2, #1
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001e80:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001e82:	0852      	lsrs	r2, r2, #1
 8001e84:	3a01      	subs	r2, #1
 8001e86:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001e8a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e92:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e94:	68eb      	ldr	r3, [r5, #12]
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e9a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f802 	bl	8000ea4 <HAL_GetTick>
 8001ea0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	019a      	lsls	r2, r3, #6
 8001ea6:	f53f ae69 	bmi.w	8001b7c <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe fffb 	bl	8000ea4 <HAL_GetTick>
 8001eae:	1b00      	subs	r0, r0, r4
 8001eb0:	2802      	cmp	r0, #2
 8001eb2:	d9f6      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x362>
 8001eb4:	e68b      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe fff5 	bl	8000ea4 <HAL_GetTick>
 8001eba:	1b80      	subs	r0, r0, r6
 8001ebc:	2802      	cmp	r0, #2
 8001ebe:	d9c8      	bls.n	8001e52 <HAL_RCC_OscConfig+0x312>
 8001ec0:	e685      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001ec2:	f7fe ffef 	bl	8000ea4 <HAL_GetTick>
 8001ec6:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	019b      	lsls	r3, r3, #6
 8001ecc:	d404      	bmi.n	8001ed8 <HAL_RCC_OscConfig+0x398>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ece:	68ea      	ldr	r2, [r5, #12]
 8001ed0:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <HAL_RCC_OscConfig+0x414>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60eb      	str	r3, [r5, #12]
 8001ed6:	e651      	b.n	8001b7c <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe ffe4 	bl	8000ea4 <HAL_GetTick>
 8001edc:	1b00      	subs	r0, r0, r4
 8001ede:	2802      	cmp	r0, #2
 8001ee0:	d9f2      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x388>
 8001ee2:	e674      	b.n	8001bce <HAL_RCC_OscConfig+0x8e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	f43f ae2f 	beq.w	8001b48 <HAL_RCC_OscConfig+0x8>
      temp_pllckcfg = RCC->PLLCFGR;
 8001eea:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eec:	6a22      	ldr	r2, [r4, #32]
 8001eee:	f003 0103 	and.w	r1, r3, #3
 8001ef2:	4291      	cmp	r1, r2
 8001ef4:	f47f ae28 	bne.w	8001b48 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ef8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001efa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001efe:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f00:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001f04:	f47f ae20 	bne.w	8001b48 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f08:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001f0a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f0e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001f12:	f47f ae19 	bne.w	8001b48 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001f18:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001f20:	f47f ae12 	bne.w	8001b48 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f24:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001f26:	0852      	lsrs	r2, r2, #1
 8001f28:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8001f2c:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f2e:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001f32:	f47f ae09 	bne.w	8001b48 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f36:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001f38:	0852      	lsrs	r2, r2, #1
 8001f3a:	3a01      	subs	r2, #1
 8001f3c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f40:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001f44:	bf14      	ite	ne
 8001f46:	2001      	movne	r0, #1
 8001f48:	2000      	moveq	r0, #0
 8001f4a:	e5fe      	b.n	8001b4a <HAL_RCC_OscConfig+0xa>
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	019f800c 	.word	0x019f800c
 8001f54:	feeefffc 	.word	0xfeeefffc

08001f58 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f58:	4b17      	ldr	r3, [pc, #92]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x60>)
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	f002 020c 	and.w	r2, r2, #12
 8001f60:	2a04      	cmp	r2, #4
 8001f62:	d023      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	f002 020c 	and.w	r2, r2, #12
 8001f6a:	2a08      	cmp	r2, #8
 8001f6c:	d020      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	f002 020c 	and.w	r2, r2, #12
 8001f74:	2a0c      	cmp	r2, #12
 8001f76:	d11d      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f78:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f7a:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f7c:	68d8      	ldr	r0, [r3, #12]
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f7e:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f80:	f001 0103 	and.w	r1, r1, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f84:	f3c3 6341 	ubfx	r3, r3, #25, #2
    switch (pllsource)
 8001f88:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f8a:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f8e:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f92:	f103 0301 	add.w	r3, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f96:	bf0c      	ite	eq
 8001f98:	4908      	ldreq	r1, [pc, #32]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x64>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f9a:	4909      	ldrne	r1, [pc, #36]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x68>)
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f9c:	005b      	lsls	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f9e:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa0:	fbb1 f2f2 	udiv	r2, r1, r2
 8001fa4:	4350      	muls	r0, r2
    sysclockfreq = pllvco/pllr;
 8001fa6:	fbb0 f0f3 	udiv	r0, r0, r3
  else
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
 8001faa:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8001fac:	4804      	ldr	r0, [pc, #16]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x68>)
 8001fae:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001fb0:	4802      	ldr	r0, [pc, #8]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x64>)
 8001fb2:	4770      	bx	lr
    sysclockfreq = 0U;
 8001fb4:	2000      	movs	r0, #0
}
 8001fb6:	4770      	bx	lr
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	007a1200 	.word	0x007a1200
 8001fc0:	00f42400 	.word	0x00f42400

08001fc4 <HAL_RCC_ClockConfig>:
{
 8001fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fc8:	460e      	mov	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8001fca:	4605      	mov	r5, r0
 8001fcc:	b910      	cbnz	r0, 8001fd4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001fce:	2001      	movs	r0, #1
}
 8001fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4a6d      	ldr	r2, [pc, #436]	@ (800218c <HAL_RCC_ClockConfig+0x1c8>)
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	d345      	bcc.n	800206c <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe0:	6829      	ldr	r1, [r5, #0]
 8001fe2:	f011 0801 	ands.w	r8, r1, #1
 8001fe6:	d14c      	bne.n	8002082 <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe8:	682a      	ldr	r2, [r5, #0]
 8001fea:	0791      	lsls	r1, r2, #30
 8001fec:	f140 80a7 	bpl.w	800213e <HAL_RCC_ClockConfig+0x17a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	4b67      	ldr	r3, [pc, #412]	@ (8002190 <HAL_RCC_ClockConfig+0x1cc>)
 8001ff2:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff6:	bf1e      	ittt	ne
 8001ff8:	6899      	ldrne	r1, [r3, #8]
 8001ffa:	f441 61e0 	orrne.w	r1, r1, #1792	@ 0x700
 8001ffe:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002002:	bf41      	itttt	mi
 8002004:	689a      	ldrmi	r2, [r3, #8]
 8002006:	f422 527c 	bicmi.w	r2, r2, #16128	@ 0x3f00
 800200a:	f442 62e0 	orrmi.w	r2, r2, #1792	@ 0x700
 800200e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	68a9      	ldr	r1, [r5, #8]
 8002014:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800201c:	4c5b      	ldr	r4, [pc, #364]	@ (800218c <HAL_RCC_ClockConfig+0x1c8>)
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	42b3      	cmp	r3, r6
 8002026:	f200 8093 	bhi.w	8002150 <HAL_RCC_ClockConfig+0x18c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	682a      	ldr	r2, [r5, #0]
 800202c:	4c58      	ldr	r4, [pc, #352]	@ (8002190 <HAL_RCC_ClockConfig+0x1cc>)
 800202e:	f012 0f04 	tst.w	r2, #4
 8002032:	f040 80a3 	bne.w	800217c <HAL_RCC_ClockConfig+0x1b8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	0713      	lsls	r3, r2, #28
 8002038:	d506      	bpl.n	8002048 <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203a:	68a3      	ldr	r3, [r4, #8]
 800203c:	692a      	ldr	r2, [r5, #16]
 800203e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002042:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002046:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002048:	f7ff ff86 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800204c:	68a3      	ldr	r3, [r4, #8]
 800204e:	4a51      	ldr	r2, [pc, #324]	@ (8002194 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	40d8      	lsrs	r0, r3
 800205c:	4b4e      	ldr	r3, [pc, #312]	@ (8002198 <HAL_RCC_ClockConfig+0x1d4>)
 800205e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002060:	4b4e      	ldr	r3, [pc, #312]	@ (800219c <HAL_RCC_ClockConfig+0x1d8>)
 8002062:	6818      	ldr	r0, [r3, #0]
}
 8002064:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8002068:	f7fe bd86 	b.w	8000b78 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206c:	6813      	ldr	r3, [r2, #0]
 800206e:	f023 030f 	bic.w	r3, r3, #15
 8002072:	430b      	orrs	r3, r1
 8002074:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	428b      	cmp	r3, r1
 800207e:	d1a6      	bne.n	8001fce <HAL_RCC_ClockConfig+0xa>
 8002080:	e7ae      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002082:	686f      	ldr	r7, [r5, #4]
 8002084:	4c42      	ldr	r4, [pc, #264]	@ (8002190 <HAL_RCC_ClockConfig+0x1cc>)
 8002086:	2f03      	cmp	r7, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002088:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208a:	d149      	bne.n	8002120 <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	d59e      	bpl.n	8001fce <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002090:	68e3      	ldr	r3, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002092:	68e2      	ldr	r2, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002094:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8002098:	2b03      	cmp	r3, #3
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800209a:	68e3      	ldr	r3, [r4, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800209c:	bf0c      	ite	eq
 800209e:	4840      	ldreq	r0, [pc, #256]	@ (80021a0 <HAL_RCC_ClockConfig+0x1dc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020a0:	4840      	ldrne	r0, [pc, #256]	@ (80021a4 <HAL_RCC_ClockConfig+0x1e0>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a2:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020a6:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020aa:	3201      	adds	r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ac:	fbb0 f2f2 	udiv	r2, r0, r2
 80020b0:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020b2:	68e2      	ldr	r2, [r4, #12]
 80020b4:	f3c2 6241 	ubfx	r2, r2, #25, #2
 80020b8:	3201      	adds	r2, #1
 80020ba:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 80020bc:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 80020c0:	4a39      	ldr	r2, [pc, #228]	@ (80021a8 <HAL_RCC_ClockConfig+0x1e4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d81a      	bhi.n	80020fc <HAL_RCC_ClockConfig+0x138>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020c6:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	68a3      	ldr	r3, [r4, #8]
 80020cc:	f023 0303 	bic.w	r3, r3, #3
 80020d0:	433b      	orrs	r3, r7
 80020d2:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80020d4:	f7fe fee6 	bl	8000ea4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f241 3988 	movw	r9, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80020dc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	68a3      	ldr	r3, [r4, #8]
 80020e0:	686a      	ldr	r2, [r5, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020ea:	f43f af7d 	beq.w	8001fe8 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ee:	f7fe fed9 	bl	8000ea4 <HAL_GetTick>
 80020f2:	1bc0      	subs	r0, r0, r7
 80020f4:	4548      	cmp	r0, r9
 80020f6:	d9f2      	bls.n	80020de <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 80020f8:	2003      	movs	r0, #3
 80020fa:	e769      	b.n	8001fd0 <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020fc:	68a3      	ldr	r3, [r4, #8]
 80020fe:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8002102:	d004      	beq.n	800210e <HAL_RCC_ClockConfig+0x14a>
 8002104:	0788      	lsls	r0, r1, #30
 8002106:	d5de      	bpl.n	80020c6 <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002108:	68ab      	ldr	r3, [r5, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1db      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x102>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800210e:	68a3      	ldr	r3, [r4, #8]
 8002110:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002118:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 800211a:	f04f 0880 	mov.w	r8, #128	@ 0x80
 800211e:	e7d4      	b.n	80020ca <HAL_RCC_ClockConfig+0x106>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002120:	2f02      	cmp	r7, #2
 8002122:	d109      	bne.n	8002138 <HAL_RCC_ClockConfig+0x174>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002124:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002128:	f43f af51 	beq.w	8001fce <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800212c:	f7ff ff14 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <HAL_RCC_ClockConfig+0x1e4>)
 8002132:	4298      	cmp	r0, r3
 8002134:	d9c7      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x102>
 8002136:	e7ea      	b.n	800210e <HAL_RCC_ClockConfig+0x14a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002138:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800213c:	e7f4      	b.n	8002128 <HAL_RCC_ClockConfig+0x164>
    if(hpre == RCC_SYSCLK_DIV2)
 800213e:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002142:	bf01      	itttt	eq
 8002144:	4a12      	ldreq	r2, [pc, #72]	@ (8002190 <HAL_RCC_ClockConfig+0x1cc>)
 8002146:	6893      	ldreq	r3, [r2, #8]
 8002148:	f023 03f0 	biceq.w	r3, r3, #240	@ 0xf0
 800214c:	6093      	streq	r3, [r2, #8]
 800214e:	e765      	b.n	800201c <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	f023 030f 	bic.w	r3, r3, #15
 8002156:	4333      	orrs	r3, r6
 8002158:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800215a:	f7fe fea3 	bl	8000ea4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002162:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	42b3      	cmp	r3, r6
 800216c:	f43f af5d 	beq.w	800202a <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002170:	f7fe fe98 	bl	8000ea4 <HAL_GetTick>
 8002174:	1bc0      	subs	r0, r0, r7
 8002176:	4540      	cmp	r0, r8
 8002178:	d9f4      	bls.n	8002164 <HAL_RCC_ClockConfig+0x1a0>
 800217a:	e7bd      	b.n	80020f8 <HAL_RCC_ClockConfig+0x134>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	68a3      	ldr	r3, [r4, #8]
 800217e:	68e9      	ldr	r1, [r5, #12]
 8002180:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002184:	430b      	orrs	r3, r1
 8002186:	60a3      	str	r3, [r4, #8]
 8002188:	e755      	b.n	8002036 <HAL_RCC_ClockConfig+0x72>
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	08004f94 	.word	0x08004f94
 8002198:	20000000 	.word	0x20000000
 800219c:	20000008 	.word	0x20000008
 80021a0:	007a1200 	.word	0x007a1200
 80021a4:	00f42400 	.word	0x00f42400
 80021a8:	04c4b400 	.word	0x04c4b400

080021ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80021ae:	4a06      	ldr	r2, [pc, #24]	@ (80021c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ba:	6810      	ldr	r0, [r2, #0]
 80021bc:	f003 031f 	and.w	r3, r3, #31
}
 80021c0:	40d8      	lsrs	r0, r3
 80021c2:	4770      	bx	lr
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08004f8c 	.word	0x08004f8c
 80021cc:	20000000 	.word	0x20000000

080021d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80021d2:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021de:	6810      	ldr	r0, [r2, #0]
 80021e0:	f003 031f 	and.w	r3, r3, #31
}
 80021e4:	40d8      	lsrs	r0, r3
 80021e6:	4770      	bx	lr
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08004f8c 	.word	0x08004f8c
 80021f0:	20000000 	.word	0x20000000

080021f4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021f4:	230f      	movs	r3, #15
 80021f6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <HAL_RCC_GetClockConfig+0x34>)
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	f002 0203 	and.w	r2, r2, #3
 8002200:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002208:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002210:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800221a:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_RCC_GetClockConfig+0x38>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	600b      	str	r3, [r1, #0]
}
 8002226:	4770      	bx	lr
 8002228:	40021000 	.word	0x40021000
 800222c:	40022000 	.word	0x40022000

08002230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002230:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002234:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002236:	6800      	ldr	r0, [r0, #0]
 8002238:	f410 2000 	ands.w	r0, r0, #524288	@ 0x80000
 800223c:	d056      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4d98      	ldr	r5, [pc, #608]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002240:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002242:	00d8      	lsls	r0, r3, #3
 8002244:	d444      	bmi.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800224c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800224e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002258:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800225a:	4f92      	ldr	r7, [pc, #584]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002262:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002264:	f7fe fe1e 	bl	8000ea4 <HAL_GetTick>
 8002268:	4680      	mov	r8, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	05d9      	lsls	r1, r3, #23
 800226e:	d531      	bpl.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002270:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002274:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002276:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800227a:	d01f      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800227c:	429a      	cmp	r2, r3
 800227e:	d01d      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002280:	f8d5 2090 	ldr.w	r2, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002284:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002290:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002294:	f422 7140 	bic.w	r1, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800229c:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800229e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 80022a2:	f8c5 1090 	str.w	r1, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022a6:	d509      	bpl.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fdfc 	bl	8000ea4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80022b0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80022b6:	079b      	lsls	r3, r3, #30
 80022b8:	f140 80eb 	bpl.w	8002492 <HAL_RCCEx_PeriphCLKConfig+0x262>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022bc:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80022c0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80022c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022cc:	2000      	movs	r0, #0
 80022ce:	e008      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    FlagStatus       pwrclkchanged = RESET;
 80022d0:	2600      	movs	r6, #0
 80022d2:	e7c2      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe fde6 	bl	8000ea4 <HAL_GetTick>
 80022d8:	eba0 0008 	sub.w	r0, r0, r8
 80022dc:	2802      	cmp	r0, #2
 80022de:	d9c4      	bls.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022e0:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e2:	b11e      	cbz	r6, 80022ec <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80022e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	65ab      	str	r3, [r5, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	07de      	lsls	r6, r3, #31
 80022f0:	d508      	bpl.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f2:	496b      	ldr	r1, [pc, #428]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80022f4:	6865      	ldr	r5, [r4, #4]
 80022f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80022fa:	f022 0203 	bic.w	r2, r2, #3
 80022fe:	432a      	orrs	r2, r5
 8002300:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002304:	079d      	lsls	r5, r3, #30
 8002306:	d508      	bpl.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002308:	4965      	ldr	r1, [pc, #404]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800230a:	68a5      	ldr	r5, [r4, #8]
 800230c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002310:	f022 020c 	bic.w	r2, r2, #12
 8002314:	432a      	orrs	r2, r5
 8002316:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800231a:	0759      	lsls	r1, r3, #29
 800231c:	d508      	bpl.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800231e:	4960      	ldr	r1, [pc, #384]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002320:	68e5      	ldr	r5, [r4, #12]
 8002322:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002326:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800232a:	432a      	orrs	r2, r5
 800232c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002330:	071a      	lsls	r2, r3, #28
 8002332:	d508      	bpl.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002334:	495a      	ldr	r1, [pc, #360]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002336:	6925      	ldr	r5, [r4, #16]
 8002338:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800233c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002340:	432a      	orrs	r2, r5
 8002342:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002346:	069f      	lsls	r7, r3, #26
 8002348:	d508      	bpl.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800234a:	4955      	ldr	r1, [pc, #340]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800234c:	6965      	ldr	r5, [r4, #20]
 800234e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002352:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002356:	432a      	orrs	r2, r5
 8002358:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235c:	065e      	lsls	r6, r3, #25
 800235e:	d508      	bpl.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002360:	494f      	ldr	r1, [pc, #316]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002362:	69a5      	ldr	r5, [r4, #24]
 8002364:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002368:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800236c:	432a      	orrs	r2, r5
 800236e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002372:	061d      	lsls	r5, r3, #24
 8002374:	d508      	bpl.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002376:	494a      	ldr	r1, [pc, #296]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002378:	69e5      	ldr	r5, [r4, #28]
 800237a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800237e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002382:	432a      	orrs	r2, r5
 8002384:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002388:	05d9      	lsls	r1, r3, #23
 800238a:	d508      	bpl.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800238c:	4944      	ldr	r1, [pc, #272]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800238e:	6a25      	ldr	r5, [r4, #32]
 8002390:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002394:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002398:	432a      	orrs	r2, r5
 800239a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800239e:	059a      	lsls	r2, r3, #22
 80023a0:	d508      	bpl.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023a2:	493f      	ldr	r1, [pc, #252]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80023a4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80023a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80023aa:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80023ae:	432a      	orrs	r2, r5
 80023b0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023b4:	055f      	lsls	r7, r3, #21
 80023b6:	d50f      	bpl.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023b8:	4939      	ldr	r1, [pc, #228]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80023ba:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80023bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80023c0:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80023c4:	432a      	orrs	r2, r5
 80023c6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023ca:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ce:	bf02      	ittt	eq
 80023d0:	68ca      	ldreq	r2, [r1, #12]
 80023d2:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 80023d6:	60ca      	streq	r2, [r1, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023d8:	051e      	lsls	r6, r3, #20
 80023da:	d50f      	bpl.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023dc:	4930      	ldr	r1, [pc, #192]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80023de:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80023e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80023e4:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80023e8:	432a      	orrs	r2, r5
 80023ea:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023ee:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f2:	bf02      	ittt	eq
 80023f4:	68ca      	ldreq	r2, [r1, #12]
 80023f6:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 80023fa:	60ca      	streq	r2, [r1, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023fc:	04dd      	lsls	r5, r3, #19
 80023fe:	d50f      	bpl.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002400:	4927      	ldr	r1, [pc, #156]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002402:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8002404:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002408:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800240c:	432a      	orrs	r2, r5
 800240e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002412:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002416:	bf02      	ittt	eq
 8002418:	68ca      	ldreq	r2, [r1, #12]
 800241a:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 800241e:	60ca      	streq	r2, [r1, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002420:	0499      	lsls	r1, r3, #18
 8002422:	d50f      	bpl.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002424:	491e      	ldr	r1, [pc, #120]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002426:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8002428:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800242c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002430:	432a      	orrs	r2, r5
 8002432:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002436:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800243a:	bf02      	ittt	eq
 800243c:	68ca      	ldreq	r2, [r1, #12]
 800243e:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 8002442:	60ca      	streq	r2, [r1, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002444:	045a      	lsls	r2, r3, #17
 8002446:	d50f      	bpl.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002448:	4915      	ldr	r1, [pc, #84]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800244a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800244c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002450:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002454:	432a      	orrs	r2, r5
 8002456:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245a:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245e:	bf02      	ittt	eq
 8002460:	68ca      	ldreq	r2, [r1, #12]
 8002462:	f442 1280 	orreq.w	r2, r2, #1048576	@ 0x100000
 8002466:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	d50f      	bpl.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800246c:	4a0c      	ldr	r2, [pc, #48]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800246e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002470:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002474:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002478:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800247a:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800247e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002482:	d103      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002484:	68d3      	ldr	r3, [r2, #12]
 8002486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248a:	60d3      	str	r3, [r2, #12]
  }

#endif /* QUADSPI */

  return status;
}
 800248c:	b002      	add	sp, #8
 800248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe fd07 	bl	8000ea4 <HAL_GetTick>
 8002496:	1bc0      	subs	r0, r0, r7
 8002498:	4540      	cmp	r0, r8
 800249a:	f67f af0a 	bls.w	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 800249e:	e71f      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40007000 	.word	0x40007000

080024a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024aa:	4604      	mov	r4, r0
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d067      	beq.n	8002580 <HAL_SPI_Init+0xd8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d15d      	bne.n	8002572 <HAL_SPI_Init+0xca>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024b6:	6842      	ldr	r2, [r0, #4]
 80024b8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80024bc:	d000      	beq.n	80024c0 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024be:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024c4:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80024c8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80024cc:	b923      	cbnz	r3, 80024d8 <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024ce:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7fe fae8 	bl	8000aa8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d8:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024da:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80024dc:	2302      	movs	r3, #2
 80024de:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80024e2:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024e4:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80024e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024ec:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	d942      	bls.n	800257a <HAL_SPI_Init+0xd2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024f4:	461d      	mov	r5, r3
 80024f6:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024fa:	bf18      	it	ne
 80024fc:	62a3      	strne	r3, [r4, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024fe:	68a6      	ldr	r6, [r4, #8]
 8002500:	6863      	ldr	r3, [r4, #4]
 8002502:	69a1      	ldr	r1, [r4, #24]
 8002504:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8002508:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 800250c:	4333      	orrs	r3, r6
 800250e:	6926      	ldr	r6, [r4, #16]
 8002510:	f006 0602 	and.w	r6, r6, #2
 8002514:	4333      	orrs	r3, r6
 8002516:	6966      	ldr	r6, [r4, #20]
 8002518:	f006 0601 	and.w	r6, r6, #1
 800251c:	4333      	orrs	r3, r6
 800251e:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8002522:	4333      	orrs	r3, r6
 8002524:	69e6      	ldr	r6, [r4, #28]
 8002526:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 800252a:	4333      	orrs	r3, r6
 800252c:	6a26      	ldr	r6, [r4, #32]
 800252e:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8002532:	4333      	orrs	r3, r6
 8002534:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002536:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 800253a:	4333      	orrs	r3, r6
 800253c:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800253e:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8002540:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002542:	f006 0608 	and.w	r6, r6, #8
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 800254e:	4333      	orrs	r3, r6
 8002550:	0c09      	lsrs	r1, r1, #16
 8002552:	4303      	orrs	r3, r0
 8002554:	f001 0104 	and.w	r1, r1, #4
 8002558:	430b      	orrs	r3, r1
 800255a:	432b      	orrs	r3, r5
 800255c:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800255e:	69d3      	ldr	r3, [r2, #28]
 8002560:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002564:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002566:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002568:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800256a:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800256c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d

  return HAL_OK;
}
 8002570:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002572:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002574:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002578:	e7a2      	b.n	80024c0 <HAL_SPI_Init+0x18>
 800257a:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800257e:	e7bc      	b.n	80024fa <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8002580:	2001      	movs	r0, #1
 8002582:	e7f5      	b.n	8002570 <HAL_SPI_Init+0xc8>

08002584 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002584:	4770      	bx	lr
	...

08002588 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002588:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800258c:	2b01      	cmp	r3, #1
 800258e:	d12b      	bne.n	80025e8 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002596:	6803      	ldr	r3, [r0, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a0:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <HAL_TIM_Base_Start_IT+0x64>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d012      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x44>
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025aa:	d00f      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x44>
 80025ac:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00b      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x44>
 80025b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d007      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x44>
 80025bc:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d003      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x44>
 80025c4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d107      	bne.n	80025dc <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	4a08      	ldr	r2, [pc, #32]	@ (80025f0 <HAL_TIM_Base_Start_IT+0x68>)
 80025d0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d2:	2a06      	cmp	r2, #6
 80025d4:	d006      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x5c>
 80025d6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80025da:	d003      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80025e4:	2000      	movs	r0, #0
 80025e6:	4770      	bx	lr
    return HAL_ERROR;
 80025e8:	2001      	movs	r0, #1
}
 80025ea:	4770      	bx	lr
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	00010007 	.word	0x00010007

080025f4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80025f4:	4770      	bx	lr

080025f6 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80025fa:	4770      	bx	lr

080025fc <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80025fc:	6803      	ldr	r3, [r0, #0]
{
 80025fe:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002600:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002602:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002604:	07b2      	lsls	r2, r6, #30
{
 8002606:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002608:	d50e      	bpl.n	8002628 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800260a:	07a9      	lsls	r1, r5, #30
 800260c:	d50c      	bpl.n	8002628 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800260e:	f06f 0202 	mvn.w	r2, #2
 8002612:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002614:	2201      	movs	r2, #1
 8002616:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	079a      	lsls	r2, r3, #30
 800261c:	f000 80a4 	beq.w	8002768 <HAL_TIM_IRQHandler+0x16c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002620:	f7ff ffe9 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002624:	2300      	movs	r3, #0
 8002626:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002628:	0773      	lsls	r3, r6, #29
 800262a:	d511      	bpl.n	8002650 <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800262c:	0768      	lsls	r0, r5, #29
 800262e:	d50f      	bpl.n	8002650 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	f06f 0204 	mvn.w	r2, #4
 8002636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002638:	2202      	movs	r2, #2
 800263a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002644:	f000 8096 	beq.w	8002774 <HAL_TIM_IRQHandler+0x178>
        HAL_TIM_IC_CaptureCallback(htim);
 8002648:	f7ff ffd5 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264c:	2300      	movs	r3, #0
 800264e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002650:	0731      	lsls	r1, r6, #28
 8002652:	d510      	bpl.n	8002676 <HAL_TIM_IRQHandler+0x7a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002654:	072a      	lsls	r2, r5, #28
 8002656:	d50e      	bpl.n	8002676 <HAL_TIM_IRQHandler+0x7a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	f06f 0208 	mvn.w	r2, #8
 800265e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002660:	2204      	movs	r2, #4
 8002662:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002668:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800266a:	f000 8089 	beq.w	8002780 <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	f7ff ffc2 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	2300      	movs	r3, #0
 8002674:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002676:	06f1      	lsls	r1, r6, #27
 8002678:	d510      	bpl.n	800269c <HAL_TIM_IRQHandler+0xa0>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800267a:	06ea      	lsls	r2, r5, #27
 800267c:	d50e      	bpl.n	800269c <HAL_TIM_IRQHandler+0xa0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	f06f 0210 	mvn.w	r2, #16
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002686:	2208      	movs	r2, #8
 8002688:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002690:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002692:	d07b      	beq.n	800278c <HAL_TIM_IRQHandler+0x190>
        HAL_TIM_IC_CaptureCallback(htim);
 8002694:	f7ff ffaf 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002698:	2300      	movs	r3, #0
 800269a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800269c:	07f3      	lsls	r3, r6, #31
 800269e:	d508      	bpl.n	80026b2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026a0:	07e8      	lsls	r0, r5, #31
 80026a2:	d506      	bpl.n	80026b2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	f06f 0201 	mvn.w	r2, #1
 80026aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7fe f9c9 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026b2:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 80026b6:	d008      	beq.n	80026ca <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026b8:	0629      	lsls	r1, r5, #24
 80026ba:	d506      	bpl.n	80026ca <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80026c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80026c4:	4620      	mov	r0, r4
 80026c6:	f000 f8ee 	bl	80028a6 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026ca:	05f2      	lsls	r2, r6, #23
 80026cc:	d508      	bpl.n	80026e0 <HAL_TIM_IRQHandler+0xe4>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026ce:	062b      	lsls	r3, r5, #24
 80026d0:	d506      	bpl.n	80026e0 <HAL_TIM_IRQHandler+0xe4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80026d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80026da:	4620      	mov	r0, r4
 80026dc:	f000 f8e4 	bl	80028a8 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026e0:	0670      	lsls	r0, r6, #25
 80026e2:	d508      	bpl.n	80026f6 <HAL_TIM_IRQHandler+0xfa>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026e4:	0669      	lsls	r1, r5, #25
 80026e6:	d506      	bpl.n	80026f6 <HAL_TIM_IRQHandler+0xfa>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff ff82 	bl	80025fa <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026f6:	06b2      	lsls	r2, r6, #26
 80026f8:	d508      	bpl.n	800270c <HAL_TIM_IRQHandler+0x110>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026fa:	06ab      	lsls	r3, r5, #26
 80026fc:	d506      	bpl.n	800270c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	f06f 0220 	mvn.w	r2, #32
 8002704:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002706:	4620      	mov	r0, r4
 8002708:	f000 f8cc 	bl	80028a4 <HAL_TIMEx_CommutCallback>
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800270c:	02f0      	lsls	r0, r6, #11
 800270e:	d508      	bpl.n	8002722 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002710:	02e9      	lsls	r1, r5, #11
 8002712:	d506      	bpl.n	8002722 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800271a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800271c:	4620      	mov	r0, r4
 800271e:	f000 f8c4 	bl	80028aa <HAL_TIMEx_EncoderIndexCallback>
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002722:	02b2      	lsls	r2, r6, #10
 8002724:	d508      	bpl.n	8002738 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002726:	02ab      	lsls	r3, r5, #10
 8002728:	d506      	bpl.n	8002738 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002730:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002732:	4620      	mov	r0, r4
 8002734:	f000 f8ba 	bl	80028ac <HAL_TIMEx_DirectionChangeCallback>
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002738:	0270      	lsls	r0, r6, #9
 800273a:	d508      	bpl.n	800274e <HAL_TIM_IRQHandler+0x152>
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800273c:	0269      	lsls	r1, r5, #9
 800273e:	d506      	bpl.n	800274e <HAL_TIM_IRQHandler+0x152>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002746:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8002748:	4620      	mov	r0, r4
 800274a:	f000 f8b0 	bl	80028ae <HAL_TIMEx_IndexErrorCallback>
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800274e:	0232      	lsls	r2, r6, #8
 8002750:	d522      	bpl.n	8002798 <HAL_TIM_IRQHandler+0x19c>
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002752:	022b      	lsls	r3, r5, #8
 8002754:	d520      	bpl.n	8002798 <HAL_TIM_IRQHandler+0x19c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 800275c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800275e:	611a      	str	r2, [r3, #16]
}
 8002760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002764:	f000 b8a4 	b.w	80028b0 <HAL_TIMEx_TransitionErrorCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002768:	f7ff ff44 	bl	80025f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff ff43 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002772:	e757      	b.n	8002624 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002774:	f7ff ff3e 	bl	80025f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff ff3d 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800277e:	e765      	b.n	800264c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002780:	f7ff ff38 	bl	80025f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff37 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800278a:	e772      	b.n	8002672 <HAL_TIM_IRQHandler+0x76>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278c:	f7ff ff32 	bl	80025f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff ff31 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002796:	e77f      	b.n	8002698 <HAL_TIM_IRQHandler+0x9c>
}
 8002798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800279c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800279c:	4a27      	ldr	r2, [pc, #156]	@ (800283c <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800279e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a0:	4290      	cmp	r0, r2
 80027a2:	d00e      	beq.n	80027c2 <TIM_Base_SetConfig+0x26>
 80027a4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80027a8:	d00b      	beq.n	80027c2 <TIM_Base_SetConfig+0x26>
 80027aa:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80027ae:	4290      	cmp	r0, r2
 80027b0:	d007      	beq.n	80027c2 <TIM_Base_SetConfig+0x26>
 80027b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027b6:	4290      	cmp	r0, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_Base_SetConfig+0x26>
 80027ba:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80027be:	4290      	cmp	r0, r2
 80027c0:	d108      	bne.n	80027d4 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80027c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80027c8:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80027cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d0:	4313      	orrs	r3, r2
 80027d2:	e00a      	b.n	80027ea <TIM_Base_SetConfig+0x4e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <TIM_Base_SetConfig+0xa4>)
 80027d6:	4290      	cmp	r0, r2
 80027d8:	d0f7      	beq.n	80027ca <TIM_Base_SetConfig+0x2e>
 80027da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027de:	4290      	cmp	r0, r2
 80027e0:	d0f3      	beq.n	80027ca <TIM_Base_SetConfig+0x2e>
 80027e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027e6:	4290      	cmp	r0, r2
 80027e8:	d0ef      	beq.n	80027ca <TIM_Base_SetConfig+0x2e>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ea:	694a      	ldr	r2, [r1, #20]
 80027ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027f0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80027f2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f4:	688b      	ldr	r3, [r1, #8]
 80027f6:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f8:	680b      	ldr	r3, [r1, #0]
 80027fa:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027fc:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <TIM_Base_SetConfig+0xa0>)
 80027fe:	4298      	cmp	r0, r3
 8002800:	d00f      	beq.n	8002822 <TIM_Base_SetConfig+0x86>
 8002802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002806:	4298      	cmp	r0, r3
 8002808:	d00b      	beq.n	8002822 <TIM_Base_SetConfig+0x86>
 800280a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800280e:	4298      	cmp	r0, r3
 8002810:	d007      	beq.n	8002822 <TIM_Base_SetConfig+0x86>
 8002812:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002816:	4298      	cmp	r0, r3
 8002818:	d003      	beq.n	8002822 <TIM_Base_SetConfig+0x86>
 800281a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800281e:	4298      	cmp	r0, r3
 8002820:	d101      	bne.n	8002826 <TIM_Base_SetConfig+0x8a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002822:	690b      	ldr	r3, [r1, #16]
 8002824:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002826:	2301      	movs	r3, #1
 8002828:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800282a:	6903      	ldr	r3, [r0, #16]
 800282c:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800282e:	bf42      	ittt	mi
 8002830:	6903      	ldrmi	r3, [r0, #16]
 8002832:	f023 0301 	bicmi.w	r3, r3, #1
 8002836:	6103      	strmi	r3, [r0, #16]
  }
}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40014000 	.word	0x40014000

08002844 <HAL_TIM_Base_Init>:
{
 8002844:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002846:	4604      	mov	r4, r0
 8002848:	b350      	cbz	r0, 80028a0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800284a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800284e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002852:	b91b      	cbnz	r3, 800285c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002854:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002858:	f7ff fe94 	bl	8002584 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	1d21      	adds	r1, r4, #4
 8002866:	f7ff ff99 	bl	800279c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286a:	2301      	movs	r3, #1
 800286c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8002870:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002872:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002876:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800287a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800287e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002882:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002886:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800288e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002892:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002896:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800289a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800289e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
 80028a2:	e7fc      	b.n	800289e <HAL_TIM_Base_Init+0x5a>

080028a4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80028a8:	4770      	bx	lr

080028aa <HAL_TIMEx_EncoderIndexCallback>:
/**
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_DirectionChangeCallback>:
/**
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
 80028ac:	4770      	bx	lr

080028ae <HAL_TIMEx_IndexErrorCallback>:
/**
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIMEx_TransitionErrorCallback>:
/**
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
 80028b0:	4770      	bx	lr
	...

080028b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028b4:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028b6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b8:	e852 3f00 	ldrex	r3, [r2]
 80028bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80028c4:	6802      	ldr	r2, [r0, #0]
 80028c6:	2900      	cmp	r1, #0
 80028c8:	d1f5      	bne.n	80028b6 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028ca:	4c0f      	ldr	r4, [pc, #60]	@ (8002908 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028cc:	f102 0308 	add.w	r3, r2, #8
 80028d0:	e853 3f00 	ldrex	r3, [r3]
 80028d4:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	f102 0c08 	add.w	ip, r2, #8
 80028da:	e84c 3100 	strex	r1, r3, [ip]
 80028de:	2900      	cmp	r1, #0
 80028e0:	d1f4      	bne.n	80028cc <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d107      	bne.n	80028f8 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ec:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	e842 3100 	strex	r1, r3, [r2]
 80028f4:	2900      	cmp	r1, #0
 80028f6:	d1f7      	bne.n	80028e8 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028f8:	2320      	movs	r3, #32
 80028fa:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fe:	2300      	movs	r3, #0
 8002900:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002902:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8002904:	bd10      	pop	{r4, pc}
 8002906:	bf00      	nop
 8002908:	effffffe 	.word	0xeffffffe

0800290c <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 800290c:	4770      	bx	lr

0800290e <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800290e:	4770      	bx	lr

08002910 <HAL_UARTEx_RxEventCallback>:
}
 8002910:	4770      	bx	lr
	...

08002914 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002914:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8002918:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800291c:	2a22      	cmp	r2, #34	@ 0x22
{
 800291e:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002920:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002922:	d155      	bne.n	80029d0 <UART_RxISR_8BIT+0xbc>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002926:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002928:	400b      	ands	r3, r1
 800292a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800292c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800292e:	3301      	adds	r3, #1
 8002930:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8002932:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8002936:	3b01      	subs	r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800293e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d142      	bne.n	80029ce <UART_RxISR_8BIT+0xba>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002948:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	e852 3f00 	ldrex	r3, [r2]
 800294e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002956:	6803      	ldr	r3, [r0, #0]
 8002958:	2900      	cmp	r1, #0
 800295a:	d1f5      	bne.n	8002948 <UART_RxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	f103 0208 	add.w	r2, r3, #8
 8002960:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002964:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002968:	f103 0c08 	add.w	ip, r3, #8
 800296c:	e84c 2100 	strex	r1, r2, [ip]
 8002970:	2900      	cmp	r1, #0
 8002972:	d1f3      	bne.n	800295c <UART_RxISR_8BIT+0x48>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002974:	2220      	movs	r2, #32
 8002976:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800297a:	4a18      	ldr	r2, [pc, #96]	@ (80029dc <UART_RxISR_8BIT+0xc8>)
      huart->RxISR = NULL;
 800297c:	6741      	str	r1, [r0, #116]	@ 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800297e:	4293      	cmp	r3, r2
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002980:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002982:	d105      	bne.n	8002990 <UART_RxISR_8BIT+0x7c>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002984:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8002986:	2a01      	cmp	r2, #1
 8002988:	d00e      	beq.n	80029a8 <UART_RxISR_8BIT+0x94>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800298a:	f7ff ffbf 	bl	800290c <HAL_UART_RxCpltCallback>
 800298e:	e01e      	b.n	80029ce <UART_RxISR_8BIT+0xba>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	0211      	lsls	r1, r2, #8
 8002994:	d5f6      	bpl.n	8002984 <UART_RxISR_8BIT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800299a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299e:	e843 2100 	strex	r1, r2, [r3]
 80029a2:	2900      	cmp	r1, #0
 80029a4:	d1f7      	bne.n	8002996 <UART_RxISR_8BIT+0x82>
 80029a6:	e7ed      	b.n	8002984 <UART_RxISR_8BIT+0x70>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a8:	2200      	movs	r2, #0
 80029aa:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ac:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	e843 2100 	strex	r1, r2, [r3]
 80029b8:	2900      	cmp	r1, #0
 80029ba:	d1f7      	bne.n	80029ac <UART_RxISR_8BIT+0x98>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80029bc:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029be:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80029c2:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029c4:	bf44      	itt	mi
 80029c6:	2210      	movmi	r2, #16
 80029c8:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029ca:	f7ff ffa1 	bl	8002910 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80029ce:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	f042 0208 	orr.w	r2, r2, #8
 80029d6:	619a      	str	r2, [r3, #24]
}
 80029d8:	e7f9      	b.n	80029ce <UART_RxISR_8BIT+0xba>
 80029da:	bf00      	nop
 80029dc:	40008000 	.word	0x40008000

080029e0 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029e0:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 80029e4:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029e8:	2a22      	cmp	r2, #34	@ 0x22
{
 80029ea:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80029ec:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029ee:	d152      	bne.n	8002a96 <UART_RxISR_16BIT+0xb6>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80029f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80029f2:	4011      	ands	r1, r2
 80029f4:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80029f6:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 80029fa:	6582      	str	r2, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80029fc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8002a00:	3a01      	subs	r2, #1
 8002a02:	b292      	uxth	r2, r2
 8002a04:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8002a08:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8002a0c:	b292      	uxth	r2, r2
 8002a0e:	2a00      	cmp	r2, #0
 8002a10:	d140      	bne.n	8002a94 <UART_RxISR_16BIT+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a12:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a16:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	e843 2100 	strex	r1, r2, [r3]
 8002a1e:	2900      	cmp	r1, #0
 8002a20:	d1f7      	bne.n	8002a12 <UART_RxISR_16BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a22:	f103 0208 	add.w	r2, r3, #8
 8002a26:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2e:	f103 0c08 	add.w	ip, r3, #8
 8002a32:	e84c 2100 	strex	r1, r2, [ip]
 8002a36:	2900      	cmp	r1, #0
 8002a38:	d1f3      	bne.n	8002a22 <UART_RxISR_16BIT+0x42>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a40:	4a17      	ldr	r2, [pc, #92]	@ (8002aa0 <UART_RxISR_16BIT+0xc0>)
      huart->RxISR = NULL;
 8002a42:	6741      	str	r1, [r0, #116]	@ 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a44:	4293      	cmp	r3, r2
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a46:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a48:	d105      	bne.n	8002a56 <UART_RxISR_16BIT+0x76>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a4a:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8002a4c:	2a01      	cmp	r2, #1
 8002a4e:	d00e      	beq.n	8002a6e <UART_RxISR_16BIT+0x8e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a50:	f7ff ff5c 	bl	800290c <HAL_UART_RxCpltCallback>
 8002a54:	e01e      	b.n	8002a94 <UART_RxISR_16BIT+0xb4>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	0211      	lsls	r1, r2, #8
 8002a5a:	d5f6      	bpl.n	8002a4a <UART_RxISR_16BIT+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a60:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	e843 2100 	strex	r1, r2, [r3]
 8002a68:	2900      	cmp	r1, #0
 8002a6a:	d1f7      	bne.n	8002a5c <UART_RxISR_16BIT+0x7c>
 8002a6c:	e7ed      	b.n	8002a4a <UART_RxISR_16BIT+0x6a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6e:	2200      	movs	r2, #0
 8002a70:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a76:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	e843 2100 	strex	r1, r2, [r3]
 8002a7e:	2900      	cmp	r1, #0
 8002a80:	d1f7      	bne.n	8002a72 <UART_RxISR_16BIT+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a82:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a84:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a88:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a8a:	bf44      	itt	mi
 8002a8c:	2210      	movmi	r2, #16
 8002a8e:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a90:	f7ff ff3e 	bl	8002910 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002a94:	bd08      	pop	{r3, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	f042 0208 	orr.w	r2, r2, #8
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	e7f9      	b.n	8002a94 <UART_RxISR_16BIT+0xb4>
 8002aa0:	40008000 	.word	0x40008000

08002aa4 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002aa4:	6803      	ldr	r3, [r0, #0]
{
 8002aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002aaa:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002aac:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002ab0:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ab2:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8002ab6:	f8b0 7060 	ldrh.w	r7, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aba:	2a22      	cmp	r2, #34	@ 0x22
{
 8002abc:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002abe:	f040 80b5 	bne.w	8002c2c <UART_RxISR_8BIT_FIFOEN+0x188>
  {
    nb_rx_data = huart->NbRxDataToProcess;
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002ac2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 808b 	beq.w	8002be2 <UART_RxISR_8BIT_FIFOEN+0x13e>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	f04f 0900 	mov.w	r9, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ad0:	f006 0601 	and.w	r6, r6, #1
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ad4:	f04f 0a04 	mov.w	sl, #4
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002ad8:	06ab      	lsls	r3, r5, #26
 8002ada:	f140 8082 	bpl.w	8002be2 <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ade:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ae0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ae4:	403b      	ands	r3, r7
 8002ae6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8002ae8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002aea:	3301      	adds	r3, #1
 8002aec:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8002aee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002afe:	0768      	lsls	r0, r5, #29
 8002b00:	d02a      	beq.n	8002b58 <UART_RxISR_8BIT_FIFOEN+0xb4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b02:	07e9      	lsls	r1, r5, #31
 8002b04:	d50a      	bpl.n	8002b1c <UART_RxISR_8BIT_FIFOEN+0x78>
 8002b06:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8002b0a:	d007      	beq.n	8002b1c <UART_RxISR_8BIT_FIFOEN+0x78>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b10:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b1c:	07aa      	lsls	r2, r5, #30
 8002b1e:	d508      	bpl.n	8002b32 <UART_RxISR_8BIT_FIFOEN+0x8e>
 8002b20:	b13e      	cbz	r6, 8002b32 <UART_RxISR_8BIT_FIFOEN+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b22:	2202      	movs	r2, #2
 8002b24:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b26:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8002b2a:	f042 0204 	orr.w	r2, r2, #4
 8002b2e:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b32:	0768      	lsls	r0, r5, #29
 8002b34:	d508      	bpl.n	8002b48 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8002b36:	b13e      	cbz	r6, 8002b48 <UART_RxISR_8BIT_FIFOEN+0xa4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b38:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b3c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b48:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8002b4c:	b123      	cbz	r3, 8002b58 <UART_RxISR_8BIT_FIFOEN+0xb4>
          HAL_UART_ErrorCallback(huart);
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7ff fedd 	bl	800290e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b54:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8002b58:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ba      	bne.n	8002ad8 <UART_RxISR_8BIT_FIFOEN+0x34>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b62:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	e852 3f00 	ldrex	r3, [r2]
 8002b68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	2900      	cmp	r1, #0
 8002b74:	d1f5      	bne.n	8002b62 <UART_RxISR_8BIT_FIFOEN+0xbe>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b76:	4830      	ldr	r0, [pc, #192]	@ (8002c38 <UART_RxISR_8BIT_FIFOEN+0x194>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	f103 0208 	add.w	r2, r3, #8
 8002b7c:	e852 2f00 	ldrex	r2, [r2]
 8002b80:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	f103 0508 	add.w	r5, r3, #8
 8002b86:	e845 2100 	strex	r1, r2, [r5]
 8002b8a:	2900      	cmp	r1, #0
 8002b8c:	d1f4      	bne.n	8002b78 <UART_RxISR_8BIT_FIFOEN+0xd4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b94:	4a29      	ldr	r2, [pc, #164]	@ (8002c3c <UART_RxISR_8BIT_FIFOEN+0x198>)
        huart->RxISR = NULL;
 8002b96:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b98:	4293      	cmp	r3, r2
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b9a:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b9c:	d00a      	beq.n	8002bb4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	0211      	lsls	r1, r2, #8
 8002ba2:	d507      	bpl.n	8002bb4 <UART_RxISR_8BIT_FIFOEN+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	e853 2f00 	ldrex	r2, [r3]
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ba8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bac:	e843 2100 	strex	r1, r2, [r3]
 8002bb0:	2900      	cmp	r1, #0
 8002bb2:	d1f7      	bne.n	8002ba4 <UART_RxISR_8BIT_FIFOEN+0x100>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8002bb6:	2a01      	cmp	r2, #1
 8002bb8:	d134      	bne.n	8002c24 <UART_RxISR_8BIT_FIFOEN+0x180>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bba:	2200      	movs	r2, #0
 8002bbc:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbe:	e853 2f00 	ldrex	r2, [r3]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	e843 2100 	strex	r1, r2, [r3]
 8002bca:	2900      	cmp	r1, #0
 8002bcc:	d1f7      	bne.n	8002bbe <UART_RxISR_8BIT_FIFOEN+0x11a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002bce:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bd0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002bd4:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bd6:	bf44      	itt	mi
 8002bd8:	2210      	movmi	r2, #16
 8002bda:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff fe97 	bl	8002910 <HAL_UARTEx_RxEventCallback>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002be2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8002be6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002be8:	b1d3      	cbz	r3, 8002c20 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8002bea:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d916      	bls.n	8002c20 <UART_RxISR_8BIT_FIFOEN+0x17c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002bf2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	f102 0308 	add.w	r3, r2, #8
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c00:	3208      	adds	r2, #8
 8002c02:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	2900      	cmp	r1, #0
 8002c0a:	d1f2      	bne.n	8002bf2 <UART_RxISR_8BIT_FIFOEN+0x14e>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8002c0e:	6763      	str	r3, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002c14:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c18:	e842 3100 	strex	r1, r3, [r2]
 8002c1c:	2900      	cmp	r1, #0
 8002c1e:	d1f7      	bne.n	8002c10 <UART_RxISR_8BIT_FIFOEN+0x16c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          HAL_UART_RxCpltCallback(huart);
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff fe71 	bl	800290c <HAL_UART_RxCpltCallback>
 8002c2a:	e7da      	b.n	8002be2 <UART_RxISR_8BIT_FIFOEN+0x13e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	f042 0208 	orr.w	r2, r2, #8
 8002c32:	619a      	str	r2, [r3, #24]
}
 8002c34:	e7f4      	b.n	8002c20 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8002c36:	bf00      	nop
 8002c38:	effffffe 	.word	0xeffffffe
 8002c3c:	40008000 	.word	0x40008000
 8002c40:	08002915 	.word	0x08002915

08002c44 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002c44:	6803      	ldr	r3, [r0, #0]
{
 8002c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002c4a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002c4c:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002c50:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c52:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8002c56:	f8b0 7060 	ldrh.w	r7, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c5a:	2a22      	cmp	r2, #34	@ 0x22
{
 8002c5c:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c5e:	f040 80b2 	bne.w	8002dc6 <UART_RxISR_16BIT_FIFOEN+0x182>
  {
    nb_rx_data = huart->NbRxDataToProcess;
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002c62:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8088 	beq.w	8002d7c <UART_RxISR_16BIT_FIFOEN+0x138>
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	f04f 0900 	mov.w	r9, #0
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c70:	f006 0601 	and.w	r6, r6, #1
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c74:	f04f 0a04 	mov.w	sl, #4
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002c78:	06ab      	lsls	r3, r5, #26
 8002c7a:	d57f      	bpl.n	8002d7c <UART_RxISR_16BIT_FIFOEN+0x138>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c7c:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002c7e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8002c82:	4039      	ands	r1, r7
 8002c84:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8002c88:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8002c8a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	b292      	uxth	r2, r2
 8002c92:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8002c96:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002c98:	0768      	lsls	r0, r5, #29
 8002c9a:	d02a      	beq.n	8002cf2 <UART_RxISR_16BIT_FIFOEN+0xae>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c9c:	07e9      	lsls	r1, r5, #31
 8002c9e:	d50a      	bpl.n	8002cb6 <UART_RxISR_16BIT_FIFOEN+0x72>
 8002ca0:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8002ca4:	d007      	beq.n	8002cb6 <UART_RxISR_16BIT_FIFOEN+0x72>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002caa:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cb6:	07aa      	lsls	r2, r5, #30
 8002cb8:	d508      	bpl.n	8002ccc <UART_RxISR_16BIT_FIFOEN+0x88>
 8002cba:	b13e      	cbz	r6, 8002ccc <UART_RxISR_16BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cc0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8002cc4:	f042 0204 	orr.w	r2, r2, #4
 8002cc8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ccc:	0768      	lsls	r0, r5, #29
 8002cce:	d508      	bpl.n	8002ce2 <UART_RxISR_16BIT_FIFOEN+0x9e>
 8002cd0:	b13e      	cbz	r6, 8002ce2 <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cd2:	f8c3 a020 	str.w	sl, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cd6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ce2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8002ce6:	b123      	cbz	r3, 8002cf2 <UART_RxISR_16BIT_FIFOEN+0xae>
          HAL_UART_ErrorCallback(huart);
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7ff fe10 	bl	800290e <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cee:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8002cf2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1bd      	bne.n	8002c78 <UART_RxISR_16BIT_FIFOEN+0x34>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cfc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfe:	e852 3f00 	ldrex	r3, [r2]
 8002d02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	2900      	cmp	r1, #0
 8002d0e:	d1f5      	bne.n	8002cfc <UART_RxISR_16BIT_FIFOEN+0xb8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d10:	482f      	ldr	r0, [pc, #188]	@ (8002dd0 <UART_RxISR_16BIT_FIFOEN+0x18c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d12:	f103 0208 	add.w	r2, r3, #8
 8002d16:	e852 2f00 	ldrex	r2, [r2]
 8002d1a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	f103 0508 	add.w	r5, r3, #8
 8002d20:	e845 2100 	strex	r1, r2, [r5]
 8002d24:	2900      	cmp	r1, #0
 8002d26:	d1f4      	bne.n	8002d12 <UART_RxISR_16BIT_FIFOEN+0xce>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d2e:	4a29      	ldr	r2, [pc, #164]	@ (8002dd4 <UART_RxISR_16BIT_FIFOEN+0x190>)
        huart->RxISR = NULL;
 8002d30:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d32:	4293      	cmp	r3, r2
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d34:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d36:	d00a      	beq.n	8002d4e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	0211      	lsls	r1, r2, #8
 8002d3c:	d507      	bpl.n	8002d4e <UART_RxISR_16BIT_FIFOEN+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	e853 2f00 	ldrex	r2, [r3]
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d42:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	e843 2100 	strex	r1, r2, [r3]
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	d1f7      	bne.n	8002d3e <UART_RxISR_16BIT_FIFOEN+0xfa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d4e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8002d50:	2a01      	cmp	r2, #1
 8002d52:	d134      	bne.n	8002dbe <UART_RxISR_16BIT_FIFOEN+0x17a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d54:	2200      	movs	r2, #0
 8002d56:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	e853 2f00 	ldrex	r2, [r3]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	e843 2100 	strex	r1, r2, [r3]
 8002d64:	2900      	cmp	r1, #0
 8002d66:	d1f7      	bne.n	8002d58 <UART_RxISR_16BIT_FIFOEN+0x114>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002d68:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d6a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002d6e:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d70:	bf44      	itt	mi
 8002d72:	2210      	movmi	r2, #16
 8002d74:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff fdca 	bl	8002910 <HAL_UARTEx_RxEventCallback>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002d7c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8002d80:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002d82:	b1d3      	cbz	r3, 8002dba <UART_RxISR_16BIT_FIFOEN+0x176>
 8002d84:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d916      	bls.n	8002dba <UART_RxISR_16BIT_FIFOEN+0x176>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002d8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8e:	f102 0308 	add.w	r3, r2, #8
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	3208      	adds	r2, #8
 8002d9c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	2900      	cmp	r1, #0
 8002da4:	d1f2      	bne.n	8002d8c <UART_RxISR_16BIT_FIFOEN+0x148>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8002da6:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <UART_RxISR_16BIT_FIFOEN+0x194>)
 8002da8:	6763      	str	r3, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	e852 3f00 	ldrex	r3, [r2]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002dae:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	e842 3100 	strex	r1, r3, [r2]
 8002db6:	2900      	cmp	r1, #0
 8002db8:	d1f7      	bne.n	8002daa <UART_RxISR_16BIT_FIFOEN+0x166>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          HAL_UART_RxCpltCallback(huart);
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff fda4 	bl	800290c <HAL_UART_RxCpltCallback>
 8002dc4:	e7da      	b.n	8002d7c <UART_RxISR_16BIT_FIFOEN+0x138>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	f042 0208 	orr.w	r2, r2, #8
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	e7f4      	b.n	8002dba <UART_RxISR_16BIT_FIFOEN+0x176>
 8002dd0:	effffffe 	.word	0xeffffffe
 8002dd4:	40008000 	.word	0x40008000
 8002dd8:	080029e1 	.word	0x080029e1

08002ddc <UART_SetConfig>:
{
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de0:	69c0      	ldr	r0, [r0, #28]
 8002de2:	6921      	ldr	r1, [r4, #16]
 8002de4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002de6:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de8:	430a      	orrs	r2, r1
 8002dea:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dec:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002df0:	497c      	ldr	r1, [pc, #496]	@ (8002fe4 <UART_SetConfig+0x208>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002df2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002df4:	4029      	ands	r1, r5
 8002df6:	430a      	orrs	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68e1      	ldr	r1, [r4, #12]
 8002dfe:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e06:	4a78      	ldr	r2, [pc, #480]	@ (8002fe8 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e08:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e0a:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8002e0c:	bf1c      	itt	ne
 8002e0e:	6a22      	ldrne	r2, [r4, #32]
 8002e10:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8002e18:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e22:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002e24:	f022 020f 	bic.w	r2, r2, #15
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2c:	4a6f      	ldr	r2, [pc, #444]	@ (8002fec <UART_SetConfig+0x210>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d130      	bne.n	8002e94 <UART_SetConfig+0xb8>
 8002e32:	4b6f      	ldr	r3, [pc, #444]	@ (8002ff0 <UART_SetConfig+0x214>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f000 80cc 	beq.w	8002fda <UART_SetConfig+0x1fe>
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	f000 80b9 	beq.w	8002fba <UART_SetConfig+0x1de>
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	f000 80bd 	beq.w	8002fc8 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e4e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002e52:	f040 80bf 	bne.w	8002fd4 <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e56:	f7ff f9bb 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d066      	beq.n	8002f2c <UART_SetConfig+0x150>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e5e:	6861      	ldr	r1, [r4, #4]
 8002e60:	4b64      	ldr	r3, [pc, #400]	@ (8002ff4 <UART_SetConfig+0x218>)
 8002e62:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002e64:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002e68:	fbb0 f2f2 	udiv	r2, r0, r2
 8002e6c:	084b      	lsrs	r3, r1, #1
 8002e6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e72:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e76:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e7a:	f1a3 0110 	sub.w	r1, r3, #16
 8002e7e:	4291      	cmp	r1, r2
 8002e80:	d81f      	bhi.n	8002ec2 <UART_SetConfig+0xe6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e82:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8002e86:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e88:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e8a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60cb      	str	r3, [r1, #12]
 8002e92:	e04b      	b.n	8002f2c <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e94:	4a58      	ldr	r2, [pc, #352]	@ (8002ff8 <UART_SetConfig+0x21c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d115      	bne.n	8002ec6 <UART_SetConfig+0xea>
 8002e9a:	4b55      	ldr	r3, [pc, #340]	@ (8002ff0 <UART_SetConfig+0x214>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	f000 8098 	beq.w	8002fda <UART_SetConfig+0x1fe>
 8002eaa:	d808      	bhi.n	8002ebe <UART_SetConfig+0xe2>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f040 808b 	bne.w	8002fc8 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002eb6:	d169      	bne.n	8002f8c <UART_SetConfig+0x1b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f7ff f978 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
        break;
 8002ebc:	e7cd      	b.n	8002e5a <UART_SetConfig+0x7e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d07b      	beq.n	8002fba <UART_SetConfig+0x1de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	e033      	b.n	8002f2e <UART_SetConfig+0x152>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec6:	4a4d      	ldr	r2, [pc, #308]	@ (8002ffc <UART_SetConfig+0x220>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d109      	bne.n	8002ee0 <UART_SetConfig+0x104>
 8002ecc:	4b48      	ldr	r3, [pc, #288]	@ (8002ff0 <UART_SetConfig+0x214>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d07f      	beq.n	8002fda <UART_SetConfig+0x1fe>
 8002eda:	d9e7      	bls.n	8002eac <UART_SetConfig+0xd0>
 8002edc:	2b30      	cmp	r3, #48	@ 0x30
 8002ede:	e7ef      	b.n	8002ec0 <UART_SetConfig+0xe4>
 8002ee0:	4a47      	ldr	r2, [pc, #284]	@ (8003000 <UART_SetConfig+0x224>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d109      	bne.n	8002efa <UART_SetConfig+0x11e>
 8002ee6:	4b42      	ldr	r3, [pc, #264]	@ (8002ff0 <UART_SetConfig+0x214>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ef0:	2b80      	cmp	r3, #128	@ 0x80
 8002ef2:	d072      	beq.n	8002fda <UART_SetConfig+0x1fe>
 8002ef4:	d9da      	bls.n	8002eac <UART_SetConfig+0xd0>
 8002ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ef8:	e7e2      	b.n	8002ec0 <UART_SetConfig+0xe4>
 8002efa:	4a3b      	ldr	r2, [pc, #236]	@ (8002fe8 <UART_SetConfig+0x20c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d1e0      	bne.n	8002ec2 <UART_SetConfig+0xe6>
 8002f00:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff0 <UART_SetConfig+0x214>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f0e:	d015      	beq.n	8002f3c <UART_SetConfig+0x160>
 8002f10:	d803      	bhi.n	8002f1a <UART_SetConfig+0x13e>
 8002f12:	b943      	cbnz	r3, 8002f26 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f14:	f7ff f94a 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
        break;
 8002f18:	e007      	b.n	8002f2a <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f1e:	d1d0      	bne.n	8002ec2 <UART_SetConfig+0xe6>
 8002f20:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002f24:	e00b      	b.n	8002f3e <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f26:	f7ff f817 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8002f2a:	b940      	cbnz	r0, 8002f3e <UART_SetConfig+0x162>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2c:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8002f2e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002f32:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8002f34:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002f36:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002f3c:	4831      	ldr	r0, [pc, #196]	@ (8003004 <UART_SetConfig+0x228>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f3e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f40:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff4 <UART_SetConfig+0x218>)
 8002f42:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f44:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f48:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002f4c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f50:	4299      	cmp	r1, r3
 8002f52:	d8b6      	bhi.n	8002ec2 <UART_SetConfig+0xe6>
 8002f54:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8002f58:	d8b3      	bhi.n	8002ec2 <UART_SetConfig+0xe6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7fd f95f 	bl	8000220 <__aeabi_uldivmod>
 8002f62:	0209      	lsls	r1, r1, #8
 8002f64:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8002f68:	086b      	lsrs	r3, r5, #1
 8002f6a:	0200      	lsls	r0, r0, #8
 8002f6c:	18c0      	adds	r0, r0, r3
 8002f6e:	462a      	mov	r2, r5
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	f141 0100 	adc.w	r1, r1, #0
 8002f78:	f7fd f952 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f7c:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <UART_SetConfig+0x22c>)
 8002f7e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d89d      	bhi.n	8002ec2 <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	60d8      	str	r0, [r3, #12]
 8002f8a:	e7cf      	b.n	8002f2c <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7ff f90e 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f90:	2800      	cmp	r0, #0
 8002f92:	d0cb      	beq.n	8002f2c <UART_SetConfig+0x150>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f94:	6863      	ldr	r3, [r4, #4]
 8002f96:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002f98:	4a16      	ldr	r2, [pc, #88]	@ (8002ff4 <UART_SetConfig+0x218>)
 8002f9a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002f9e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002fa2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002fa6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002faa:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8002fae:	f1a0 0210 	sub.w	r2, r0, #16
 8002fb2:	e7e6      	b.n	8002f82 <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb4:	f7fe ffd0 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
        break;
 8002fb8:	e7ea      	b.n	8002f90 <UART_SetConfig+0x1b4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fba:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002fbe:	f43f af4e 	beq.w	8002e5e <UART_SetConfig+0x82>
        pclk = (uint32_t) LSE_VALUE;
 8002fc2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002fc6:	e7e5      	b.n	8002f94 <UART_SetConfig+0x1b8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002fcc:	d1f2      	bne.n	8002fb4 <UART_SetConfig+0x1d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fce:	f7fe ffc3 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
        break;
 8002fd2:	e742      	b.n	8002e5a <UART_SetConfig+0x7e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fd4:	f7ff f8fc 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
        break;
 8002fd8:	e7da      	b.n	8002f90 <UART_SetConfig+0x1b4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fda:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002fde:	4809      	ldr	r0, [pc, #36]	@ (8003004 <UART_SetConfig+0x228>)
 8002fe0:	d1d8      	bne.n	8002f94 <UART_SetConfig+0x1b8>
 8002fe2:	e73c      	b.n	8002e5e <UART_SetConfig+0x82>
 8002fe4:	cfff69f3 	.word	0xcfff69f3
 8002fe8:	40008000 	.word	0x40008000
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08004fa4 	.word	0x08004fa4
 8002ff8:	40004400 	.word	0x40004400
 8002ffc:	40004800 	.word	0x40004800
 8003000:	40004c00 	.word	0x40004c00
 8003004:	00f42400 	.word	0x00f42400
 8003008:	000ffcff 	.word	0x000ffcff

0800300c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800300c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800300e:	071a      	lsls	r2, r3, #28
{
 8003010:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003012:	d506      	bpl.n	8003022 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003014:	6801      	ldr	r1, [r0, #0]
 8003016:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8003018:	684a      	ldr	r2, [r1, #4]
 800301a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800301e:	4322      	orrs	r2, r4
 8003020:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003022:	07dc      	lsls	r4, r3, #31
 8003024:	d506      	bpl.n	8003034 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003026:	6801      	ldr	r1, [r0, #0]
 8003028:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800302a:	684a      	ldr	r2, [r1, #4]
 800302c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003030:	4322      	orrs	r2, r4
 8003032:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003034:	0799      	lsls	r1, r3, #30
 8003036:	d506      	bpl.n	8003046 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003038:	6801      	ldr	r1, [r0, #0]
 800303a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800303c:	684a      	ldr	r2, [r1, #4]
 800303e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003042:	4322      	orrs	r2, r4
 8003044:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003046:	075a      	lsls	r2, r3, #29
 8003048:	d506      	bpl.n	8003058 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800304a:	6801      	ldr	r1, [r0, #0]
 800304c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800304e:	684a      	ldr	r2, [r1, #4]
 8003050:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003054:	4322      	orrs	r2, r4
 8003056:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003058:	06dc      	lsls	r4, r3, #27
 800305a:	d506      	bpl.n	800306a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800305c:	6801      	ldr	r1, [r0, #0]
 800305e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8003060:	688a      	ldr	r2, [r1, #8]
 8003062:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003066:	4322      	orrs	r2, r4
 8003068:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306a:	0699      	lsls	r1, r3, #26
 800306c:	d506      	bpl.n	800307c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800306e:	6801      	ldr	r1, [r0, #0]
 8003070:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8003072:	688a      	ldr	r2, [r1, #8]
 8003074:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003078:	4322      	orrs	r2, r4
 800307a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800307c:	065a      	lsls	r2, r3, #25
 800307e:	d50f      	bpl.n	80030a0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003080:	6801      	ldr	r1, [r0, #0]
 8003082:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003084:	684a      	ldr	r2, [r1, #4]
 8003086:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800308a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800308c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003090:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003092:	d105      	bne.n	80030a0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003094:	684a      	ldr	r2, [r1, #4]
 8003096:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8003098:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800309c:	4322      	orrs	r2, r4
 800309e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	d506      	bpl.n	80030b2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030a4:	6802      	ldr	r2, [r0, #0]
 80030a6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80030a8:	6853      	ldr	r3, [r2, #4]
 80030aa:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80030ae:	430b      	orrs	r3, r1
 80030b0:	6053      	str	r3, [r2, #4]
}
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <UART_WaitOnFlagUntilTimeout>:
{
 80030b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030bc:	4604      	mov	r4, r0
 80030be:	460d      	mov	r5, r1
 80030c0:	4617      	mov	r7, r2
 80030c2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c4:	6822      	ldr	r2, [r4, #0]
 80030c6:	69d3      	ldr	r3, [r2, #28]
 80030c8:	ea35 0303 	bics.w	r3, r5, r3
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	42bb      	cmp	r3, r7
 80030d4:	d001      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80030d6:	2000      	movs	r0, #0
 80030d8:	e022      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80030da:	f1b9 3fff 	cmp.w	r9, #4294967295
 80030de:	d0f2      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e0:	f7fd fee0 	bl	8000ea4 <HAL_GetTick>
 80030e4:	eba0 0008 	sub.w	r0, r0, r8
 80030e8:	4548      	cmp	r0, r9
 80030ea:	d829      	bhi.n	8003140 <UART_WaitOnFlagUntilTimeout+0x8c>
 80030ec:	f1b9 0f00 	cmp.w	r9, #0
 80030f0:	d026      	beq.n	8003140 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030f2:	6821      	ldr	r1, [r4, #0]
 80030f4:	680b      	ldr	r3, [r1, #0]
 80030f6:	075a      	lsls	r2, r3, #29
 80030f8:	d5e4      	bpl.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x10>
 80030fa:	2d80      	cmp	r5, #128	@ 0x80
 80030fc:	d0e2      	beq.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x10>
 80030fe:	2d40      	cmp	r5, #64	@ 0x40
 8003100:	d0e0      	beq.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003102:	69ce      	ldr	r6, [r1, #28]
 8003104:	f016 0608 	ands.w	r6, r6, #8
 8003108:	d00c      	beq.n	8003124 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800310a:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800310c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800310e:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8003110:	f7ff fbd0 	bl	80028b4 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003114:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003116:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800311a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
          return HAL_ERROR;
 800311e:	2001      	movs	r0, #1
}
 8003120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003124:	69cb      	ldr	r3, [r1, #28]
 8003126:	051b      	lsls	r3, r3, #20
 8003128:	d5cc      	bpl.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800312a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800312e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8003130:	4620      	mov	r0, r4
 8003132:	f7ff fbbf 	bl	80028b4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003136:	2320      	movs	r3, #32
 8003138:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800313c:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
        return HAL_TIMEOUT;
 8003140:	2003      	movs	r0, #3
 8003142:	e7ed      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0x6c>

08003144 <UART_CheckIdleState>:
{
 8003144:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003146:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	2600      	movs	r6, #0
 800314a:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800314e:	f7fd fea9 	bl	8000ea4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003158:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800315a:	d51c      	bpl.n	8003196 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	4632      	mov	r2, r6
 8003164:	4603      	mov	r3, r0
 8003166:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800316a:	4620      	mov	r0, r4
 800316c:	f7ff ffa2 	bl	80030b4 <UART_WaitOnFlagUntilTimeout>
 8003170:	b188      	cbz	r0, 8003196 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003172:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	e852 3f00 	ldrex	r3, [r2]
 8003178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	e842 3100 	strex	r1, r3, [r2]
 8003180:	2900      	cmp	r1, #0
 8003182:	d1f6      	bne.n	8003172 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8003184:	2320      	movs	r3, #32
 8003186:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800318a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800318c:	2300      	movs	r3, #0
 800318e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8003192:	b002      	add	sp, #8
 8003194:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	075b      	lsls	r3, r3, #29
 800319c:	d524      	bpl.n	80031e8 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800319e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2200      	movs	r2, #0
 80031a6:	462b      	mov	r3, r5
 80031a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031ac:	4620      	mov	r0, r4
 80031ae:	f7ff ff81 	bl	80030b4 <UART_WaitOnFlagUntilTimeout>
 80031b2:	b1c8      	cbz	r0, 80031e8 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	e852 3f00 	ldrex	r3, [r2]
 80031ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80031c2:	6822      	ldr	r2, [r4, #0]
 80031c4:	2900      	cmp	r1, #0
 80031c6:	d1f5      	bne.n	80031b4 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	f102 0308 	add.w	r3, r2, #8
 80031cc:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	f102 0008 	add.w	r0, r2, #8
 80031d8:	e840 3100 	strex	r1, r3, [r0]
 80031dc:	2900      	cmp	r1, #0
 80031de:	d1f3      	bne.n	80031c8 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 80031e0:	2320      	movs	r3, #32
 80031e2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80031e6:	e7d0      	b.n	800318a <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ea:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80031ec:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80031f0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f4:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031f6:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80031f8:	e7c8      	b.n	800318c <UART_CheckIdleState+0x48>

080031fa <HAL_UART_Init>:
{
 80031fa:	b510      	push	{r4, lr}
  if (huart == NULL)
 80031fc:	4604      	mov	r4, r0
 80031fe:	b350      	cbz	r0, 8003256 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003200:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8003204:	b91b      	cbnz	r3, 800320e <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003206:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800320a:	f7fd fd7b 	bl	8000d04 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800320e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003210:	2324      	movs	r3, #36	@ 0x24
 8003212:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8003216:	6813      	ldr	r3, [r2, #0]
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800321e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003220:	b113      	cbz	r3, 8003228 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8003222:	4620      	mov	r0, r4
 8003224:	f7ff fef2 	bl	800300c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff fdd7 	bl	8002ddc <UART_SetConfig>
 800322e:	2801      	cmp	r0, #1
 8003230:	d011      	beq.n	8003256 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800323a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003242:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800324a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003252:	f7ff bf77 	b.w	8003144 <UART_CheckIdleState>
}
 8003256:	2001      	movs	r0, #1
 8003258:	bd10      	pop	{r4, pc}
	...

0800325c <UART_Start_Receive_IT>:
{
 800325c:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 800325e:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 8003260:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8003262:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxISR       = NULL;
 8003266:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8003268:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 800326c:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8003270:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8003272:	d131      	bne.n	80032d8 <UART_Start_Receive_IT+0x7c>
 8003274:	6903      	ldr	r3, [r0, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800327c:	bf18      	it	ne
 800327e:	23ff      	movne	r3, #255	@ 0xff
 8003280:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	2300      	movs	r3, #0
 8003286:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800328a:	2322      	movs	r3, #34	@ 0x22
 800328c:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003290:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	f101 0308 	add.w	r3, r1, #8
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	3108      	adds	r1, #8
 80032a0:	e841 3400 	strex	r4, r3, [r1]
   return(result);
 80032a4:	6803      	ldr	r3, [r0, #0]
 80032a6:	2c00      	cmp	r4, #0
 80032a8:	d1f2      	bne.n	8003290 <UART_Start_Receive_IT+0x34>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80032aa:	6e45      	ldr	r5, [r0, #100]	@ 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ac:	6884      	ldr	r4, [r0, #8]
 80032ae:	6901      	ldr	r1, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80032b0:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 80032b4:	d135      	bne.n	8003322 <UART_Start_Receive_IT+0xc6>
 80032b6:	f8b0 5068 	ldrh.w	r5, [r0, #104]	@ 0x68
 80032ba:	4295      	cmp	r5, r2
 80032bc:	d831      	bhi.n	8003322 <UART_Start_Receive_IT+0xc6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032be:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80032c2:	d129      	bne.n	8003318 <UART_Start_Receive_IT+0xbc>
 80032c4:	b1c1      	cbz	r1, 80032f8 <UART_Start_Receive_IT+0x9c>
 80032c6:	4a26      	ldr	r2, [pc, #152]	@ (8003360 <UART_Start_Receive_IT+0x104>)
 80032c8:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ca:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	e843 2100 	strex	r1, r2, [r3]
   return(result);
 80032d6:	e021      	b.n	800331c <UART_Start_Receive_IT+0xc0>
  UART_MASK_COMPUTATION(huart);
 80032d8:	b929      	cbnz	r1, 80032e6 <UART_Start_Receive_IT+0x8a>
 80032da:	6903      	ldr	r3, [r0, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	23ff      	moveq	r3, #255	@ 0xff
 80032e2:	237f      	movne	r3, #127	@ 0x7f
 80032e4:	e7cc      	b.n	8003280 <UART_Start_Receive_IT+0x24>
 80032e6:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80032ea:	d1c9      	bne.n	8003280 <UART_Start_Receive_IT+0x24>
 80032ec:	6903      	ldr	r3, [r0, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf0c      	ite	eq
 80032f2:	237f      	moveq	r3, #127	@ 0x7f
 80032f4:	233f      	movne	r3, #63	@ 0x3f
 80032f6:	e7c3      	b.n	8003280 <UART_Start_Receive_IT+0x24>
 80032f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003364 <UART_Start_Receive_IT+0x108>)
 80032fa:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	f103 0208 	add.w	r2, r3, #8
 8003300:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003304:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	f103 0008 	add.w	r0, r3, #8
 800330c:	e840 2100 	strex	r1, r2, [r0]
 8003310:	2900      	cmp	r1, #0
 8003312:	d1f3      	bne.n	80032fc <UART_Start_Receive_IT+0xa0>
}
 8003314:	2000      	movs	r0, #0
 8003316:	bd30      	pop	{r4, r5, pc}
 8003318:	4a11      	ldr	r2, [pc, #68]	@ (8003360 <UART_Start_Receive_IT+0x104>)
 800331a:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800331c:	2900      	cmp	r1, #0
 800331e:	d1d4      	bne.n	80032ca <UART_Start_Receive_IT+0x6e>
 8003320:	e7ec      	b.n	80032fc <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003322:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003326:	d116      	bne.n	8003356 <UART_Start_Receive_IT+0xfa>
 8003328:	b151      	cbz	r1, 8003340 <UART_Start_Receive_IT+0xe4>
 800332a:	4a0f      	ldr	r2, [pc, #60]	@ (8003368 <UART_Start_Receive_IT+0x10c>)
 800332c:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003332:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	e843 2100 	strex	r1, r2, [r3]
 800333a:	2900      	cmp	r1, #0
 800333c:	d1f7      	bne.n	800332e <UART_Start_Receive_IT+0xd2>
 800333e:	e7e9      	b.n	8003314 <UART_Start_Receive_IT+0xb8>
 8003340:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <UART_Start_Receive_IT+0x110>)
 8003342:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003348:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	e843 2100 	strex	r1, r2, [r3]
 8003350:	2900      	cmp	r1, #0
 8003352:	d1f7      	bne.n	8003344 <UART_Start_Receive_IT+0xe8>
 8003354:	e7de      	b.n	8003314 <UART_Start_Receive_IT+0xb8>
 8003356:	4a04      	ldr	r2, [pc, #16]	@ (8003368 <UART_Start_Receive_IT+0x10c>)
 8003358:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800335a:	2900      	cmp	r1, #0
 800335c:	d0f2      	beq.n	8003344 <UART_Start_Receive_IT+0xe8>
 800335e:	e7e6      	b.n	800332e <UART_Start_Receive_IT+0xd2>
 8003360:	08002aa5 	.word	0x08002aa5
 8003364:	08002c45 	.word	0x08002c45
 8003368:	08002915 	.word	0x08002915
 800336c:	080029e1 	.word	0x080029e1

08003370 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003370:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8003374:	2b20      	cmp	r3, #32
{
 8003376:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003378:	d115      	bne.n	80033a6 <HAL_UART_Receive_IT+0x36>
    if ((pData == NULL) || (Size == 0U))
 800337a:	b1b9      	cbz	r1, 80033ac <HAL_UART_Receive_IT+0x3c>
 800337c:	b1b2      	cbz	r2, 80033ac <HAL_UART_Receive_IT+0x3c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337e:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003380:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003384:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <HAL_UART_Receive_IT+0x40>)
 8003386:	429c      	cmp	r4, r3
 8003388:	d00a      	beq.n	80033a0 <HAL_UART_Receive_IT+0x30>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800338a:	6863      	ldr	r3, [r4, #4]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	d507      	bpl.n	80033a0 <HAL_UART_Receive_IT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003394:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	e844 3500 	strex	r5, r3, [r4]
 800339c:	2d00      	cmp	r5, #0
 800339e:	d1f7      	bne.n	8003390 <HAL_UART_Receive_IT+0x20>
}
 80033a0:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80033a2:	f7ff bf5b 	b.w	800325c <UART_Start_Receive_IT>
    return HAL_BUSY;
 80033a6:	2002      	movs	r0, #2
}
 80033a8:	bc30      	pop	{r4, r5}
 80033aa:	4770      	bx	lr
      return HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
 80033ae:	e7fb      	b.n	80033a8 <HAL_UART_Receive_IT+0x38>
 80033b0:	40008000 	.word	0x40008000

080033b4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033b4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 80033b6:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033b8:	b92b      	cbnz	r3, 80033c6 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80033c0:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80033c4:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033c6:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033c8:	4d09      	ldr	r5, [pc, #36]	@ (80033f0 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033ca:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80033cc:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80033ce:	4c09      	ldr	r4, [pc, #36]	@ (80033f4 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80033d0:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033d2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033d6:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80033d8:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80033e0:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033e4:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 80033e6:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80033ee:	e7e7      	b.n	80033c0 <UARTEx_SetNbDataToProcess+0xc>
 80033f0:	08004fc4 	.word	0x08004fc4
 80033f4:	08004fbc 	.word	0x08004fbc

080033f8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80033f8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d014      	beq.n	800342a <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003400:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003402:	2324      	movs	r3, #36	@ 0x24
 8003404:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003408:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800340a:	6813      	ldr	r3, [r2, #0]
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003412:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003416:	2300      	movs	r3, #0
 8003418:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800341a:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800341c:	2220      	movs	r2, #32
 800341e:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8003422:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8003426:	4618      	mov	r0, r3
 8003428:	4770      	bx	lr
  __HAL_LOCK(huart);
 800342a:	2002      	movs	r0, #2
}
 800342c:	4770      	bx	lr

0800342e <HAL_UARTEx_SetTxFifoThreshold>:
{
 800342e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003430:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8003434:	2b01      	cmp	r3, #1
{
 8003436:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003438:	d017      	beq.n	800346a <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800343a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	2324      	movs	r3, #36	@ 0x24
 800343e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003442:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800344c:	68ab      	ldr	r3, [r5, #8]
 800344e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8003452:	4319      	orrs	r1, r3
 8003454:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003456:	f7ff ffad 	bl	80033b4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800345a:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800345c:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800345e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8003462:	2000      	movs	r0, #0
 8003464:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8003468:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800346a:	2002      	movs	r0, #2
 800346c:	e7fc      	b.n	8003468 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0800346e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800346e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003470:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8003474:	2b01      	cmp	r3, #1
{
 8003476:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8003478:	d017      	beq.n	80034aa <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800347a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	2324      	movs	r3, #36	@ 0x24
 800347e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003482:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800348c:	68ab      	ldr	r3, [r5, #8]
 800348e:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8003492:	4319      	orrs	r1, r3
 8003494:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003496:	f7ff ff8d 	bl	80033b4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800349a:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800349c:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800349e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80034a2:	2000      	movs	r0, #0
 80034a4:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80034aa:	2002      	movs	r0, #2
 80034ac:	e7fc      	b.n	80034a8 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

080034ae <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80034ae:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80034b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80034b4:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80034b6:	f001 f81f 	bl	80044f8 <xTaskGetSchedulerState>
 80034ba:	2801      	cmp	r0, #1
 80034bc:	d003      	beq.n	80034c6 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80034be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80034c2:	f001 bb27 	b.w	8004b14 <xPortSysTickHandler>
}
 80034c6:	bd08      	pop	{r3, pc}

080034c8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034c8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80034cc:	b92b      	cbnz	r3, 80034da <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80034ce:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <osKernelInitialize+0x20>)
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	b928      	cbnz	r0, 80034e0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034d8:	4770      	bx	lr
    stat = osErrorISR;
 80034da:	f06f 0005 	mvn.w	r0, #5
 80034de:	4770      	bx	lr
    } else {
      stat = osError;
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000ab8 	.word	0x20000ab8

080034ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034ec:	b510      	push	{r4, lr}
 80034ee:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80034f2:	b95c      	cbnz	r4, 800350c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80034f4:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <osKernelStart+0x2c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	2a01      	cmp	r2, #1
 80034fa:	d10a      	bne.n	8003512 <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fc:	4a07      	ldr	r2, [pc, #28]	@ (800351c <osKernelStart+0x30>)
 80034fe:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003500:	2202      	movs	r2, #2
 8003502:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003504:	f000 fd76 	bl	8003ff4 <vTaskStartScheduler>
      stat = osOK;
 8003508:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800350a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800350c:	f06f 0005 	mvn.w	r0, #5
 8003510:	e7fb      	b.n	800350a <osKernelStart+0x1e>
      stat = osError;
 8003512:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8003516:	e7f8      	b.n	800350a <osKernelStart+0x1e>
 8003518:	20000ab8 	.word	0x20000ab8
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003522:	b087      	sub	sp, #28
 8003524:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003526:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003528:	460b      	mov	r3, r1
  hTask = NULL;
 800352a:	9205      	str	r2, [sp, #20]
 800352c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003530:	b9fa      	cbnz	r2, 8003572 <osThreadNew+0x52>
 8003532:	b1f0      	cbz	r0, 8003572 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8003534:	b354      	cbz	r4, 800358c <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003536:	69a5      	ldr	r5, [r4, #24]
 8003538:	b125      	cbz	r5, 8003544 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800353a:	1e69      	subs	r1, r5, #1
 800353c:	2937      	cmp	r1, #55	@ 0x37
 800353e:	d902      	bls.n	8003546 <osThreadNew+0x26>
        return (NULL);
 8003540:	2000      	movs	r0, #0
 8003542:	e017      	b.n	8003574 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8003544:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003546:	6862      	ldr	r2, [r4, #4]
 8003548:	07d2      	lsls	r2, r2, #31
 800354a:	d4f9      	bmi.n	8003540 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800354c:	6966      	ldr	r6, [r4, #20]
 800354e:	b19e      	cbz	r6, 8003578 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003550:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003552:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 8003556:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003558:	b187      	cbz	r7, 800357c <osThreadNew+0x5c>
 800355a:	f1bc 0f5b 	cmp.w	ip, #91	@ 0x5b
 800355e:	d908      	bls.n	8003572 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003560:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003562:	b134      	cbz	r4, 8003572 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003564:	b12e      	cbz	r6, 8003572 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003566:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800356a:	9500      	str	r5, [sp, #0]
 800356c:	f000 fcdb 	bl	8003f26 <xTaskCreateStatic>
 8003570:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003572:	9805      	ldr	r0, [sp, #20]
}
 8003574:	b007      	add	sp, #28
 8003576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8003578:	2280      	movs	r2, #128	@ 0x80
 800357a:	e7ea      	b.n	8003552 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800357c:	f1bc 0f00 	cmp.w	ip, #0
 8003580:	d1f7      	bne.n	8003572 <osThreadNew+0x52>
 8003582:	6924      	ldr	r4, [r4, #16]
 8003584:	2c00      	cmp	r4, #0
 8003586:	d1f4      	bne.n	8003572 <osThreadNew+0x52>
 8003588:	460c      	mov	r4, r1
 800358a:	e001      	b.n	8003590 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800358c:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800358e:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003590:	a905      	add	r1, sp, #20
 8003592:	e9cd 5100 	strd	r5, r1, [sp]
 8003596:	b292      	uxth	r2, r2
 8003598:	4621      	mov	r1, r4
 800359a:	f000 fcfc 	bl	8003f96 <xTaskCreate>
 800359e:	2801      	cmp	r0, #1
            hTask = NULL;
 80035a0:	bf1c      	itt	ne
 80035a2:	2300      	movne	r3, #0
 80035a4:	9305      	strne	r3, [sp, #20]
 80035a6:	e7e4      	b.n	8003572 <osThreadNew+0x52>

080035a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80035a8:	b508      	push	{r3, lr}
 80035aa:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ae:	b922      	cbnz	r2, 80035ba <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80035b0:	b108      	cbz	r0, 80035b6 <osDelay+0xe>
      vTaskDelay(ticks);
 80035b2:	f000 fe7d 	bl	80042b0 <vTaskDelay>
    stat = osOK;
 80035b6:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80035b8:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80035ba:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 80035be:	e7fb      	b.n	80035b8 <osDelay+0x10>

080035c0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035c0:	4b03      	ldr	r3, [pc, #12]	@ (80035d0 <vApplicationGetIdleTaskMemory+0x10>)
 80035c2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035c4:	4b03      	ldr	r3, [pc, #12]	@ (80035d4 <vApplicationGetIdleTaskMemory+0x14>)
 80035c6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	6013      	str	r3, [r2, #0]
}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000a5c 	.word	0x20000a5c
 80035d4:	2000085c 	.word	0x2000085c

080035d8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035d8:	4b03      	ldr	r3, [pc, #12]	@ (80035e8 <vApplicationGetTimerTaskMemory+0x10>)
 80035da:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035dc:	4b03      	ldr	r3, [pc, #12]	@ (80035ec <vApplicationGetTimerTaskMemory+0x14>)
 80035de:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035e4:	6013      	str	r3, [r2, #0]
}
 80035e6:	4770      	bx	lr
 80035e8:	20000800 	.word	0x20000800
 80035ec:	20000400 	.word	0x20000400

080035f0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035f4:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035fc:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035fe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003604:	4770      	bx	lr

08003606 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003606:	2300      	movs	r3, #0
 8003608:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800360a:	4770      	bx	lr

0800360c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800360c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800360e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003614:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003616:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003618:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800361a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800361c:	3301      	adds	r3, #1
 800361e:	6003      	str	r3, [r0, #0]
}
 8003620:	4770      	bx	lr

08003622 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003622:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003624:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003626:	1c63      	adds	r3, r4, #1
 8003628:	d10a      	bne.n	8003640 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800362a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003630:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003632:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003634:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003636:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8003638:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800363a:	3301      	adds	r3, #1
 800363c:	6003      	str	r3, [r0, #0]
}
 800363e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003640:	f100 0208 	add.w	r2, r0, #8
 8003644:	4613      	mov	r3, r2
 8003646:	6852      	ldr	r2, [r2, #4]
 8003648:	6815      	ldr	r5, [r2, #0]
 800364a:	42a5      	cmp	r5, r4
 800364c:	d9fa      	bls.n	8003644 <vListInsert+0x22>
 800364e:	e7ed      	b.n	800362c <vListInsert+0xa>

08003650 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003650:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8003654:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003656:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003658:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800365e:	bf08      	it	eq
 8003660:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003662:	2200      	movs	r2, #0
 8003664:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	3a01      	subs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800366c:	6818      	ldr	r0, [r3, #0]
}
 800366e:	4770      	bx	lr

08003670 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003670:	b510      	push	{r4, lr}
 8003672:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003674:	f001 f9e6 	bl	8004a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003678:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800367a:	f001 fa03 	bl	8004a84 <vPortExitCritical>

	return xReturn;
}
 800367e:	fab4 f084 	clz	r0, r4
 8003682:	0940      	lsrs	r0, r0, #5
 8003684:	bd10      	pop	{r4, pc}

08003686 <prvCopyDataToQueue>:
{
 8003686:	b570      	push	{r4, r5, r6, lr}
 8003688:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800368a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800368c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 800368e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003690:	b942      	cbnz	r2, 80036a4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003692:	6806      	ldr	r6, [r0, #0]
 8003694:	b99e      	cbnz	r6, 80036be <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003696:	6880      	ldr	r0, [r0, #8]
 8003698:	f000 ff3e 	bl	8004518 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800369c:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800369e:	3501      	adds	r5, #1
 80036a0:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80036a4:	b96e      	cbnz	r6, 80036c2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036a6:	6840      	ldr	r0, [r0, #4]
 80036a8:	f001 fc34 	bl	8004f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036ac:	6863      	ldr	r3, [r4, #4]
 80036ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80036b0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036b2:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036b4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036b6:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036b8:	bf24      	itt	cs
 80036ba:	6823      	ldrcs	r3, [r4, #0]
 80036bc:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80036be:	2000      	movs	r0, #0
 80036c0:	e7ed      	b.n	800369e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036c2:	68c0      	ldr	r0, [r0, #12]
 80036c4:	f001 fc26 	bl	8004f14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036c8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80036ca:	68e3      	ldr	r3, [r4, #12]
 80036cc:	4251      	negs	r1, r2
 80036ce:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036d0:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036d2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036d4:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036d6:	bf3e      	ittt	cc
 80036d8:	68a3      	ldrcc	r3, [r4, #8]
 80036da:	185b      	addcc	r3, r3, r1
 80036dc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80036de:	2e02      	cmp	r6, #2
 80036e0:	d1ed      	bne.n	80036be <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036e2:	b10d      	cbz	r5, 80036e8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80036e4:	3d01      	subs	r5, #1
 80036e6:	e7ea      	b.n	80036be <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80036e8:	4628      	mov	r0, r5
 80036ea:	e7d8      	b.n	800369e <prvCopyDataToQueue+0x18>

080036ec <prvCopyDataFromQueue>:
{
 80036ec:	4603      	mov	r3, r0
 80036ee:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80036f2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036f4:	b16a      	cbz	r2, 8003712 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036f6:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036f8:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036fa:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036fc:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036fe:	bf28      	it	cs
 8003700:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003702:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003704:	bf28      	it	cs
 8003706:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003708:	68d9      	ldr	r1, [r3, #12]
}
 800370a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800370e:	f001 bc01 	b.w	8004f14 <memcpy>
}
 8003712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003716:	4770      	bx	lr

08003718 <prvUnlockQueue>:
{
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800371c:	f001 f992 	bl	8004a44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003720:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003724:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003728:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800372a:	2d00      	cmp	r5, #0
 800372c:	dd01      	ble.n	8003732 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800372e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003730:	b9b3      	cbnz	r3, 8003760 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8003732:	23ff      	movs	r3, #255	@ 0xff
 8003734:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8003738:	f001 f9a4 	bl	8004a84 <vPortExitCritical>
	taskENTER_CRITICAL();
 800373c:	f001 f982 	bl	8004a44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003740:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003744:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8003748:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800374a:	2d00      	cmp	r5, #0
 800374c:	dd01      	ble.n	8003752 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800374e:	6923      	ldr	r3, [r4, #16]
 8003750:	b97b      	cbnz	r3, 8003772 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 8003752:	23ff      	movs	r3, #255	@ 0xff
 8003754:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8003758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800375c:	f001 b992 	b.w	8004a84 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003760:	4630      	mov	r0, r6
 8003762:	f000 fe3b 	bl	80043dc <xTaskRemoveFromEventList>
 8003766:	b108      	cbz	r0, 800376c <prvUnlockQueue+0x54>
						vTaskMissedYield();
 8003768:	f000 fec0 	bl	80044ec <vTaskMissedYield>
			--cTxLock;
 800376c:	3d01      	subs	r5, #1
 800376e:	b26d      	sxtb	r5, r5
 8003770:	e7db      	b.n	800372a <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003772:	4630      	mov	r0, r6
 8003774:	f000 fe32 	bl	80043dc <xTaskRemoveFromEventList>
 8003778:	b108      	cbz	r0, 800377e <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800377a:	f000 feb7 	bl	80044ec <vTaskMissedYield>
				--cRxLock;
 800377e:	3d01      	subs	r5, #1
 8003780:	b26d      	sxtb	r5, r5
 8003782:	e7e2      	b.n	800374a <prvUnlockQueue+0x32>

08003784 <xQueueGenericReset>:
{
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003788:	4604      	mov	r4, r0
 800378a:	b940      	cbnz	r0, 800379e <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	e7fe      	b.n	800379c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800379e:	f001 f951 	bl	8004a44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037a2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 80037a6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037a8:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037aa:	434b      	muls	r3, r1
 80037ac:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ae:	1a5b      	subs	r3, r3, r1
 80037b0:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037b2:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80037b4:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037b6:	2000      	movs	r0, #0
 80037b8:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ba:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037bc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037c0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80037c4:	b9a5      	cbnz	r5, 80037f0 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c6:	6923      	ldr	r3, [r4, #16]
 80037c8:	b173      	cbz	r3, 80037e8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ca:	f104 0010 	add.w	r0, r4, #16
 80037ce:	f000 fe05 	bl	80043dc <xTaskRemoveFromEventList>
 80037d2:	b148      	cbz	r0, 80037e8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80037d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80037d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80037e8:	f001 f94c 	bl	8004a84 <vPortExitCritical>
}
 80037ec:	2001      	movs	r0, #1
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037f0:	f104 0010 	add.w	r0, r4, #16
 80037f4:	f7ff fefc 	bl	80035f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037f8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80037fc:	f7ff fef8 	bl	80035f0 <vListInitialise>
 8003800:	e7f2      	b.n	80037e8 <xQueueGenericReset+0x64>

08003802 <xQueueGenericCreateStatic>:
	{
 8003802:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003804:	460d      	mov	r5, r1
 8003806:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003808:	b940      	cbnz	r0, 800381c <xQueueGenericCreateStatic+0x1a>
 800380a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	e7fe      	b.n	800381a <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800381c:	b943      	cbnz	r3, 8003830 <xQueueGenericCreateStatic+0x2e>
 800381e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	e7fe      	b.n	800382e <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003830:	b14a      	cbz	r2, 8003846 <xQueueGenericCreateStatic+0x44>
 8003832:	b991      	cbnz	r1, 800385a <xQueueGenericCreateStatic+0x58>
 8003834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	e7fe      	b.n	8003844 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003846:	b141      	cbz	r1, 800385a <xQueueGenericCreateStatic+0x58>
 8003848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	e7fe      	b.n	8003858 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800385a:	2350      	movs	r3, #80	@ 0x50
 800385c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800385e:	9b01      	ldr	r3, [sp, #4]
 8003860:	2b50      	cmp	r3, #80	@ 0x50
 8003862:	d008      	beq.n	8003876 <xQueueGenericCreateStatic+0x74>
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	e7fe      	b.n	8003874 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003876:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003878:	2d00      	cmp	r5, #0
 800387a:	bf08      	it	eq
 800387c:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800387e:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003882:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 8003886:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003888:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800388a:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800388c:	f7ff ff7a 	bl	8003784 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003890:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003894:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8003898:	4620      	mov	r0, r4
 800389a:	b003      	add	sp, #12
 800389c:	bd30      	pop	{r4, r5, pc}

0800389e <xQueueGenericSend>:
{
 800389e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80038a2:	460f      	mov	r7, r1
 80038a4:	9201      	str	r2, [sp, #4]
 80038a6:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80038a8:	4604      	mov	r4, r0
 80038aa:	b940      	cbnz	r0, 80038be <xQueueGenericSend+0x20>
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	e7fe      	b.n	80038bc <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038be:	b951      	cbnz	r1, 80038d6 <xQueueGenericSend+0x38>
 80038c0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80038c2:	b143      	cbz	r3, 80038d6 <xQueueGenericSend+0x38>
 80038c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	e7fe      	b.n	80038d4 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d6:	2e02      	cmp	r6, #2
 80038d8:	d10b      	bne.n	80038f2 <xQueueGenericSend+0x54>
 80038da:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d008      	beq.n	80038f2 <xQueueGenericSend+0x54>
 80038e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	e7fe      	b.n	80038f0 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038f2:	f000 fe01 	bl	80044f8 <xTaskGetSchedulerState>
 80038f6:	4605      	mov	r5, r0
 80038f8:	b320      	cbz	r0, 8003944 <xQueueGenericSend+0xa6>
 80038fa:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80038fc:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8003900:	f001 f8a0 	bl	8004a44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003904:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003906:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003908:	429a      	cmp	r2, r3
 800390a:	d227      	bcs.n	800395c <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800390c:	4632      	mov	r2, r6
 800390e:	4639      	mov	r1, r7
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff feb8 	bl	8003686 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003916:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003918:	b11b      	cbz	r3, 8003922 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800391a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800391e:	f000 fd5d 	bl	80043dc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003922:	b148      	cbz	r0, 8003938 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8003924:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800392c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003938:	f001 f8a4 	bl	8004a84 <vPortExitCritical>
				return pdPASS;
 800393c:	2001      	movs	r0, #1
}
 800393e:	b004      	add	sp, #16
 8003940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003944:	9b01      	ldr	r3, [sp, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0d8      	beq.n	80038fc <xQueueGenericSend+0x5e>
 800394a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	e7fe      	b.n	800395a <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800395c:	2e02      	cmp	r6, #2
 800395e:	d0d5      	beq.n	800390c <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003960:	9b01      	ldr	r3, [sp, #4]
 8003962:	b91b      	cbnz	r3, 800396c <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8003964:	f001 f88e 	bl	8004a84 <vPortExitCritical>
					return errQUEUE_FULL;
 8003968:	2000      	movs	r0, #0
 800396a:	e7e8      	b.n	800393e <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800396c:	b915      	cbnz	r5, 8003974 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800396e:	a802      	add	r0, sp, #8
 8003970:	f000 fd74 	bl	800445c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003974:	f001 f886 	bl	8004a84 <vPortExitCritical>
		vTaskSuspendAll();
 8003978:	f000 fb82 	bl	8004080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800397c:	f001 f862 	bl	8004a44 <vPortEnterCritical>
 8003980:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003984:	2bff      	cmp	r3, #255	@ 0xff
 8003986:	bf08      	it	eq
 8003988:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800398c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003990:	2bff      	cmp	r3, #255	@ 0xff
 8003992:	bf08      	it	eq
 8003994:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8003998:	f001 f874 	bl	8004a84 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800399c:	a901      	add	r1, sp, #4
 800399e:	a802      	add	r0, sp, #8
 80039a0:	f000 fd68 	bl	8004474 <xTaskCheckForTimeOut>
 80039a4:	bb38      	cbnz	r0, 80039f6 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039a6:	f001 f84d 	bl	8004a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039aa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80039ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d10e      	bne.n	80039d0 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80039b2:	f001 f867 	bl	8004a84 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039b6:	9901      	ldr	r1, [sp, #4]
 80039b8:	f104 0010 	add.w	r0, r4, #16
 80039bc:	f000 fcd6 	bl	800436c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7ff fea9 	bl	8003718 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039c6:	f000 fbff 	bl	80041c8 <xTaskResumeAll>
 80039ca:	b148      	cbz	r0, 80039e0 <xQueueGenericSend+0x142>
 80039cc:	2501      	movs	r5, #1
 80039ce:	e797      	b.n	8003900 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80039d0:	f001 f858 	bl	8004a84 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7ff fe9f 	bl	8003718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039da:	f000 fbf5 	bl	80041c8 <xTaskResumeAll>
 80039de:	e7f5      	b.n	80039cc <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80039e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80039e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	e7ea      	b.n	80039cc <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff fe8e 	bl	8003718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039fc:	f000 fbe4 	bl	80041c8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8003a00:	e7b2      	b.n	8003968 <xQueueGenericSend+0xca>

08003a02 <xQueueGenericSendFromISR>:
{
 8003a02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a06:	4689      	mov	r9, r1
 8003a08:	4617      	mov	r7, r2
 8003a0a:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	b940      	cbnz	r0, 8003a22 <xQueueGenericSendFromISR+0x20>
 8003a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	e7fe      	b.n	8003a20 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a22:	b951      	cbnz	r1, 8003a3a <xQueueGenericSendFromISR+0x38>
 8003a24:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003a26:	b143      	cbz	r3, 8003a3a <xQueueGenericSendFromISR+0x38>
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	e7fe      	b.n	8003a38 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a3a:	2e02      	cmp	r6, #2
 8003a3c:	d10b      	bne.n	8003a56 <xQueueGenericSendFromISR+0x54>
 8003a3e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d008      	beq.n	8003a56 <xQueueGenericSendFromISR+0x54>
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a56:	f001 f907 	bl	8004c68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a5a:	f3ef 8811 	mrs	r8, BASEPRI
 8003a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a6e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003a70:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d301      	bcc.n	8003a7a <xQueueGenericSendFromISR+0x78>
 8003a76:	2e02      	cmp	r6, #2
 8003a78:	d11e      	bne.n	8003ab8 <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a7a:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a7e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a80:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a82:	4632      	mov	r2, r6
 8003a84:	4649      	mov	r1, r9
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff fdfd 	bl	8003686 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003a8c:	1c6b      	adds	r3, r5, #1
 8003a8e:	d10e      	bne.n	8003aae <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a92:	b13b      	cbz	r3, 8003aa4 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a94:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003a98:	f000 fca0 	bl	80043dc <xTaskRemoveFromEventList>
 8003a9c:	b110      	cbz	r0, 8003aa4 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8003a9e:	b10f      	cbz	r7, 8003aa4 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8003aa4:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003aa6:	f388 8811 	msr	BASEPRI, r8
}
 8003aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003aae:	3501      	adds	r5, #1
 8003ab0:	b26d      	sxtb	r5, r5
 8003ab2:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8003ab6:	e7f5      	b.n	8003aa4 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8003ab8:	2000      	movs	r0, #0
 8003aba:	e7f4      	b.n	8003aa6 <xQueueGenericSendFromISR+0xa4>

08003abc <xQueueReceive>:
{
 8003abc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003ac0:	460e      	mov	r6, r1
 8003ac2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	b940      	cbnz	r0, 8003ada <xQueueReceive+0x1e>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ada:	b951      	cbnz	r1, 8003af2 <xQueueReceive+0x36>
 8003adc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003ade:	b143      	cbz	r3, 8003af2 <xQueueReceive+0x36>
 8003ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	e7fe      	b.n	8003af0 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af2:	f000 fd01 	bl	80044f8 <xTaskGetSchedulerState>
 8003af6:	4605      	mov	r5, r0
 8003af8:	b318      	cbz	r0, 8003b42 <xQueueReceive+0x86>
 8003afa:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8003afc:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8003b00:	f000 ffa0 	bl	8004a44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b04:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b06:	b347      	cbz	r7, 8003b5a <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b08:	4631      	mov	r1, r6
 8003b0a:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b0c:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b0e:	f7ff fded 	bl	80036ec <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b12:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b14:	6923      	ldr	r3, [r4, #16]
 8003b16:	b173      	cbz	r3, 8003b36 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b18:	f104 0010 	add.w	r0, r4, #16
 8003b1c:	f000 fc5e 	bl	80043dc <xTaskRemoveFromEventList>
 8003b20:	b148      	cbz	r0, 8003b36 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8003b22:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003b36:	f000 ffa5 	bl	8004a84 <vPortExitCritical>
				return pdPASS;
 8003b3a:	2001      	movs	r0, #1
}
 8003b3c:	b004      	add	sp, #16
 8003b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b42:	9b01      	ldr	r3, [sp, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0d9      	beq.n	8003afc <xQueueReceive+0x40>
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	e7fe      	b.n	8003b58 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b5a:	9b01      	ldr	r3, [sp, #4]
 8003b5c:	b91b      	cbnz	r3, 8003b66 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8003b5e:	f000 ff91 	bl	8004a84 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003b62:	2000      	movs	r0, #0
 8003b64:	e7ea      	b.n	8003b3c <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8003b66:	b915      	cbnz	r5, 8003b6e <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b68:	a802      	add	r0, sp, #8
 8003b6a:	f000 fc77 	bl	800445c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003b6e:	f000 ff89 	bl	8004a84 <vPortExitCritical>
		vTaskSuspendAll();
 8003b72:	f000 fa85 	bl	8004080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b76:	f000 ff65 	bl	8004a44 <vPortEnterCritical>
 8003b7a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003b7e:	2bff      	cmp	r3, #255	@ 0xff
 8003b80:	bf08      	it	eq
 8003b82:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8003b86:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003b8a:	2bff      	cmp	r3, #255	@ 0xff
 8003b8c:	bf08      	it	eq
 8003b8e:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8003b92:	f000 ff77 	bl	8004a84 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b96:	a901      	add	r1, sp, #4
 8003b98:	a802      	add	r0, sp, #8
 8003b9a:	f000 fc6b 	bl	8004474 <xTaskCheckForTimeOut>
 8003b9e:	bb00      	cbnz	r0, 8003be2 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff fd65 	bl	8003670 <prvIsQueueEmpty>
 8003ba6:	b1b0      	cbz	r0, 8003bd6 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ba8:	9901      	ldr	r1, [sp, #4]
 8003baa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003bae:	f000 fbdd 	bl	800436c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7ff fdb0 	bl	8003718 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bb8:	f000 fb06 	bl	80041c8 <xTaskResumeAll>
 8003bbc:	b948      	cbnz	r0, 8003bd2 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8003bbe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bc6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	2501      	movs	r5, #1
 8003bd4:	e794      	b.n	8003b00 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff fd9e 	bl	8003718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bdc:	f000 faf4 	bl	80041c8 <xTaskResumeAll>
 8003be0:	e7f7      	b.n	8003bd2 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7ff fd98 	bl	8003718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003be8:	f000 faee 	bl	80041c8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7ff fd3f 	bl	8003670 <prvIsQueueEmpty>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d0ed      	beq.n	8003bd2 <xQueueReceive+0x116>
 8003bf6:	e7b4      	b.n	8003b62 <xQueueReceive+0xa6>

08003bf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003bf8:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bfa:	4a07      	ldr	r2, [pc, #28]	@ (8003c18 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bfc:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bfe:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8003c02:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8003c06:	b91d      	cbnz	r5, 8003c10 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c0c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c0e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c10:	3301      	adds	r3, #1
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d1f3      	bne.n	8003bfe <vQueueAddToRegistry+0x6>
 8003c16:	e7fa      	b.n	8003c0e <vQueueAddToRegistry+0x16>
 8003c18:	20000abc 	.word	0x20000abc

08003c1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4604      	mov	r4, r0
 8003c20:	460d      	mov	r5, r1
 8003c22:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c24:	f000 ff0e 	bl	8004a44 <vPortEnterCritical>
 8003c28:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003c2c:	2bff      	cmp	r3, #255	@ 0xff
 8003c2e:	bf04      	itt	eq
 8003c30:	2300      	moveq	r3, #0
 8003c32:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8003c36:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003c3a:	2bff      	cmp	r3, #255	@ 0xff
 8003c3c:	bf04      	itt	eq
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8003c44:	f000 ff1e 	bl	8004a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c48:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003c4a:	b92b      	cbnz	r3, 8003c58 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	4629      	mov	r1, r5
 8003c50:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003c54:	f000 fba4 	bl	80043a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c58:	4620      	mov	r0, r4
	}
 8003c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8003c5e:	f7ff bd5b 	b.w	8003718 <prvUnlockQueue>
	...

08003c64 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c68:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c6a:	f000 feeb 	bl	8004a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c6e:	4b30      	ldr	r3, [pc, #192]	@ (8003d30 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8003c70:	4e30      	ldr	r6, [pc, #192]	@ (8003d34 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4f30      	ldr	r7, [pc, #192]	@ (8003d38 <prvAddNewTaskToReadyList+0xd4>)
 8003c76:	3201      	adds	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003c7a:	6835      	ldr	r5, [r6, #0]
 8003c7c:	2d00      	cmp	r5, #0
 8003c7e:	d14b      	bne.n	8003d18 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c80:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d11f      	bne.n	8003cc8 <prvAddNewTaskToReadyList+0x64>
 8003c88:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c8a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c8c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c8e:	f7ff fcaf 	bl	80035f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c92:	2d38      	cmp	r5, #56	@ 0x38
 8003c94:	f108 0814 	add.w	r8, r8, #20
 8003c98:	d1f7      	bne.n	8003c8a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c9a:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8003d60 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8003c9e:	4d27      	ldr	r5, [pc, #156]	@ (8003d3c <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	f7ff fca5 	bl	80035f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f7ff fca2 	bl	80035f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cac:	4824      	ldr	r0, [pc, #144]	@ (8003d40 <prvAddNewTaskToReadyList+0xdc>)
 8003cae:	f7ff fc9f 	bl	80035f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cb2:	4824      	ldr	r0, [pc, #144]	@ (8003d44 <prvAddNewTaskToReadyList+0xe0>)
 8003cb4:	f7ff fc9c 	bl	80035f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cb8:	4823      	ldr	r0, [pc, #140]	@ (8003d48 <prvAddNewTaskToReadyList+0xe4>)
 8003cba:	f7ff fc99 	bl	80035f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cbe:	4b23      	ldr	r3, [pc, #140]	@ (8003d4c <prvAddNewTaskToReadyList+0xe8>)
 8003cc0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cc4:	4b22      	ldr	r3, [pc, #136]	@ (8003d50 <prvAddNewTaskToReadyList+0xec>)
 8003cc6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003cc8:	4a22      	ldr	r2, [pc, #136]	@ (8003d54 <prvAddNewTaskToReadyList+0xf0>)
 8003cca:	6813      	ldr	r3, [r2, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003cd0:	4a21      	ldr	r2, [pc, #132]	@ (8003d58 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cd2:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003cd4:	6811      	ldr	r1, [r2, #0]
 8003cd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003cd8:	2014      	movs	r0, #20
 8003cda:	428b      	cmp	r3, r1
 8003cdc:	fb00 7003 	mla	r0, r0, r3, r7
 8003ce0:	f104 0104 	add.w	r1, r4, #4
 8003ce4:	bf88      	it	hi
 8003ce6:	6013      	strhi	r3, [r2, #0]
 8003ce8:	f7ff fc90 	bl	800360c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003cec:	f000 feca 	bl	8004a84 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d5c <prvAddNewTaskToReadyList+0xf8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b173      	cbz	r3, 8003d14 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cf6:	6833      	ldr	r3, [r6, #0]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d209      	bcs.n	8003d14 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8003d00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d08:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
}
 8003d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003d18:	4b10      	ldr	r3, [pc, #64]	@ (8003d5c <prvAddNewTaskToReadyList+0xf8>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d1c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	d1d2      	bne.n	8003cc8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d22:	6832      	ldr	r2, [r6, #0]
 8003d24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d26:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003d28:	bf98      	it	ls
 8003d2a:	6034      	strls	r4, [r6, #0]
 8003d2c:	e7cc      	b.n	8003cc8 <prvAddNewTaskToReadyList+0x64>
 8003d2e:	bf00      	nop
 8003d30:	20000b20 	.word	0x20000b20
 8003d34:	20000ff4 	.word	0x20000ff4
 8003d38:	20000b94 	.word	0x20000b94
 8003d3c:	20000b6c 	.word	0x20000b6c
 8003d40:	20000b50 	.word	0x20000b50
 8003d44:	20000b3c 	.word	0x20000b3c
 8003d48:	20000b24 	.word	0x20000b24
 8003d4c:	20000b68 	.word	0x20000b68
 8003d50:	20000b64 	.word	0x20000b64
 8003d54:	20000b04 	.word	0x20000b04
 8003d58:	20000b18 	.word	0x20000b18
 8003d5c:	20000b14 	.word	0x20000b14
 8003d60:	20000b80 	.word	0x20000b80

08003d64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d66:	4b15      	ldr	r3, [pc, #84]	@ (8003dbc <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d68:	4d15      	ldr	r5, [pc, #84]	@ (8003dc0 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8003d6a:	681c      	ldr	r4, [r3, #0]
{
 8003d6c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d6e:	6828      	ldr	r0, [r5, #0]
 8003d70:	3004      	adds	r0, #4
{
 8003d72:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d74:	f7ff fc6c 	bl	8003650 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d78:	1c73      	adds	r3, r6, #1
 8003d7a:	d107      	bne.n	8003d8c <prvAddCurrentTaskToDelayedList+0x28>
 8003d7c:	b137      	cbz	r7, 8003d8c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d7e:	6829      	ldr	r1, [r5, #0]
 8003d80:	4810      	ldr	r0, [pc, #64]	@ (8003dc4 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d86:	3104      	adds	r1, #4
 8003d88:	f7ff bc40 	b.w	800360c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	19a4      	adds	r4, r4, r6
 8003d90:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d92:	d307      	bcc.n	8003da4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x64>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	6829      	ldr	r1, [r5, #0]
}
 8003d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d9e:	3104      	adds	r1, #4
 8003da0:	f7ff bc3f 	b.w	8003622 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <prvAddCurrentTaskToDelayedList+0x68>)
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	6829      	ldr	r1, [r5, #0]
 8003daa:	3104      	adds	r1, #4
 8003dac:	f7ff fc39 	bl	8003622 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0x6c>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8003db6:	bf88      	it	hi
 8003db8:	601c      	strhi	r4, [r3, #0]
}
 8003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dbc:	20000b1c 	.word	0x20000b1c
 8003dc0:	20000ff4 	.word	0x20000ff4
 8003dc4:	20000b24 	.word	0x20000b24
 8003dc8:	20000b64 	.word	0x20000b64
 8003dcc:	20000b68 	.word	0x20000b68
 8003dd0:	20000b00 	.word	0x20000b00

08003dd4 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd4:	4a06      	ldr	r2, [pc, #24]	@ (8003df0 <prvResetNextTaskUnblockTime+0x1c>)
 8003dd6:	6813      	ldr	r3, [r2, #0]
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <prvResetNextTaskUnblockTime+0x20>)
 8003ddc:	b919      	cbnz	r1, 8003de6 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003de2:	601a      	str	r2, [r3, #0]
}
 8003de4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003dea:	68d2      	ldr	r2, [r2, #12]
 8003dec:	6852      	ldr	r2, [r2, #4]
 8003dee:	e7f8      	b.n	8003de2 <prvResetNextTaskUnblockTime+0xe>
 8003df0:	20000b68 	.word	0x20000b68
 8003df4:	20000b00 	.word	0x20000b00

08003df8 <prvDeleteTCB>:
	{
 8003df8:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003dfa:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
	{
 8003dfe:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e00:	b93b      	cbnz	r3, 8003e12 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8003e02:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003e04:	f001 f81c 	bl	8004e40 <vPortFree>
				vPortFree( pxTCB );
 8003e08:	4620      	mov	r0, r4
	}
 8003e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003e0e:	f001 b817 	b.w	8004e40 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d0f9      	beq.n	8003e0a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d008      	beq.n	8003e2c <prvDeleteTCB+0x34>
 8003e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	e7fe      	b.n	8003e2a <prvDeleteTCB+0x32>
	}
 8003e2c:	bd10      	pop	{r4, pc}
	...

08003e30 <prvIdleTask>:
{
 8003e30:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e32:	4c13      	ldr	r4, [pc, #76]	@ (8003e80 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e34:	4f13      	ldr	r7, [pc, #76]	@ (8003e84 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8003e36:	4d14      	ldr	r5, [pc, #80]	@ (8003e88 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	b973      	cbnz	r3, 8003e5a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e3c:	4b13      	ldr	r3, [pc, #76]	@ (8003e8c <prvIdleTask+0x5c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d9f8      	bls.n	8003e36 <prvIdleTask+0x6>
				taskYIELD();
 8003e44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	e7ed      	b.n	8003e36 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8003e5a:	f000 fdf3 	bl	8004a44 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e62:	1d30      	adds	r0, r6, #4
 8003e64:	f7ff fbf4 	bl	8003650 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003e74:	f000 fe06 	bl	8004a84 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f7ff ffbd 	bl	8003df8 <prvDeleteTCB>
 8003e7e:	e7db      	b.n	8003e38 <prvIdleTask+0x8>
 8003e80:	20000b38 	.word	0x20000b38
 8003e84:	20000b3c 	.word	0x20000b3c
 8003e88:	20000b20 	.word	0x20000b20
 8003e8c:	20000b94 	.word	0x20000b94

08003e90 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e98:	0096      	lsls	r6, r2, #2
 8003e9a:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003e9c:	4607      	mov	r7, r0
 8003e9e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ea0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003ea2:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003ea4:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ea6:	f001 f809 	bl	8004ebc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003eac:	3e04      	subs	r6, #4
 8003eae:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003eb0:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8003eb4:	b3a5      	cbz	r5, 8003f20 <prvInitialiseNewTask.constprop.0+0x90>
 8003eb6:	1e6b      	subs	r3, r5, #1
 8003eb8:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8003ebc:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ebe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003ec2:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8003ec6:	b109      	cbz	r1, 8003ecc <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ec8:	42ab      	cmp	r3, r5
 8003eca:	d1f8      	bne.n	8003ebe <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ed2:	9d08      	ldr	r5, [sp, #32]
 8003ed4:	2d37      	cmp	r5, #55	@ 0x37
 8003ed6:	bf28      	it	cs
 8003ed8:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8003eda:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8003ede:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003ee0:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ee2:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8003ee4:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ee8:	f7ff fb8d 	bl	8003606 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eec:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ef0:	f104 0018 	add.w	r0, r4, #24
 8003ef4:	f7ff fb87 	bl	8003606 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003ef8:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003efc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efe:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f00:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f02:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f06:	4642      	mov	r2, r8
 8003f08:	4639      	mov	r1, r7
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f000 fd6c 	bl	80049e8 <pxPortInitialiseStack>
 8003f10:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8003f12:	f1b9 0f00 	cmp.w	r9, #0
 8003f16:	d001      	beq.n	8003f1c <prvInitialiseNewTask.constprop.0+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f18:	f8c9 4000 	str.w	r4, [r9]
}
 8003f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f20:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8003f24:	e7d5      	b.n	8003ed2 <prvInitialiseNewTask.constprop.0+0x42>

08003f26 <xTaskCreateStatic>:
	{
 8003f26:	b570      	push	{r4, r5, r6, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8003f2e:	b945      	cbnz	r5, 8003f42 <xTaskCreateStatic+0x1c>
 8003f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	e7fe      	b.n	8003f40 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003f42:	b944      	cbnz	r4, 8003f56 <xTaskCreateStatic+0x30>
 8003f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	e7fe      	b.n	8003f54 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f56:	265c      	movs	r6, #92	@ 0x5c
 8003f58:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f5a:	9e05      	ldr	r6, [sp, #20]
 8003f5c:	2e5c      	cmp	r6, #92	@ 0x5c
 8003f5e:	d008      	beq.n	8003f72 <xTaskCreateStatic+0x4c>
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	e7fe      	b.n	8003f70 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f72:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f74:	2502      	movs	r5, #2
 8003f76:	f884 5059 	strb.w	r5, [r4, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f7a:	ad04      	add	r5, sp, #16
 8003f7c:	9501      	str	r5, [sp, #4]
 8003f7e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8003f80:	9402      	str	r4, [sp, #8]
 8003f82:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f84:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f86:	f7ff ff83 	bl	8003e90 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f7ff fe6a 	bl	8003c64 <prvAddNewTaskToReadyList>
	}
 8003f90:	9804      	ldr	r0, [sp, #16]
 8003f92:	b006      	add	sp, #24
 8003f94:	bd70      	pop	{r4, r5, r6, pc}

08003f96 <xTaskCreate>:
	{
 8003f96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f9a:	4607      	mov	r7, r0
 8003f9c:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f9e:	0090      	lsls	r0, r2, #2
	{
 8003fa0:	4688      	mov	r8, r1
 8003fa2:	4616      	mov	r6, r2
 8003fa4:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fa6:	f000 feb3 	bl	8004d10 <pvPortMalloc>
			if( pxStack != NULL )
 8003faa:	4605      	mov	r5, r0
 8003fac:	b920      	cbnz	r0, 8003fb8 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8003fb2:	b005      	add	sp, #20
 8003fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fb8:	205c      	movs	r0, #92	@ 0x5c
 8003fba:	f000 fea9 	bl	8004d10 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	b198      	cbz	r0, 8003fea <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8003fca:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003fd0:	9002      	str	r0, [sp, #8]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	4641      	mov	r1, r8
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f7ff ff58 	bl	8003e90 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f7ff fe3f 	bl	8003c64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	e7e3      	b.n	8003fb2 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 ff28 	bl	8004e40 <vPortFree>
		if( pxNewTCB != NULL )
 8003ff0:	e7dd      	b.n	8003fae <xTaskCreate+0x18>
	...

08003ff4 <vTaskStartScheduler>:
{
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ff8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ffa:	aa07      	add	r2, sp, #28
 8003ffc:	a906      	add	r1, sp, #24
 8003ffe:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004000:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004004:	f7ff fadc 	bl	80035c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004008:	9b05      	ldr	r3, [sp, #20]
 800400a:	9302      	str	r3, [sp, #8]
 800400c:	9b06      	ldr	r3, [sp, #24]
 800400e:	9a07      	ldr	r2, [sp, #28]
 8004010:	4916      	ldr	r1, [pc, #88]	@ (800406c <vTaskStartScheduler+0x78>)
 8004012:	4817      	ldr	r0, [pc, #92]	@ (8004070 <vTaskStartScheduler+0x7c>)
 8004014:	e9cd 4300 	strd	r4, r3, [sp]
 8004018:	4623      	mov	r3, r4
 800401a:	f7ff ff84 	bl	8003f26 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800401e:	b318      	cbz	r0, 8004068 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8004020:	f000 fb0e 	bl	8004640 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004024:	2801      	cmp	r0, #1
 8004026:	d114      	bne.n	8004052 <vTaskStartScheduler+0x5e>
 8004028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004038:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <vTaskStartScheduler+0x80>)
 800403a:	f04f 32ff 	mov.w	r2, #4294967295
 800403e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004040:	4b0d      	ldr	r3, [pc, #52]	@ (8004078 <vTaskStartScheduler+0x84>)
 8004042:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004044:	4b0d      	ldr	r3, [pc, #52]	@ (800407c <vTaskStartScheduler+0x88>)
 8004046:	601c      	str	r4, [r3, #0]
}
 8004048:	b008      	add	sp, #32
 800404a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800404e:	f000 bd89 	b.w	8004b64 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004052:	3001      	adds	r0, #1
 8004054:	d108      	bne.n	8004068 <vTaskStartScheduler+0x74>
 8004056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	e7fe      	b.n	8004066 <vTaskStartScheduler+0x72>
}
 8004068:	b008      	add	sp, #32
 800406a:	bd10      	pop	{r4, pc}
 800406c:	08004f54 	.word	0x08004f54
 8004070:	08003e31 	.word	0x08003e31
 8004074:	20000b00 	.word	0x20000b00
 8004078:	20000b14 	.word	0x20000b14
 800407c:	20000b1c 	.word	0x20000b1c

08004080 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004080:	4a02      	ldr	r2, [pc, #8]	@ (800408c <vTaskSuspendAll+0xc>)
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000afc 	.word	0x20000afc

08004090 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004090:	4b01      	ldr	r3, [pc, #4]	@ (8004098 <xTaskGetTickCount+0x8>)
 8004092:	6818      	ldr	r0, [r3, #0]
}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000b1c 	.word	0x20000b1c

0800409c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409c:	4b3f      	ldr	r3, [pc, #252]	@ (800419c <xTaskIncrementTick+0x100>)
 800409e:	681b      	ldr	r3, [r3, #0]
{
 80040a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d172      	bne.n	800418e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040a8:	4b3d      	ldr	r3, [pc, #244]	@ (80041a0 <xTaskIncrementTick+0x104>)
 80040aa:	681c      	ldr	r4, [r3, #0]
 80040ac:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80040ae:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040b0:	b9bc      	cbnz	r4, 80040e2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80040b2:	4b3c      	ldr	r3, [pc, #240]	@ (80041a4 <xTaskIncrementTick+0x108>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	b142      	cbz	r2, 80040cc <xTaskIncrementTick+0x30>
 80040ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	e7fe      	b.n	80040ca <xTaskIncrementTick+0x2e>
 80040cc:	4a36      	ldr	r2, [pc, #216]	@ (80041a8 <xTaskIncrementTick+0x10c>)
 80040ce:	6819      	ldr	r1, [r3, #0]
 80040d0:	6810      	ldr	r0, [r2, #0]
 80040d2:	6018      	str	r0, [r3, #0]
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	4a35      	ldr	r2, [pc, #212]	@ (80041ac <xTaskIncrementTick+0x110>)
 80040d8:	6813      	ldr	r3, [r2, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	f7ff fe79 	bl	8003dd4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040e2:	4d33      	ldr	r5, [pc, #204]	@ (80041b0 <xTaskIncrementTick+0x114>)
 80040e4:	4e33      	ldr	r6, [pc, #204]	@ (80041b4 <xTaskIncrementTick+0x118>)
 80040e6:	682b      	ldr	r3, [r5, #0]
 80040e8:	4f33      	ldr	r7, [pc, #204]	@ (80041b8 <xTaskIncrementTick+0x11c>)
 80040ea:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 80040ec:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040f0:	d212      	bcs.n	8004118 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040f6:	2114      	movs	r1, #20
 80040f8:	434a      	muls	r2, r1
 80040fa:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80040fc:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 80040fe:	4a2f      	ldr	r2, [pc, #188]	@ (80041bc <xTaskIncrementTick+0x120>)
 8004100:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8004102:	bf28      	it	cs
 8004104:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8004108:	2a00      	cmp	r2, #0
 800410a:	bf18      	it	ne
 800410c:	f04f 0b01 	movne.w	fp, #1
}
 8004110:	4658      	mov	r0, fp
 8004112:	b003      	add	sp, #12
 8004114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004118:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80041a4 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800411c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 80041c4 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004120:	f8d9 2000 	ldr.w	r2, [r9]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	b91a      	cbnz	r2, 8004130 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	602a      	str	r2, [r5, #0]
					break;
 800412e:	e7e0      	b.n	80040f2 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004130:	f8d9 2000 	ldr.w	r2, [r9]
 8004134:	68d2      	ldr	r2, [r2, #12]
 8004136:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800413a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800413e:	428c      	cmp	r4, r1
 8004140:	d201      	bcs.n	8004146 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8004142:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004144:	e7d5      	b.n	80040f2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004146:	f108 0304 	add.w	r3, r8, #4
 800414a:	4618      	mov	r0, r3
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	f7ff fa7f 	bl	8003650 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004152:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8004156:	b119      	cbz	r1, 8004160 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004158:	f108 0018 	add.w	r0, r8, #24
 800415c:	f7ff fa78 	bl	8003650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004160:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8004164:	f8da 1000 	ldr.w	r1, [sl]
 8004168:	2314      	movs	r3, #20
 800416a:	4288      	cmp	r0, r1
 800416c:	bf88      	it	hi
 800416e:	f8ca 0000 	strhi.w	r0, [sl]
 8004172:	9901      	ldr	r1, [sp, #4]
 8004174:	fb03 6000 	mla	r0, r3, r0, r6
 8004178:	f7ff fa48 	bl	800360c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800417c:	6838      	ldr	r0, [r7, #0]
 800417e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8004182:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8004184:	4291      	cmp	r1, r2
 8004186:	bf28      	it	cs
 8004188:	f04f 0b01 	movcs.w	fp, #1
 800418c:	e7c8      	b.n	8004120 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800418e:	4a0c      	ldr	r2, [pc, #48]	@ (80041c0 <xTaskIncrementTick+0x124>)
 8004190:	6813      	ldr	r3, [r2, #0]
 8004192:	3301      	adds	r3, #1
 8004194:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004196:	f04f 0b00 	mov.w	fp, #0
 800419a:	e7b9      	b.n	8004110 <xTaskIncrementTick+0x74>
 800419c:	20000afc 	.word	0x20000afc
 80041a0:	20000b1c 	.word	0x20000b1c
 80041a4:	20000b68 	.word	0x20000b68
 80041a8:	20000b64 	.word	0x20000b64
 80041ac:	20000b08 	.word	0x20000b08
 80041b0:	20000b00 	.word	0x20000b00
 80041b4:	20000b94 	.word	0x20000b94
 80041b8:	20000ff4 	.word	0x20000ff4
 80041bc:	20000b0c 	.word	0x20000b0c
 80041c0:	20000b10 	.word	0x20000b10
 80041c4:	20000b18 	.word	0x20000b18

080041c8 <xTaskResumeAll>:
{
 80041c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80041cc:	4c30      	ldr	r4, [pc, #192]	@ (8004290 <xTaskResumeAll+0xc8>)
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	b943      	cbnz	r3, 80041e4 <xTaskResumeAll+0x1c>
 80041d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	e7fe      	b.n	80041e2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80041e4:	f000 fc2e 	bl	8004a44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ee:	6824      	ldr	r4, [r4, #0]
 80041f0:	b12c      	cbz	r4, 80041fe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80041f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80041f4:	f000 fc46 	bl	8004a84 <vPortExitCritical>
}
 80041f8:	4620      	mov	r0, r4
 80041fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041fe:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <xTaskResumeAll+0xcc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f5      	beq.n	80041f2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004206:	4d24      	ldr	r5, [pc, #144]	@ (8004298 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8004208:	4e24      	ldr	r6, [pc, #144]	@ (800429c <xTaskResumeAll+0xd4>)
 800420a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80042ac <xTaskResumeAll+0xe4>
 800420e:	e01d      	b.n	800424c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004210:	68eb      	ldr	r3, [r5, #12]
 8004212:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004214:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004216:	f104 0018 	add.w	r0, r4, #24
 800421a:	f7ff fa19 	bl	8003650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800421e:	4638      	mov	r0, r7
 8004220:	f7ff fa16 	bl	8003650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004224:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004226:	6832      	ldr	r2, [r6, #0]
 8004228:	2014      	movs	r0, #20
 800422a:	4293      	cmp	r3, r2
 800422c:	fb00 8003 	mla	r0, r0, r3, r8
 8004230:	4639      	mov	r1, r7
 8004232:	bf88      	it	hi
 8004234:	6033      	strhi	r3, [r6, #0]
 8004236:	f7ff f9e9 	bl	800360c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800423a:	4b19      	ldr	r3, [pc, #100]	@ (80042a0 <xTaskResumeAll+0xd8>)
 800423c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8004246:	4b17      	ldr	r3, [pc, #92]	@ (80042a4 <xTaskResumeAll+0xdc>)
 8004248:	2201      	movs	r2, #1
 800424a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1de      	bne.n	8004210 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8004252:	b10c      	cbz	r4, 8004258 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8004254:	f7ff fdbe 	bl	8003dd4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004258:	4d13      	ldr	r5, [pc, #76]	@ (80042a8 <xTaskResumeAll+0xe0>)
 800425a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800425c:	b144      	cbz	r4, 8004270 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800425e:	4e11      	ldr	r6, [pc, #68]	@ (80042a4 <xTaskResumeAll+0xdc>)
 8004260:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004262:	f7ff ff1b 	bl	800409c <xTaskIncrementTick>
 8004266:	b100      	cbz	r0, 800426a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8004268:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800426a:	3c01      	subs	r4, #1
 800426c:	d1f9      	bne.n	8004262 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800426e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004270:	4b0c      	ldr	r3, [pc, #48]	@ (80042a4 <xTaskResumeAll+0xdc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0bc      	beq.n	80041f2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004278:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800427c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004280:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800428c:	2401      	movs	r4, #1
 800428e:	e7b1      	b.n	80041f4 <xTaskResumeAll+0x2c>
 8004290:	20000afc 	.word	0x20000afc
 8004294:	20000b20 	.word	0x20000b20
 8004298:	20000b50 	.word	0x20000b50
 800429c:	20000b18 	.word	0x20000b18
 80042a0:	20000ff4 	.word	0x20000ff4
 80042a4:	20000b0c 	.word	0x20000b0c
 80042a8:	20000b10 	.word	0x20000b10
 80042ac:	20000b94 	.word	0x20000b94

080042b0 <vTaskDelay>:
	{
 80042b0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042b2:	b950      	cbnz	r0, 80042ca <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80042b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80042b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	f3bf 8f6f 	isb	sy
	}
 80042c8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80042ca:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <vTaskDelay+0x44>)
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	b141      	cbz	r1, 80042e2 <vTaskDelay+0x32>
 80042d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	e7fe      	b.n	80042e0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80042e2:	f7ff fecd 	bl	8004080 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042e6:	f7ff fd3d 	bl	8003d64 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80042ea:	f7ff ff6d 	bl	80041c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d0e0      	beq.n	80042b4 <vTaskDelay+0x4>
 80042f2:	e7e9      	b.n	80042c8 <vTaskDelay+0x18>
 80042f4:	20000afc 	.word	0x20000afc

080042f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042f8:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <vTaskSwitchContext+0x60>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <vTaskSwitchContext+0x64>)
{
 80042fe:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004300:	b112      	cbz	r2, 8004308 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004308:	4d15      	ldr	r5, [pc, #84]	@ (8004360 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 800430a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	682a      	ldr	r2, [r5, #0]
 800430e:	4915      	ldr	r1, [pc, #84]	@ (8004364 <vTaskSwitchContext+0x6c>)
 8004310:	2614      	movs	r6, #20
 8004312:	fb06 f302 	mul.w	r3, r6, r2
 8004316:	18c8      	adds	r0, r1, r3
 8004318:	58cc      	ldr	r4, [r1, r3]
 800431a:	b18c      	cbz	r4, 8004340 <vTaskSwitchContext+0x48>
 800431c:	6844      	ldr	r4, [r0, #4]
 800431e:	3308      	adds	r3, #8
 8004320:	6864      	ldr	r4, [r4, #4]
 8004322:	6044      	str	r4, [r0, #4]
 8004324:	440b      	add	r3, r1
 8004326:	429c      	cmp	r4, r3
 8004328:	bf04      	itt	eq
 800432a:	6863      	ldreq	r3, [r4, #4]
 800432c:	6043      	streq	r3, [r0, #4]
 800432e:	2314      	movs	r3, #20
 8004330:	fb03 1102 	mla	r1, r3, r2, r1
 8004334:	684b      	ldr	r3, [r1, #4]
 8004336:	68d9      	ldr	r1, [r3, #12]
 8004338:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <vTaskSwitchContext+0x70>)
 800433a:	6019      	str	r1, [r3, #0]
 800433c:	602a      	str	r2, [r5, #0]
}
 800433e:	e7e2      	b.n	8004306 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004340:	b942      	cbnz	r2, 8004354 <vTaskSwitchContext+0x5c>
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	e7fe      	b.n	8004352 <vTaskSwitchContext+0x5a>
 8004354:	3a01      	subs	r2, #1
 8004356:	e7dc      	b.n	8004312 <vTaskSwitchContext+0x1a>
 8004358:	20000afc 	.word	0x20000afc
 800435c:	20000b0c 	.word	0x20000b0c
 8004360:	20000b18 	.word	0x20000b18
 8004364:	20000b94 	.word	0x20000b94
 8004368:	20000ff4 	.word	0x20000ff4

0800436c <vTaskPlaceOnEventList>:
{
 800436c:	b510      	push	{r4, lr}
 800436e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004370:	b940      	cbnz	r0, 8004384 <vTaskPlaceOnEventList+0x18>
 8004372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	e7fe      	b.n	8004382 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004384:	4b05      	ldr	r3, [pc, #20]	@ (800439c <vTaskPlaceOnEventList+0x30>)
 8004386:	6819      	ldr	r1, [r3, #0]
 8004388:	3118      	adds	r1, #24
 800438a:	f7ff f94a 	bl	8003622 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800438e:	4620      	mov	r0, r4
 8004390:	2101      	movs	r1, #1
}
 8004392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004396:	f7ff bce5 	b.w	8003d64 <prvAddCurrentTaskToDelayedList>
 800439a:	bf00      	nop
 800439c:	20000ff4 	.word	0x20000ff4

080043a0 <vTaskPlaceOnEventListRestricted>:
	{
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	460d      	mov	r5, r1
 80043a4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80043a6:	b940      	cbnz	r0, 80043ba <vTaskPlaceOnEventListRestricted+0x1a>
 80043a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	e7fe      	b.n	80043b8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043ba:	4b07      	ldr	r3, [pc, #28]	@ (80043d8 <vTaskPlaceOnEventListRestricted+0x38>)
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	3118      	adds	r1, #24
 80043c0:	f7ff f924 	bl	800360c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80043c4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043c6:	4621      	mov	r1, r4
 80043c8:	bf0c      	ite	eq
 80043ca:	4628      	moveq	r0, r5
 80043cc:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80043d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043d4:	f7ff bcc6 	b.w	8003d64 <prvAddCurrentTaskToDelayedList>
 80043d8:	20000ff4 	.word	0x20000ff4

080043dc <xTaskRemoveFromEventList>:
{
 80043dc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043de:	68c3      	ldr	r3, [r0, #12]
 80043e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80043e2:	b944      	cbnz	r4, 80043f6 <xTaskRemoveFromEventList+0x1a>
 80043e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	e7fe      	b.n	80043f4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043f6:	f104 0518 	add.w	r5, r4, #24
 80043fa:	4628      	mov	r0, r5
 80043fc:	f7ff f928 	bl	8003650 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004400:	4b10      	ldr	r3, [pc, #64]	@ (8004444 <xTaskRemoveFromEventList+0x68>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b9db      	cbnz	r3, 800443e <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004406:	1d25      	adds	r5, r4, #4
 8004408:	4628      	mov	r0, r5
 800440a:	f7ff f921 	bl	8003650 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800440e:	4a0e      	ldr	r2, [pc, #56]	@ (8004448 <xTaskRemoveFromEventList+0x6c>)
 8004410:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004412:	6811      	ldr	r1, [r2, #0]
 8004414:	428b      	cmp	r3, r1
 8004416:	bf88      	it	hi
 8004418:	6013      	strhi	r3, [r2, #0]
 800441a:	4a0c      	ldr	r2, [pc, #48]	@ (800444c <xTaskRemoveFromEventList+0x70>)
 800441c:	2014      	movs	r0, #20
 800441e:	4629      	mov	r1, r5
 8004420:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004424:	f7ff f8f2 	bl	800360c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004428:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <xTaskRemoveFromEventList+0x74>)
 800442a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004432:	bf83      	ittte	hi
 8004434:	4b07      	ldrhi	r3, [pc, #28]	@ (8004454 <xTaskRemoveFromEventList+0x78>)
 8004436:	2001      	movhi	r0, #1
 8004438:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800443a:	2000      	movls	r0, #0
}
 800443c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800443e:	4806      	ldr	r0, [pc, #24]	@ (8004458 <xTaskRemoveFromEventList+0x7c>)
 8004440:	4629      	mov	r1, r5
 8004442:	e7ef      	b.n	8004424 <xTaskRemoveFromEventList+0x48>
 8004444:	20000afc 	.word	0x20000afc
 8004448:	20000b18 	.word	0x20000b18
 800444c:	20000b94 	.word	0x20000b94
 8004450:	20000ff4 	.word	0x20000ff4
 8004454:	20000b0c 	.word	0x20000b0c
 8004458:	20000b50 	.word	0x20000b50

0800445c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800445c:	4b03      	ldr	r3, [pc, #12]	@ (800446c <vTaskInternalSetTimeOutState+0x10>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004462:	4b03      	ldr	r3, [pc, #12]	@ (8004470 <vTaskInternalSetTimeOutState+0x14>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6043      	str	r3, [r0, #4]
}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000b08 	.word	0x20000b08
 8004470:	20000b1c 	.word	0x20000b1c

08004474 <xTaskCheckForTimeOut>:
{
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004478:	4605      	mov	r5, r0
 800447a:	b940      	cbnz	r0, 800448e <xTaskCheckForTimeOut+0x1a>
 800447c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	e7fe      	b.n	800448c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800448e:	b941      	cbnz	r1, 80044a2 <xTaskCheckForTimeOut+0x2e>
 8004490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	e7fe      	b.n	80044a0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80044a2:	f000 facf 	bl	8004a44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80044a6:	4b0f      	ldr	r3, [pc, #60]	@ (80044e4 <xTaskCheckForTimeOut+0x70>)
 80044a8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	d010      	beq.n	80044d2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044b0:	480d      	ldr	r0, [pc, #52]	@ (80044e8 <xTaskCheckForTimeOut+0x74>)
 80044b2:	682e      	ldr	r6, [r5, #0]
 80044b4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044b6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044b8:	4286      	cmp	r6, r0
 80044ba:	d001      	beq.n	80044c0 <xTaskCheckForTimeOut+0x4c>
 80044bc:	428a      	cmp	r2, r1
 80044be:	d90f      	bls.n	80044e0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044c0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044c2:	4283      	cmp	r3, r0
 80044c4:	d90a      	bls.n	80044dc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80044c6:	1a5b      	subs	r3, r3, r1
 80044c8:	4413      	add	r3, r2
 80044ca:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044cc:	4628      	mov	r0, r5
 80044ce:	f7ff ffc5 	bl	800445c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80044d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80044d4:	f000 fad6 	bl	8004a84 <vPortExitCritical>
}
 80044d8:	4620      	mov	r0, r4
 80044da:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80044e0:	2401      	movs	r4, #1
 80044e2:	e7f7      	b.n	80044d4 <xTaskCheckForTimeOut+0x60>
 80044e4:	20000b1c 	.word	0x20000b1c
 80044e8:	20000b08 	.word	0x20000b08

080044ec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80044ec:	4b01      	ldr	r3, [pc, #4]	@ (80044f4 <vTaskMissedYield+0x8>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
}
 80044f2:	4770      	bx	lr
 80044f4:	20000b0c 	.word	0x20000b0c

080044f8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <xTaskGetSchedulerState+0x18>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	b133      	cbz	r3, 800450c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fe:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <xTaskGetSchedulerState+0x1c>)
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	fab0 f080 	clz	r0, r0
 8004506:	0940      	lsrs	r0, r0, #5
 8004508:	0040      	lsls	r0, r0, #1
 800450a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800450c:	2001      	movs	r0, #1
	}
 800450e:	4770      	bx	lr
 8004510:	20000b14 	.word	0x20000b14
 8004514:	20000afc 	.word	0x20000afc

08004518 <xTaskPriorityDisinherit>:
	{
 8004518:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800451a:	b908      	cbnz	r0, 8004520 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800451c:	2000      	movs	r0, #0
	}
 800451e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004520:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <xTaskPriorityDisinherit+0x78>)
 8004522:	681c      	ldr	r4, [r3, #0]
 8004524:	4284      	cmp	r4, r0
 8004526:	d008      	beq.n	800453a <xTaskPriorityDisinherit+0x22>
 8004528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	e7fe      	b.n	8004538 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800453a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800453c:	b943      	cbnz	r3, 8004550 <xTaskPriorityDisinherit+0x38>
 800453e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	e7fe      	b.n	800454e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004550:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004552:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004554:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004556:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004558:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800455a:	d0df      	beq.n	800451c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1dd      	bne.n	800451c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004560:	1d25      	adds	r5, r4, #4
 8004562:	4628      	mov	r0, r5
 8004564:	f7ff f874 	bl	8003650 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004568:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800456a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004570:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004572:	4a08      	ldr	r2, [pc, #32]	@ (8004594 <xTaskPriorityDisinherit+0x7c>)
 8004574:	6811      	ldr	r1, [r2, #0]
 8004576:	428b      	cmp	r3, r1
 8004578:	bf88      	it	hi
 800457a:	6013      	strhi	r3, [r2, #0]
 800457c:	4a06      	ldr	r2, [pc, #24]	@ (8004598 <xTaskPriorityDisinherit+0x80>)
 800457e:	2014      	movs	r0, #20
 8004580:	fb00 2003 	mla	r0, r0, r3, r2
 8004584:	4629      	mov	r1, r5
 8004586:	f7ff f841 	bl	800360c <vListInsertEnd>
					xReturn = pdTRUE;
 800458a:	2001      	movs	r0, #1
		return xReturn;
 800458c:	e7c7      	b.n	800451e <xTaskPriorityDisinherit+0x6>
 800458e:	bf00      	nop
 8004590:	20000ff4 	.word	0x20000ff4
 8004594:	20000b18 	.word	0x20000b18
 8004598:	20000b94 	.word	0x20000b94

0800459c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800459c:	4291      	cmp	r1, r2
{
 800459e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045a0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045a2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80045a4:	d80a      	bhi.n	80045bc <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a6:	1ad2      	subs	r2, r2, r3
 80045a8:	6983      	ldr	r3, [r0, #24]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d20d      	bcs.n	80045ca <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045ae:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <prvInsertTimerInActiveList+0x34>)
 80045b0:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	f7ff f835 	bl	8003622 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80045b8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80045ba:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045bc:	429a      	cmp	r2, r3
 80045be:	d201      	bcs.n	80045c4 <prvInsertTimerInActiveList+0x28>
 80045c0:	4299      	cmp	r1, r3
 80045c2:	d202      	bcs.n	80045ca <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045c4:	4b03      	ldr	r3, [pc, #12]	@ (80045d4 <prvInsertTimerInActiveList+0x38>)
 80045c6:	1d01      	adds	r1, r0, #4
 80045c8:	e7f3      	b.n	80045b2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80045ca:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80045cc:	e7f5      	b.n	80045ba <prvInsertTimerInActiveList+0x1e>
 80045ce:	bf00      	nop
 80045d0:	200010f4 	.word	0x200010f4
 80045d4:	200010f8 	.word	0x200010f8

080045d8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80045da:	4c11      	ldr	r4, [pc, #68]	@ (8004620 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80045dc:	f000 fa32 	bl	8004a44 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80045e0:	6825      	ldr	r5, [r4, #0]
 80045e2:	b9bd      	cbnz	r5, 8004614 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80045e4:	4f0f      	ldr	r7, [pc, #60]	@ (8004624 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80045e6:	4e10      	ldr	r6, [pc, #64]	@ (8004628 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80045e8:	4638      	mov	r0, r7
 80045ea:	f7ff f801 	bl	80035f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045ee:	4630      	mov	r0, r6
 80045f0:	f7fe fffe 	bl	80035f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045f4:	4b0d      	ldr	r3, [pc, #52]	@ (800462c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004630 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 80045f8:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004634 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045fc:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 80045fe:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004600:	200a      	movs	r0, #10
 8004602:	4b0d      	ldr	r3, [pc, #52]	@ (8004638 <prvCheckForValidListAndQueue+0x60>)
 8004604:	9500      	str	r5, [sp, #0]
 8004606:	f7ff f8fc 	bl	8003802 <xQueueGenericCreateStatic>
 800460a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800460c:	b110      	cbz	r0, 8004614 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800460e:	490b      	ldr	r1, [pc, #44]	@ (800463c <prvCheckForValidListAndQueue+0x64>)
 8004610:	f7ff faf2 	bl	8003bf8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8004614:	b003      	add	sp, #12
 8004616:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800461a:	f000 ba33 	b.w	8004a84 <vPortExitCritical>
 800461e:	bf00      	nop
 8004620:	200010f0 	.word	0x200010f0
 8004624:	20001110 	.word	0x20001110
 8004628:	200010fc 	.word	0x200010fc
 800462c:	200010f8 	.word	0x200010f8
 8004630:	20001048 	.word	0x20001048
 8004634:	200010f4 	.word	0x200010f4
 8004638:	20000ff8 	.word	0x20000ff8
 800463c:	08004f59 	.word	0x08004f59

08004640 <xTimerCreateTimerTask>:
{
 8004640:	b510      	push	{r4, lr}
 8004642:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8004644:	f7ff ffc8 	bl	80045d8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8004648:	4b12      	ldr	r3, [pc, #72]	@ (8004694 <xTimerCreateTimerTask+0x54>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	b1b3      	cbz	r3, 800467c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800464e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004650:	aa07      	add	r2, sp, #28
 8004652:	a906      	add	r1, sp, #24
 8004654:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004656:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800465a:	f7fe ffbd 	bl	80035d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800465e:	9b05      	ldr	r3, [sp, #20]
 8004660:	9302      	str	r3, [sp, #8]
 8004662:	9b06      	ldr	r3, [sp, #24]
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	2302      	movs	r3, #2
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	9a07      	ldr	r2, [sp, #28]
 800466c:	490a      	ldr	r1, [pc, #40]	@ (8004698 <xTimerCreateTimerTask+0x58>)
 800466e:	480b      	ldr	r0, [pc, #44]	@ (800469c <xTimerCreateTimerTask+0x5c>)
 8004670:	4623      	mov	r3, r4
 8004672:	f7ff fc58 	bl	8003f26 <xTaskCreateStatic>
 8004676:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <xTimerCreateTimerTask+0x60>)
 8004678:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800467a:	b940      	cbnz	r0, 800468e <xTimerCreateTimerTask+0x4e>
 800467c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800468c:	e7fe      	b.n	800468c <xTimerCreateTimerTask+0x4c>
}
 800468e:	2001      	movs	r0, #1
 8004690:	b008      	add	sp, #32
 8004692:	bd10      	pop	{r4, pc}
 8004694:	200010f0 	.word	0x200010f0
 8004698:	08004f5e 	.word	0x08004f5e
 800469c:	080047a1 	.word	0x080047a1
 80046a0:	200010ec 	.word	0x200010ec

080046a4 <xTimerGenericCommand>:
{
 80046a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80046a6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80046a8:	4604      	mov	r4, r0
{
 80046aa:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80046ac:	b940      	cbnz	r0, 80046c0 <xTimerGenericCommand+0x1c>
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	e7fe      	b.n	80046be <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80046c0:	4d0d      	ldr	r5, [pc, #52]	@ (80046f8 <xTimerGenericCommand+0x54>)
 80046c2:	6828      	ldr	r0, [r5, #0]
 80046c4:	b180      	cbz	r0, 80046e8 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046c6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046c8:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046cc:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046ce:	dc0d      	bgt.n	80046ec <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046d0:	f7ff ff12 	bl	80044f8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046d4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046d6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046d8:	bf08      	it	eq
 80046da:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046dc:	6828      	ldr	r0, [r5, #0]
 80046de:	bf18      	it	ne
 80046e0:	461a      	movne	r2, r3
 80046e2:	4669      	mov	r1, sp
 80046e4:	f7ff f8db 	bl	800389e <xQueueGenericSend>
}
 80046e8:	b004      	add	sp, #16
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046ec:	2300      	movs	r3, #0
 80046ee:	4669      	mov	r1, sp
 80046f0:	f7ff f987 	bl	8003a02 <xQueueGenericSendFromISR>
 80046f4:	e7f8      	b.n	80046e8 <xTimerGenericCommand+0x44>
 80046f6:	bf00      	nop
 80046f8:	200010f0 	.word	0x200010f0

080046fc <prvSampleTimeNow>:
{
 80046fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8004700:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800479c <prvSampleTimeNow+0xa0>
{
 8004704:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8004706:	f7ff fcc3 	bl	8004090 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800470a:	f8d8 3000 	ldr.w	r3, [r8]
 800470e:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8004710:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8004712:	d909      	bls.n	8004728 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004714:	4f1f      	ldr	r7, [pc, #124]	@ (8004794 <prvSampleTimeNow+0x98>)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	b96a      	cbnz	r2, 8004738 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800471c:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <prvSampleTimeNow+0x9c>)
 800471e:	6811      	ldr	r1, [r2, #0]
 8004720:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8004722:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <prvSampleTimeNow+0x2e>
 8004728:	2300      	movs	r3, #0
}
 800472a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800472c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800472e:	f8c8 5000 	str.w	r5, [r8]
}
 8004732:	b002      	add	sp, #8
 8004734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004738:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800473c:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004740:	f104 0a04 	add.w	sl, r4, #4
 8004744:	4650      	mov	r0, sl
 8004746:	f7fe ff83 	bl	8003650 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800474a:	6a23      	ldr	r3, [r4, #32]
 800474c:	4620      	mov	r0, r4
 800474e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004750:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004754:	075b      	lsls	r3, r3, #29
 8004756:	d5de      	bpl.n	8004716 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004758:	69a3      	ldr	r3, [r4, #24]
 800475a:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800475c:	4599      	cmp	r9, r3
 800475e:	d206      	bcs.n	800476e <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004760:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004762:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004764:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004766:	4651      	mov	r1, sl
 8004768:	f7fe ff5b 	bl	8003622 <vListInsert>
 800476c:	e7d3      	b.n	8004716 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800476e:	2300      	movs	r3, #0
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	464a      	mov	r2, r9
 8004774:	4619      	mov	r1, r3
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff ff94 	bl	80046a4 <xTimerGenericCommand>
				configASSERT( xResult );
 800477c:	2800      	cmp	r0, #0
 800477e:	d1ca      	bne.n	8004716 <prvSampleTimeNow+0x1a>
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	e7fe      	b.n	8004790 <prvSampleTimeNow+0x94>
 8004792:	bf00      	nop
 8004794:	200010f8 	.word	0x200010f8
 8004798:	200010f4 	.word	0x200010f4
 800479c:	200010e8 	.word	0x200010e8

080047a0 <prvTimerTask>:
{
 80047a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047a4:	4d6e      	ldr	r5, [pc, #440]	@ (8004960 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047a6:	4e6f      	ldr	r6, [pc, #444]	@ (8004964 <prvTimerTask+0x1c4>)
{
 80047a8:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047aa:	682b      	ldr	r3, [r5, #0]
 80047ac:	f8d3 8000 	ldr.w	r8, [r3]
 80047b0:	f1b8 0f00 	cmp.w	r8, #0
 80047b4:	d035      	beq.n	8004822 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047bc:	2400      	movs	r4, #0
	vTaskSuspendAll();
 80047be:	f7ff fc5f 	bl	8004080 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047c2:	a804      	add	r0, sp, #16
 80047c4:	f7ff ff9a 	bl	80046fc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80047c8:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ca:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d169      	bne.n	80048a4 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047d0:	2c00      	cmp	r4, #0
 80047d2:	d14c      	bne.n	800486e <prvTimerTask+0xce>
 80047d4:	4540      	cmp	r0, r8
 80047d6:	d350      	bcc.n	800487a <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 80047d8:	f7ff fcf6 	bl	80041c8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047e2:	1d38      	adds	r0, r7, #4
 80047e4:	f7fe ff34 	bl	8003650 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047ec:	0758      	lsls	r0, r3, #29
 80047ee:	d51a      	bpl.n	8004826 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047f0:	69b9      	ldr	r1, [r7, #24]
 80047f2:	4643      	mov	r3, r8
 80047f4:	464a      	mov	r2, r9
 80047f6:	4441      	add	r1, r8
 80047f8:	4638      	mov	r0, r7
 80047fa:	f7ff fecf 	bl	800459c <prvInsertTimerInActiveList>
 80047fe:	b1b0      	cbz	r0, 800482e <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004800:	9400      	str	r4, [sp, #0]
 8004802:	4623      	mov	r3, r4
 8004804:	4642      	mov	r2, r8
 8004806:	4621      	mov	r1, r4
 8004808:	4638      	mov	r0, r7
 800480a:	f7ff ff4b 	bl	80046a4 <xTimerGenericCommand>
			configASSERT( xResult );
 800480e:	b970      	cbnz	r0, 800482e <prvTimerTask+0x8e>
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	e7fe      	b.n	8004820 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004822:	2401      	movs	r4, #1
 8004824:	e7cb      	b.n	80047be <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	4638      	mov	r0, r7
 8004832:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004834:	6830      	ldr	r0, [r6, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	a904      	add	r1, sp, #16
 800483a:	f7ff f93f 	bl	8003abc <xQueueReceive>
 800483e:	2800      	cmp	r0, #0
 8004840:	d0b3      	beq.n	80047aa <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004842:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004844:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004846:	2b00      	cmp	r3, #0
 8004848:	db2f      	blt.n	80048aa <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800484a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800484c:	6963      	ldr	r3, [r4, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d132      	bne.n	80048b8 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004852:	a803      	add	r0, sp, #12
 8004854:	f7ff ff52 	bl	80046fc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8004858:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800485a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800485c:	2b09      	cmp	r3, #9
 800485e:	d8e9      	bhi.n	8004834 <prvTimerTask+0x94>
 8004860:	e8df f003 	tbb	[pc, r3]
 8004864:	572e2e2e 	.word	0x572e2e2e
 8004868:	2e2e765e 	.word	0x2e2e765e
 800486c:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800486e:	4b3e      	ldr	r3, [pc, #248]	@ (8004968 <prvTimerTask+0x1c8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681c      	ldr	r4, [r3, #0]
 8004874:	fab4 f484 	clz	r4, r4
 8004878:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800487a:	6830      	ldr	r0, [r6, #0]
 800487c:	4622      	mov	r2, r4
 800487e:	eba8 0109 	sub.w	r1, r8, r9
 8004882:	f7ff f9cb 	bl	8003c1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004886:	f7ff fc9f 	bl	80041c8 <xTaskResumeAll>
 800488a:	2800      	cmp	r0, #0
 800488c:	d1d2      	bne.n	8004834 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800488e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004896:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	e7c7      	b.n	8004834 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80048a4:	f7ff fc90 	bl	80041c8 <xTaskResumeAll>
}
 80048a8:	e7c4      	b.n	8004834 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048aa:	9b05      	ldr	r3, [sp, #20]
 80048ac:	9907      	ldr	r1, [sp, #28]
 80048ae:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048b0:	9b04      	ldr	r3, [sp, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	dbbe      	blt.n	8004834 <prvTimerTask+0x94>
 80048b6:	e7c8      	b.n	800484a <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048b8:	1d20      	adds	r0, r4, #4
 80048ba:	f7fe fec9 	bl	8003650 <uxListRemove>
 80048be:	e7c8      	b.n	8004852 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048c4:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048ce:	9b05      	ldr	r3, [sp, #20]
 80048d0:	4620      	mov	r0, r4
 80048d2:	4419      	add	r1, r3
 80048d4:	f7ff fe62 	bl	800459c <prvInsertTimerInActiveList>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d0ab      	beq.n	8004834 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048dc:	6a23      	ldr	r3, [r4, #32]
 80048de:	4620      	mov	r0, r4
 80048e0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048e2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80048e6:	0759      	lsls	r1, r3, #29
 80048e8:	d5a4      	bpl.n	8004834 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048ea:	69a2      	ldr	r2, [r4, #24]
 80048ec:	9905      	ldr	r1, [sp, #20]
 80048ee:	2300      	movs	r3, #0
 80048f0:	440a      	add	r2, r1
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff fed4 	bl	80046a4 <xTimerGenericCommand>
							configASSERT( xResult );
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d199      	bne.n	8004834 <prvTimerTask+0x94>
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	e7fe      	b.n	8004910 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004912:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800491e:	e789      	b.n	8004834 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004920:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800492c:	9905      	ldr	r1, [sp, #20]
 800492e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004930:	b941      	cbnz	r1, 8004944 <prvTimerTask+0x1a4>
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	e7fe      	b.n	8004942 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004944:	4603      	mov	r3, r0
 8004946:	4401      	add	r1, r0
 8004948:	4620      	mov	r0, r4
 800494a:	f7ff fe27 	bl	800459c <prvInsertTimerInActiveList>
					break;
 800494e:	e771      	b.n	8004834 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004950:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8004954:	079a      	lsls	r2, r3, #30
 8004956:	d4de      	bmi.n	8004916 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8004958:	4620      	mov	r0, r4
 800495a:	f000 fa71 	bl	8004e40 <vPortFree>
 800495e:	e769      	b.n	8004834 <prvTimerTask+0x94>
 8004960:	200010f8 	.word	0x200010f8
 8004964:	200010f0 	.word	0x200010f0
 8004968:	200010f4 	.word	0x200010f4

0800496c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800496c:	4808      	ldr	r0, [pc, #32]	@ (8004990 <prvPortStartFirstTask+0x24>)
 800496e:	6800      	ldr	r0, [r0, #0]
 8004970:	6800      	ldr	r0, [r0, #0]
 8004972:	f380 8808 	msr	MSP, r0
 8004976:	f04f 0000 	mov.w	r0, #0
 800497a:	f380 8814 	msr	CONTROL, r0
 800497e:	b662      	cpsie	i
 8004980:	b661      	cpsie	f
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	df00      	svc	0
 800498c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800498e:	0000      	.short	0x0000
 8004990:	e000ed08 	.word	0xe000ed08

08004994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004994:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80049a4 <vPortEnableVFP+0x10>
 8004998:	6801      	ldr	r1, [r0, #0]
 800499a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800499e:	6001      	str	r1, [r0, #0]
 80049a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049a2:	0000      	.short	0x0000
 80049a4:	e000ed88 	.word	0xe000ed88

080049a8 <prvTaskExitError>:
{
 80049a8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80049ae:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <prvTaskExitError+0x3c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	d008      	beq.n	80049c8 <prvTaskExitError+0x20>
 80049b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	e7fe      	b.n	80049c6 <prvTaskExitError+0x1e>
 80049c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0fc      	beq.n	80049d8 <prvTaskExitError+0x30>
}
 80049de:	b002      	add	sp, #8
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	2000000c 	.word	0x2000000c

080049e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049ec:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049f0:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <pxPortInitialiseStack+0x28>)
 80049f2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049f6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049fa:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049fe:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a02:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a06:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004a0a:	3844      	subs	r0, #68	@ 0x44
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	080049a9 	.word	0x080049a9
	...

08004a20 <SVC_Handler>:
	__asm volatile (
 8004a20:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <pxCurrentTCBConst2>)
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	6808      	ldr	r0, [r1, #0]
 8004a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	f380 8809 	msr	PSP, r0
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8811 	msr	BASEPRI, r0
 8004a3a:	4770      	bx	lr
 8004a3c:	f3af 8000 	nop.w

08004a40 <pxCurrentTCBConst2>:
 8004a40:	20000ff4 	.word	0x20000ff4

08004a44 <vPortEnterCritical>:
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004a54:	4a0a      	ldr	r2, [pc, #40]	@ (8004a80 <vPortEnterCritical+0x3c>)
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8004a5a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004a5c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004a5e:	d10e      	bne.n	8004a7e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004a64:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	b143      	cbz	r3, 8004a7e <vPortEnterCritical+0x3a>
 8004a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	e7fe      	b.n	8004a7c <vPortEnterCritical+0x38>
}
 8004a7e:	4770      	bx	lr
 8004a80:	2000000c 	.word	0x2000000c

08004a84 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004a84:	4a08      	ldr	r2, [pc, #32]	@ (8004aa8 <vPortExitCritical+0x24>)
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	b943      	cbnz	r3, 8004a9c <vPortExitCritical+0x18>
 8004a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	e7fe      	b.n	8004a9a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004aa0:	b90b      	cbnz	r3, 8004aa6 <vPortExitCritical+0x22>
	__asm volatile
 8004aa2:	f383 8811 	msr	BASEPRI, r3
}
 8004aa6:	4770      	bx	lr
 8004aa8:	2000000c 	.word	0x2000000c
 8004aac:	00000000 	.word	0x00000000

08004ab0 <PendSV_Handler>:
	__asm volatile
 8004ab0:	f3ef 8009 	mrs	r0, PSP
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <pxCurrentTCBConst>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	f01e 0f10 	tst.w	lr, #16
 8004ac0:	bf08      	it	eq
 8004ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	6010      	str	r0, [r2, #0]
 8004acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ad4:	f380 8811 	msr	BASEPRI, r0
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f7ff fc0a 	bl	80042f8 <vTaskSwitchContext>
 8004ae4:	f04f 0000 	mov.w	r0, #0
 8004ae8:	f380 8811 	msr	BASEPRI, r0
 8004aec:	bc09      	pop	{r0, r3}
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	6808      	ldr	r0, [r1, #0]
 8004af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af6:	f01e 0f10 	tst.w	lr, #16
 8004afa:	bf08      	it	eq
 8004afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b00:	f380 8809 	msr	PSP, r0
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	f3af 8000 	nop.w

08004b10 <pxCurrentTCBConst>:
 8004b10:	20000ff4 	.word	0x20000ff4

08004b14 <xPortSysTickHandler>:
{
 8004b14:	b508      	push	{r3, lr}
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004b26:	f7ff fab9 	bl	800409c <xTaskIncrementTick>
 8004b2a:	b128      	cbz	r0, 8004b38 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f383 8811 	msr	BASEPRI, r3
}
 8004b3e:	bd08      	pop	{r3, pc}

08004b40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b40:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004b44:	2300      	movs	r3, #0
 8004b46:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b48:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b4a:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <vPortSetupTimerInterrupt+0x20>)
 8004b4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b56:	3b01      	subs	r3, #1
 8004b58:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b5a:	2307      	movs	r3, #7
 8004b5c:	6113      	str	r3, [r2, #16]
}
 8004b5e:	4770      	bx	lr
 8004b60:	20000000 	.word	0x20000000

08004b64 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8004b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b6a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8004b6e:	4a38      	ldr	r2, [pc, #224]	@ (8004c50 <xPortStartScheduler+0xec>)
 8004b70:	4291      	cmp	r1, r2
 8004b72:	d108      	bne.n	8004b86 <xPortStartScheduler+0x22>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	e7fe      	b.n	8004b84 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b86:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004b8a:	4b32      	ldr	r3, [pc, #200]	@ (8004c54 <xPortStartScheduler+0xf0>)
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d108      	bne.n	8004ba2 <xPortStartScheduler+0x3e>
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	e7fe      	b.n	8004ba0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c58 <xPortStartScheduler+0xf4>)
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004baa:	22ff      	movs	r2, #255	@ 0xff
 8004bac:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bae:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c5c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004bbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004bc0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bc2:	4a27      	ldr	r2, [pc, #156]	@ (8004c60 <xPortStartScheduler+0xfc>)
 8004bc4:	2307      	movs	r3, #7
 8004bc6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bc8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8004bcc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bce:	0609      	lsls	r1, r1, #24
 8004bd0:	d40a      	bmi.n	8004be8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d011      	beq.n	8004bfa <xPortStartScheduler+0x96>
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	e7fe      	b.n	8004be6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8004be8:	3b01      	subs	r3, #1
 8004bea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f88d 3003 	strb.w	r3, [sp, #3]
 8004bf8:	e7e6      	b.n	8004bc8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004bfe:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c00:	9b01      	ldr	r3, [sp, #4]
 8004c02:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c04:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c0c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8004c10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c14:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c18:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8004c1c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004c20:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8004c24:	f7ff ff8c 	bl	8004b40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004c28:	4b0e      	ldr	r3, [pc, #56]	@ (8004c64 <xPortStartScheduler+0x100>)
 8004c2a:	2500      	movs	r5, #0
 8004c2c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8004c2e:	f7ff feb1 	bl	8004994 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c32:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8004c36:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004c3a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8004c3e:	f7ff fe95 	bl	800496c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004c42:	f7ff fb59 	bl	80042f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004c46:	f7ff feaf 	bl	80049a8 <prvTaskExitError>
}
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	b003      	add	sp, #12
 8004c4e:	bd30      	pop	{r4, r5, pc}
 8004c50:	410fc271 	.word	0x410fc271
 8004c54:	410fc270 	.word	0x410fc270
 8004c58:	e000e400 	.word	0xe000e400
 8004c5c:	20001128 	.word	0x20001128
 8004c60:	20001124 	.word	0x20001124
 8004c64:	2000000c 	.word	0x2000000c

08004c68 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c68:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c6c:	2b0f      	cmp	r3, #15
 8004c6e:	d90e      	bls.n	8004c8e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c70:	4a11      	ldr	r2, [pc, #68]	@ (8004cb8 <vPortValidateInterruptPriority+0x50>)
 8004c72:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c74:	4a11      	ldr	r2, [pc, #68]	@ (8004cbc <vPortValidateInterruptPriority+0x54>)
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d908      	bls.n	8004c8e <vPortValidateInterruptPriority+0x26>
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	e7fe      	b.n	8004c8c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c92:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc0 <vPortValidateInterruptPriority+0x58>)
 8004c94:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d908      	bls.n	8004cb4 <vPortValidateInterruptPriority+0x4c>
 8004ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	e7fe      	b.n	8004cb2 <vPortValidateInterruptPriority+0x4a>
	}
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	e000e3f0 	.word	0xe000e3f0
 8004cbc:	20001128 	.word	0x20001128
 8004cc0:	20001124 	.word	0x20001124

08004cc4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cc4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cc6:	4b10      	ldr	r3, [pc, #64]	@ (8004d08 <prvInsertBlockIntoFreeList+0x44>)
 8004cc8:	461a      	mov	r2, r3
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4283      	cmp	r3, r0
 8004cce:	d3fb      	bcc.n	8004cc8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cd0:	6854      	ldr	r4, [r2, #4]
 8004cd2:	1911      	adds	r1, r2, r4
 8004cd4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cd6:	bf01      	itttt	eq
 8004cd8:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 8004cda:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cdc:	1909      	addeq	r1, r1, r4
 8004cde:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ce0:	6844      	ldr	r4, [r0, #4]
 8004ce2:	1901      	adds	r1, r0, r4
 8004ce4:	428b      	cmp	r3, r1
 8004ce6:	d10c      	bne.n	8004d02 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ce8:	4908      	ldr	r1, [pc, #32]	@ (8004d0c <prvInsertBlockIntoFreeList+0x48>)
 8004cea:	6809      	ldr	r1, [r1, #0]
 8004cec:	428b      	cmp	r3, r1
 8004cee:	d003      	beq.n	8004cf8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	4421      	add	r1, r4
 8004cf4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cf6:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cf8:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cfa:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cfc:	bf18      	it	ne
 8004cfe:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	4619      	mov	r1, r3
 8004d04:	e7f8      	b.n	8004cf8 <prvInsertBlockIntoFreeList+0x34>
 8004d06:	bf00      	nop
 8004d08:	20001144 	.word	0x20001144
 8004d0c:	20001140 	.word	0x20001140

08004d10 <pvPortMalloc>:
{
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d14:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004d16:	f7ff f9b3 	bl	8004080 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004d1a:	4942      	ldr	r1, [pc, #264]	@ (8004e24 <pvPortMalloc+0x114>)
 8004d1c:	4d42      	ldr	r5, [pc, #264]	@ (8004e28 <pvPortMalloc+0x118>)
 8004d1e:	680b      	ldr	r3, [r1, #0]
 8004d20:	bb0b      	cbnz	r3, 8004d66 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8004d22:	4a42      	ldr	r2, [pc, #264]	@ (8004e2c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d24:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d26:	bf1f      	itttt	ne
 8004d28:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d2a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d2e:	f502 6240 	addne.w	r2, r2, #3072	@ 0xc00
 8004d32:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d34:	bf0c      	ite	eq
 8004d36:	f44f 6340 	moveq.w	r3, #3072	@ 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d3a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d3c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d3e:	4e3c      	ldr	r6, [pc, #240]	@ (8004e30 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8004d40:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d42:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8004d46:	2000      	movs	r0, #0
 8004d48:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d4a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8004d4c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d50:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d52:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8004d56:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d58:	4b36      	ldr	r3, [pc, #216]	@ (8004e34 <pvPortMalloc+0x124>)
 8004d5a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d5c:	4b36      	ldr	r3, [pc, #216]	@ (8004e38 <pvPortMalloc+0x128>)
 8004d5e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d64:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d66:	682e      	ldr	r6, [r5, #0]
 8004d68:	4226      	tst	r6, r4
 8004d6a:	d155      	bne.n	8004e18 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	d046      	beq.n	8004dfe <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8004d70:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d74:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d76:	bf1c      	itt	ne
 8004d78:	f023 0307 	bicne.w	r3, r3, #7
 8004d7c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d04a      	beq.n	8004e18 <pvPortMalloc+0x108>
 8004d82:	4f2d      	ldr	r7, [pc, #180]	@ (8004e38 <pvPortMalloc+0x128>)
 8004d84:	683c      	ldr	r4, [r7, #0]
 8004d86:	429c      	cmp	r4, r3
 8004d88:	d346      	bcc.n	8004e18 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8004d8a:	4a29      	ldr	r2, [pc, #164]	@ (8004e30 <pvPortMalloc+0x120>)
 8004d8c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d8e:	6868      	ldr	r0, [r5, #4]
 8004d90:	4298      	cmp	r0, r3
 8004d92:	d204      	bcs.n	8004d9e <pvPortMalloc+0x8e>
 8004d94:	f8d5 c000 	ldr.w	ip, [r5]
 8004d98:	f1bc 0f00 	cmp.w	ip, #0
 8004d9c:	d115      	bne.n	8004dca <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8004d9e:	6809      	ldr	r1, [r1, #0]
 8004da0:	42a9      	cmp	r1, r5
 8004da2:	d039      	beq.n	8004e18 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004da4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004da6:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004daa:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dac:	1ac2      	subs	r2, r0, r3
 8004dae:	2a10      	cmp	r2, #16
 8004db0:	d912      	bls.n	8004dd8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004db2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db4:	0741      	lsls	r1, r0, #29
 8004db6:	d00b      	beq.n	8004dd0 <pvPortMalloc+0xc0>
 8004db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	e7fe      	b.n	8004dc8 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 8004dca:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dcc:	4665      	mov	r5, ip
 8004dce:	e7de      	b.n	8004d8e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dd0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dd2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dd4:	f7ff ff76 	bl	8004cc4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dd8:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dda:	4916      	ldr	r1, [pc, #88]	@ (8004e34 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ddc:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dde:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8004de0:	4a16      	ldr	r2, [pc, #88]	@ (8004e3c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004de2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004de4:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8004dea:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dec:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dee:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8004df0:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004df4:	bf38      	it	cc
 8004df6:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8004df8:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dfa:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8004dfe:	f7ff f9e3 	bl	80041c8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e02:	0763      	lsls	r3, r4, #29
 8004e04:	d00a      	beq.n	8004e1c <pvPortMalloc+0x10c>
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	e7fe      	b.n	8004e16 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8004e18:	2400      	movs	r4, #0
 8004e1a:	e7f0      	b.n	8004dfe <pvPortMalloc+0xee>
}
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e22:	bf00      	nop
 8004e24:	20001140 	.word	0x20001140
 8004e28:	2000112c 	.word	0x2000112c
 8004e2c:	2000114c 	.word	0x2000114c
 8004e30:	20001144 	.word	0x20001144
 8004e34:	20001138 	.word	0x20001138
 8004e38:	2000113c 	.word	0x2000113c
 8004e3c:	20001134 	.word	0x20001134

08004e40 <vPortFree>:
{
 8004e40:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004e42:	4604      	mov	r4, r0
 8004e44:	b390      	cbz	r0, 8004eac <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e46:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb0 <vPortFree+0x70>)
 8004e48:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	4213      	tst	r3, r2
 8004e50:	d108      	bne.n	8004e64 <vPortFree+0x24>
 8004e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	e7fe      	b.n	8004e62 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e64:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004e68:	b141      	cbz	r1, 8004e7c <vPortFree+0x3c>
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	e7fe      	b.n	8004e7a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e7c:	ea23 0302 	bic.w	r3, r3, r2
 8004e80:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004e84:	f7ff f8fc 	bl	8004080 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e88:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb4 <vPortFree+0x74>)
 8004e8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004e8e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e90:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e94:	440b      	add	r3, r1
 8004e96:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e98:	f7ff ff14 	bl	8004cc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e9c:	4a06      	ldr	r2, [pc, #24]	@ (8004eb8 <vPortFree+0x78>)
 8004e9e:	6813      	ldr	r3, [r2, #0]
}
 8004ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8004ea8:	f7ff b98e 	b.w	80041c8 <xTaskResumeAll>
}
 8004eac:	bd10      	pop	{r4, pc}
 8004eae:	bf00      	nop
 8004eb0:	2000112c 	.word	0x2000112c
 8004eb4:	2000113c 	.word	0x2000113c
 8004eb8:	20001130 	.word	0x20001130

08004ebc <memset>:
 8004ebc:	4402      	add	r2, r0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d100      	bne.n	8004ec6 <memset+0xa>
 8004ec4:	4770      	bx	lr
 8004ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eca:	e7f9      	b.n	8004ec0 <memset+0x4>

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4d0d      	ldr	r5, [pc, #52]	@ (8004f04 <__libc_init_array+0x38>)
 8004ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8004f08 <__libc_init_array+0x3c>)
 8004ed2:	1b64      	subs	r4, r4, r5
 8004ed4:	10a4      	asrs	r4, r4, #2
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	42a6      	cmp	r6, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	4d0b      	ldr	r5, [pc, #44]	@ (8004f0c <__libc_init_array+0x40>)
 8004ede:	4c0c      	ldr	r4, [pc, #48]	@ (8004f10 <__libc_init_array+0x44>)
 8004ee0:	f000 f826 	bl	8004f30 <_init>
 8004ee4:	1b64      	subs	r4, r4, r5
 8004ee6:	10a4      	asrs	r4, r4, #2
 8004ee8:	2600      	movs	r6, #0
 8004eea:	42a6      	cmp	r6, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef4:	4798      	blx	r3
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efe:	4798      	blx	r3
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	08004fd4 	.word	0x08004fd4
 8004f08:	08004fd4 	.word	0x08004fd4
 8004f0c:	08004fd4 	.word	0x08004fd4
 8004f10:	08004fd8 	.word	0x08004fd8

08004f14 <memcpy>:
 8004f14:	440a      	add	r2, r1
 8004f16:	4291      	cmp	r1, r2
 8004f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xc>
 8004f1e:	4770      	bx	lr
 8004f20:	b510      	push	{r4, lr}
 8004f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d1f9      	bne.n	8004f22 <memcpy+0xe>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <_init>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr

08004f3c <_fini>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr
